// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: instruments.proto
// </auto-generated>
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Tinkoff.InvestApi.V1 {
  /// <summary>
  ///Сервис предназначен для получения:&lt;/br>**1**. информации об инструментах;&lt;/br>**2**.
  ///расписания торговых сессий;&lt;/br>**3**. календаря выплат купонов по облигациям;&lt;/br>**4**.
  ///размера гарантийного обеспечения по фьючерсам;&lt;/br>**5**. дивидендов по ценной бумаге.
  /// </summary>
  public static partial class InstrumentsService
  {
    static readonly string __ServiceName = "tinkoff.public.invest.api.contract.v1.InstrumentsService";

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static void __Helper_SerializeMessage(global::Google.Protobuf.IMessage message, grpc::SerializationContext context)
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (message is global::Google.Protobuf.IBufferMessage)
      {
        context.SetPayloadLength(message.CalculateSize());
        global::Google.Protobuf.MessageExtensions.WriteTo(message, context.GetBufferWriter());
        context.Complete();
        return;
      }
      #endif
      context.Complete(global::Google.Protobuf.MessageExtensions.ToByteArray(message));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static class __Helper_MessageCache<T>
    {
      public static readonly bool IsBufferMessage = global::System.Reflection.IntrospectionExtensions.GetTypeInfo(typeof(global::Google.Protobuf.IBufferMessage)).IsAssignableFrom(typeof(T));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static T __Helper_DeserializeMessage<T>(grpc::DeserializationContext context, global::Google.Protobuf.MessageParser<T> parser) where T : global::Google.Protobuf.IMessage<T>
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (__Helper_MessageCache<T>.IsBufferMessage)
      {
        return parser.ParseFrom(context.PayloadAsReadOnlySequence());
      }
      #endif
      return parser.ParseFrom(context.PayloadAsNewBuffer());
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Tinkoff.InvestApi.V1.TradingSchedulesRequest> __Marshaller_tinkoff_public_invest_api_contract_v1_TradingSchedulesRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Tinkoff.InvestApi.V1.TradingSchedulesRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Tinkoff.InvestApi.V1.TradingSchedulesResponse> __Marshaller_tinkoff_public_invest_api_contract_v1_TradingSchedulesResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Tinkoff.InvestApi.V1.TradingSchedulesResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Tinkoff.InvestApi.V1.InstrumentRequest> __Marshaller_tinkoff_public_invest_api_contract_v1_InstrumentRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Tinkoff.InvestApi.V1.InstrumentRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Tinkoff.InvestApi.V1.BondResponse> __Marshaller_tinkoff_public_invest_api_contract_v1_BondResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Tinkoff.InvestApi.V1.BondResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Tinkoff.InvestApi.V1.InstrumentsRequest> __Marshaller_tinkoff_public_invest_api_contract_v1_InstrumentsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Tinkoff.InvestApi.V1.InstrumentsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Tinkoff.InvestApi.V1.BondsResponse> __Marshaller_tinkoff_public_invest_api_contract_v1_BondsResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Tinkoff.InvestApi.V1.BondsResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Tinkoff.InvestApi.V1.CurrencyResponse> __Marshaller_tinkoff_public_invest_api_contract_v1_CurrencyResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Tinkoff.InvestApi.V1.CurrencyResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Tinkoff.InvestApi.V1.CurrenciesResponse> __Marshaller_tinkoff_public_invest_api_contract_v1_CurrenciesResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Tinkoff.InvestApi.V1.CurrenciesResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Tinkoff.InvestApi.V1.EtfResponse> __Marshaller_tinkoff_public_invest_api_contract_v1_EtfResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Tinkoff.InvestApi.V1.EtfResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Tinkoff.InvestApi.V1.EtfsResponse> __Marshaller_tinkoff_public_invest_api_contract_v1_EtfsResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Tinkoff.InvestApi.V1.EtfsResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Tinkoff.InvestApi.V1.FutureResponse> __Marshaller_tinkoff_public_invest_api_contract_v1_FutureResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Tinkoff.InvestApi.V1.FutureResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Tinkoff.InvestApi.V1.FuturesResponse> __Marshaller_tinkoff_public_invest_api_contract_v1_FuturesResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Tinkoff.InvestApi.V1.FuturesResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Tinkoff.InvestApi.V1.ShareResponse> __Marshaller_tinkoff_public_invest_api_contract_v1_ShareResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Tinkoff.InvestApi.V1.ShareResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Tinkoff.InvestApi.V1.SharesResponse> __Marshaller_tinkoff_public_invest_api_contract_v1_SharesResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Tinkoff.InvestApi.V1.SharesResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Tinkoff.InvestApi.V1.GetAccruedInterestsRequest> __Marshaller_tinkoff_public_invest_api_contract_v1_GetAccruedInterestsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Tinkoff.InvestApi.V1.GetAccruedInterestsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Tinkoff.InvestApi.V1.GetAccruedInterestsResponse> __Marshaller_tinkoff_public_invest_api_contract_v1_GetAccruedInterestsResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Tinkoff.InvestApi.V1.GetAccruedInterestsResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Tinkoff.InvestApi.V1.GetFuturesMarginRequest> __Marshaller_tinkoff_public_invest_api_contract_v1_GetFuturesMarginRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Tinkoff.InvestApi.V1.GetFuturesMarginRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Tinkoff.InvestApi.V1.GetFuturesMarginResponse> __Marshaller_tinkoff_public_invest_api_contract_v1_GetFuturesMarginResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Tinkoff.InvestApi.V1.GetFuturesMarginResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Tinkoff.InvestApi.V1.InstrumentResponse> __Marshaller_tinkoff_public_invest_api_contract_v1_InstrumentResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Tinkoff.InvestApi.V1.InstrumentResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Tinkoff.InvestApi.V1.GetDividendsRequest> __Marshaller_tinkoff_public_invest_api_contract_v1_GetDividendsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Tinkoff.InvestApi.V1.GetDividendsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Tinkoff.InvestApi.V1.GetDividendsResponse> __Marshaller_tinkoff_public_invest_api_contract_v1_GetDividendsResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Tinkoff.InvestApi.V1.GetDividendsResponse.Parser));

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Tinkoff.InvestApi.V1.TradingSchedulesRequest, global::Tinkoff.InvestApi.V1.TradingSchedulesResponse> __Method_TradingSchedules = new grpc::Method<global::Tinkoff.InvestApi.V1.TradingSchedulesRequest, global::Tinkoff.InvestApi.V1.TradingSchedulesResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "TradingSchedules",
        __Marshaller_tinkoff_public_invest_api_contract_v1_TradingSchedulesRequest,
        __Marshaller_tinkoff_public_invest_api_contract_v1_TradingSchedulesResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Tinkoff.InvestApi.V1.InstrumentRequest, global::Tinkoff.InvestApi.V1.BondResponse> __Method_BondBy = new grpc::Method<global::Tinkoff.InvestApi.V1.InstrumentRequest, global::Tinkoff.InvestApi.V1.BondResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "BondBy",
        __Marshaller_tinkoff_public_invest_api_contract_v1_InstrumentRequest,
        __Marshaller_tinkoff_public_invest_api_contract_v1_BondResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Tinkoff.InvestApi.V1.InstrumentsRequest, global::Tinkoff.InvestApi.V1.BondsResponse> __Method_Bonds = new grpc::Method<global::Tinkoff.InvestApi.V1.InstrumentsRequest, global::Tinkoff.InvestApi.V1.BondsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Bonds",
        __Marshaller_tinkoff_public_invest_api_contract_v1_InstrumentsRequest,
        __Marshaller_tinkoff_public_invest_api_contract_v1_BondsResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Tinkoff.InvestApi.V1.InstrumentRequest, global::Tinkoff.InvestApi.V1.CurrencyResponse> __Method_CurrencyBy = new grpc::Method<global::Tinkoff.InvestApi.V1.InstrumentRequest, global::Tinkoff.InvestApi.V1.CurrencyResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CurrencyBy",
        __Marshaller_tinkoff_public_invest_api_contract_v1_InstrumentRequest,
        __Marshaller_tinkoff_public_invest_api_contract_v1_CurrencyResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Tinkoff.InvestApi.V1.InstrumentsRequest, global::Tinkoff.InvestApi.V1.CurrenciesResponse> __Method_Currencies = new grpc::Method<global::Tinkoff.InvestApi.V1.InstrumentsRequest, global::Tinkoff.InvestApi.V1.CurrenciesResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Currencies",
        __Marshaller_tinkoff_public_invest_api_contract_v1_InstrumentsRequest,
        __Marshaller_tinkoff_public_invest_api_contract_v1_CurrenciesResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Tinkoff.InvestApi.V1.InstrumentRequest, global::Tinkoff.InvestApi.V1.EtfResponse> __Method_EtfBy = new grpc::Method<global::Tinkoff.InvestApi.V1.InstrumentRequest, global::Tinkoff.InvestApi.V1.EtfResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "EtfBy",
        __Marshaller_tinkoff_public_invest_api_contract_v1_InstrumentRequest,
        __Marshaller_tinkoff_public_invest_api_contract_v1_EtfResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Tinkoff.InvestApi.V1.InstrumentsRequest, global::Tinkoff.InvestApi.V1.EtfsResponse> __Method_Etfs = new grpc::Method<global::Tinkoff.InvestApi.V1.InstrumentsRequest, global::Tinkoff.InvestApi.V1.EtfsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Etfs",
        __Marshaller_tinkoff_public_invest_api_contract_v1_InstrumentsRequest,
        __Marshaller_tinkoff_public_invest_api_contract_v1_EtfsResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Tinkoff.InvestApi.V1.InstrumentRequest, global::Tinkoff.InvestApi.V1.FutureResponse> __Method_FutureBy = new grpc::Method<global::Tinkoff.InvestApi.V1.InstrumentRequest, global::Tinkoff.InvestApi.V1.FutureResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "FutureBy",
        __Marshaller_tinkoff_public_invest_api_contract_v1_InstrumentRequest,
        __Marshaller_tinkoff_public_invest_api_contract_v1_FutureResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Tinkoff.InvestApi.V1.InstrumentsRequest, global::Tinkoff.InvestApi.V1.FuturesResponse> __Method_Futures = new grpc::Method<global::Tinkoff.InvestApi.V1.InstrumentsRequest, global::Tinkoff.InvestApi.V1.FuturesResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Futures",
        __Marshaller_tinkoff_public_invest_api_contract_v1_InstrumentsRequest,
        __Marshaller_tinkoff_public_invest_api_contract_v1_FuturesResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Tinkoff.InvestApi.V1.InstrumentRequest, global::Tinkoff.InvestApi.V1.ShareResponse> __Method_ShareBy = new grpc::Method<global::Tinkoff.InvestApi.V1.InstrumentRequest, global::Tinkoff.InvestApi.V1.ShareResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ShareBy",
        __Marshaller_tinkoff_public_invest_api_contract_v1_InstrumentRequest,
        __Marshaller_tinkoff_public_invest_api_contract_v1_ShareResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Tinkoff.InvestApi.V1.InstrumentsRequest, global::Tinkoff.InvestApi.V1.SharesResponse> __Method_Shares = new grpc::Method<global::Tinkoff.InvestApi.V1.InstrumentsRequest, global::Tinkoff.InvestApi.V1.SharesResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Shares",
        __Marshaller_tinkoff_public_invest_api_contract_v1_InstrumentsRequest,
        __Marshaller_tinkoff_public_invest_api_contract_v1_SharesResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Tinkoff.InvestApi.V1.GetAccruedInterestsRequest, global::Tinkoff.InvestApi.V1.GetAccruedInterestsResponse> __Method_GetAccruedInterests = new grpc::Method<global::Tinkoff.InvestApi.V1.GetAccruedInterestsRequest, global::Tinkoff.InvestApi.V1.GetAccruedInterestsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetAccruedInterests",
        __Marshaller_tinkoff_public_invest_api_contract_v1_GetAccruedInterestsRequest,
        __Marshaller_tinkoff_public_invest_api_contract_v1_GetAccruedInterestsResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Tinkoff.InvestApi.V1.GetFuturesMarginRequest, global::Tinkoff.InvestApi.V1.GetFuturesMarginResponse> __Method_GetFuturesMargin = new grpc::Method<global::Tinkoff.InvestApi.V1.GetFuturesMarginRequest, global::Tinkoff.InvestApi.V1.GetFuturesMarginResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetFuturesMargin",
        __Marshaller_tinkoff_public_invest_api_contract_v1_GetFuturesMarginRequest,
        __Marshaller_tinkoff_public_invest_api_contract_v1_GetFuturesMarginResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Tinkoff.InvestApi.V1.InstrumentRequest, global::Tinkoff.InvestApi.V1.InstrumentResponse> __Method_GetInstrumentBy = new grpc::Method<global::Tinkoff.InvestApi.V1.InstrumentRequest, global::Tinkoff.InvestApi.V1.InstrumentResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetInstrumentBy",
        __Marshaller_tinkoff_public_invest_api_contract_v1_InstrumentRequest,
        __Marshaller_tinkoff_public_invest_api_contract_v1_InstrumentResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Tinkoff.InvestApi.V1.GetDividendsRequest, global::Tinkoff.InvestApi.V1.GetDividendsResponse> __Method_GetDividends = new grpc::Method<global::Tinkoff.InvestApi.V1.GetDividendsRequest, global::Tinkoff.InvestApi.V1.GetDividendsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetDividends",
        __Marshaller_tinkoff_public_invest_api_contract_v1_GetDividendsRequest,
        __Marshaller_tinkoff_public_invest_api_contract_v1_GetDividendsResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Tinkoff.InvestApi.V1.InstrumentsReflection.Descriptor.Services[0]; }
    }

    /// <summary>Client for InstrumentsService</summary>
    public partial class InstrumentsServiceClient : grpc::ClientBase<InstrumentsServiceClient>
    {
      /// <summary>Creates a new client for InstrumentsService</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public InstrumentsServiceClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for InstrumentsService that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public InstrumentsServiceClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected InstrumentsServiceClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected InstrumentsServiceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      ///Метод получения расписания торгов торговых площадок.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Tinkoff.InvestApi.V1.TradingSchedulesResponse TradingSchedules(global::Tinkoff.InvestApi.V1.TradingSchedulesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return TradingSchedules(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///Метод получения расписания торгов торговых площадок.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Tinkoff.InvestApi.V1.TradingSchedulesResponse TradingSchedules(global::Tinkoff.InvestApi.V1.TradingSchedulesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_TradingSchedules, null, options, request);
      }
      /// <summary>
      ///Метод получения расписания торгов торговых площадок.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Tinkoff.InvestApi.V1.TradingSchedulesResponse> TradingSchedulesAsync(global::Tinkoff.InvestApi.V1.TradingSchedulesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return TradingSchedulesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///Метод получения расписания торгов торговых площадок.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Tinkoff.InvestApi.V1.TradingSchedulesResponse> TradingSchedulesAsync(global::Tinkoff.InvestApi.V1.TradingSchedulesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_TradingSchedules, null, options, request);
      }
      /// <summary>
      ///Метод получения облигации по её идентификатору.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Tinkoff.InvestApi.V1.BondResponse BondBy(global::Tinkoff.InvestApi.V1.InstrumentRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return BondBy(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///Метод получения облигации по её идентификатору.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Tinkoff.InvestApi.V1.BondResponse BondBy(global::Tinkoff.InvestApi.V1.InstrumentRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_BondBy, null, options, request);
      }
      /// <summary>
      ///Метод получения облигации по её идентификатору.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Tinkoff.InvestApi.V1.BondResponse> BondByAsync(global::Tinkoff.InvestApi.V1.InstrumentRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return BondByAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///Метод получения облигации по её идентификатору.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Tinkoff.InvestApi.V1.BondResponse> BondByAsync(global::Tinkoff.InvestApi.V1.InstrumentRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_BondBy, null, options, request);
      }
      /// <summary>
      ///Метод получения списка облигаций.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Tinkoff.InvestApi.V1.BondsResponse Bonds(global::Tinkoff.InvestApi.V1.InstrumentsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Bonds(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///Метод получения списка облигаций.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Tinkoff.InvestApi.V1.BondsResponse Bonds(global::Tinkoff.InvestApi.V1.InstrumentsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Bonds, null, options, request);
      }
      /// <summary>
      ///Метод получения списка облигаций.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Tinkoff.InvestApi.V1.BondsResponse> BondsAsync(global::Tinkoff.InvestApi.V1.InstrumentsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return BondsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///Метод получения списка облигаций.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Tinkoff.InvestApi.V1.BondsResponse> BondsAsync(global::Tinkoff.InvestApi.V1.InstrumentsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Bonds, null, options, request);
      }
      /// <summary>
      ///Метод получения валюты по её идентификатору.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Tinkoff.InvestApi.V1.CurrencyResponse CurrencyBy(global::Tinkoff.InvestApi.V1.InstrumentRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CurrencyBy(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///Метод получения валюты по её идентификатору.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Tinkoff.InvestApi.V1.CurrencyResponse CurrencyBy(global::Tinkoff.InvestApi.V1.InstrumentRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CurrencyBy, null, options, request);
      }
      /// <summary>
      ///Метод получения валюты по её идентификатору.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Tinkoff.InvestApi.V1.CurrencyResponse> CurrencyByAsync(global::Tinkoff.InvestApi.V1.InstrumentRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CurrencyByAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///Метод получения валюты по её идентификатору.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Tinkoff.InvestApi.V1.CurrencyResponse> CurrencyByAsync(global::Tinkoff.InvestApi.V1.InstrumentRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CurrencyBy, null, options, request);
      }
      /// <summary>
      ///Метод получения списка валют.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Tinkoff.InvestApi.V1.CurrenciesResponse Currencies(global::Tinkoff.InvestApi.V1.InstrumentsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Currencies(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///Метод получения списка валют.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Tinkoff.InvestApi.V1.CurrenciesResponse Currencies(global::Tinkoff.InvestApi.V1.InstrumentsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Currencies, null, options, request);
      }
      /// <summary>
      ///Метод получения списка валют.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Tinkoff.InvestApi.V1.CurrenciesResponse> CurrenciesAsync(global::Tinkoff.InvestApi.V1.InstrumentsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CurrenciesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///Метод получения списка валют.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Tinkoff.InvestApi.V1.CurrenciesResponse> CurrenciesAsync(global::Tinkoff.InvestApi.V1.InstrumentsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Currencies, null, options, request);
      }
      /// <summary>
      ///Метод получения инвестиционного фонда по его идентификатору.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Tinkoff.InvestApi.V1.EtfResponse EtfBy(global::Tinkoff.InvestApi.V1.InstrumentRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return EtfBy(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///Метод получения инвестиционного фонда по его идентификатору.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Tinkoff.InvestApi.V1.EtfResponse EtfBy(global::Tinkoff.InvestApi.V1.InstrumentRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_EtfBy, null, options, request);
      }
      /// <summary>
      ///Метод получения инвестиционного фонда по его идентификатору.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Tinkoff.InvestApi.V1.EtfResponse> EtfByAsync(global::Tinkoff.InvestApi.V1.InstrumentRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return EtfByAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///Метод получения инвестиционного фонда по его идентификатору.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Tinkoff.InvestApi.V1.EtfResponse> EtfByAsync(global::Tinkoff.InvestApi.V1.InstrumentRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_EtfBy, null, options, request);
      }
      /// <summary>
      ///Метод получения списка инвестиционных фондов.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Tinkoff.InvestApi.V1.EtfsResponse Etfs(global::Tinkoff.InvestApi.V1.InstrumentsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Etfs(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///Метод получения списка инвестиционных фондов.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Tinkoff.InvestApi.V1.EtfsResponse Etfs(global::Tinkoff.InvestApi.V1.InstrumentsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Etfs, null, options, request);
      }
      /// <summary>
      ///Метод получения списка инвестиционных фондов.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Tinkoff.InvestApi.V1.EtfsResponse> EtfsAsync(global::Tinkoff.InvestApi.V1.InstrumentsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return EtfsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///Метод получения списка инвестиционных фондов.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Tinkoff.InvestApi.V1.EtfsResponse> EtfsAsync(global::Tinkoff.InvestApi.V1.InstrumentsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Etfs, null, options, request);
      }
      /// <summary>
      ///Метод получения фьючерса по его идентификатору.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Tinkoff.InvestApi.V1.FutureResponse FutureBy(global::Tinkoff.InvestApi.V1.InstrumentRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return FutureBy(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///Метод получения фьючерса по его идентификатору.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Tinkoff.InvestApi.V1.FutureResponse FutureBy(global::Tinkoff.InvestApi.V1.InstrumentRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_FutureBy, null, options, request);
      }
      /// <summary>
      ///Метод получения фьючерса по его идентификатору.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Tinkoff.InvestApi.V1.FutureResponse> FutureByAsync(global::Tinkoff.InvestApi.V1.InstrumentRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return FutureByAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///Метод получения фьючерса по его идентификатору.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Tinkoff.InvestApi.V1.FutureResponse> FutureByAsync(global::Tinkoff.InvestApi.V1.InstrumentRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_FutureBy, null, options, request);
      }
      /// <summary>
      ///Метод получения списка фьючерсов.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Tinkoff.InvestApi.V1.FuturesResponse Futures(global::Tinkoff.InvestApi.V1.InstrumentsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Futures(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///Метод получения списка фьючерсов.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Tinkoff.InvestApi.V1.FuturesResponse Futures(global::Tinkoff.InvestApi.V1.InstrumentsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Futures, null, options, request);
      }
      /// <summary>
      ///Метод получения списка фьючерсов.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Tinkoff.InvestApi.V1.FuturesResponse> FuturesAsync(global::Tinkoff.InvestApi.V1.InstrumentsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return FuturesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///Метод получения списка фьючерсов.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Tinkoff.InvestApi.V1.FuturesResponse> FuturesAsync(global::Tinkoff.InvestApi.V1.InstrumentsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Futures, null, options, request);
      }
      /// <summary>
      ///Метод получения акции по её идентификатору.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Tinkoff.InvestApi.V1.ShareResponse ShareBy(global::Tinkoff.InvestApi.V1.InstrumentRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ShareBy(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///Метод получения акции по её идентификатору.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Tinkoff.InvestApi.V1.ShareResponse ShareBy(global::Tinkoff.InvestApi.V1.InstrumentRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ShareBy, null, options, request);
      }
      /// <summary>
      ///Метод получения акции по её идентификатору.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Tinkoff.InvestApi.V1.ShareResponse> ShareByAsync(global::Tinkoff.InvestApi.V1.InstrumentRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ShareByAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///Метод получения акции по её идентификатору.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Tinkoff.InvestApi.V1.ShareResponse> ShareByAsync(global::Tinkoff.InvestApi.V1.InstrumentRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ShareBy, null, options, request);
      }
      /// <summary>
      ///Метод получения списка акций.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Tinkoff.InvestApi.V1.SharesResponse Shares(global::Tinkoff.InvestApi.V1.InstrumentsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Shares(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///Метод получения списка акций.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Tinkoff.InvestApi.V1.SharesResponse Shares(global::Tinkoff.InvestApi.V1.InstrumentsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Shares, null, options, request);
      }
      /// <summary>
      ///Метод получения списка акций.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Tinkoff.InvestApi.V1.SharesResponse> SharesAsync(global::Tinkoff.InvestApi.V1.InstrumentsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SharesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///Метод получения списка акций.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Tinkoff.InvestApi.V1.SharesResponse> SharesAsync(global::Tinkoff.InvestApi.V1.InstrumentsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Shares, null, options, request);
      }
      /// <summary>
      ///Метод получения накопленного купонного дохода по облигации.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Tinkoff.InvestApi.V1.GetAccruedInterestsResponse GetAccruedInterests(global::Tinkoff.InvestApi.V1.GetAccruedInterestsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAccruedInterests(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///Метод получения накопленного купонного дохода по облигации.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Tinkoff.InvestApi.V1.GetAccruedInterestsResponse GetAccruedInterests(global::Tinkoff.InvestApi.V1.GetAccruedInterestsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetAccruedInterests, null, options, request);
      }
      /// <summary>
      ///Метод получения накопленного купонного дохода по облигации.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Tinkoff.InvestApi.V1.GetAccruedInterestsResponse> GetAccruedInterestsAsync(global::Tinkoff.InvestApi.V1.GetAccruedInterestsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAccruedInterestsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///Метод получения накопленного купонного дохода по облигации.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Tinkoff.InvestApi.V1.GetAccruedInterestsResponse> GetAccruedInterestsAsync(global::Tinkoff.InvestApi.V1.GetAccruedInterestsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetAccruedInterests, null, options, request);
      }
      /// <summary>
      ///Метод получения размера гарантийного обеспечения по фьючерсам.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Tinkoff.InvestApi.V1.GetFuturesMarginResponse GetFuturesMargin(global::Tinkoff.InvestApi.V1.GetFuturesMarginRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetFuturesMargin(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///Метод получения размера гарантийного обеспечения по фьючерсам.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Tinkoff.InvestApi.V1.GetFuturesMarginResponse GetFuturesMargin(global::Tinkoff.InvestApi.V1.GetFuturesMarginRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetFuturesMargin, null, options, request);
      }
      /// <summary>
      ///Метод получения размера гарантийного обеспечения по фьючерсам.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Tinkoff.InvestApi.V1.GetFuturesMarginResponse> GetFuturesMarginAsync(global::Tinkoff.InvestApi.V1.GetFuturesMarginRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetFuturesMarginAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///Метод получения размера гарантийного обеспечения по фьючерсам.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Tinkoff.InvestApi.V1.GetFuturesMarginResponse> GetFuturesMarginAsync(global::Tinkoff.InvestApi.V1.GetFuturesMarginRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetFuturesMargin, null, options, request);
      }
      /// <summary>
      ///Метод получения основной информации об инструменте.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Tinkoff.InvestApi.V1.InstrumentResponse GetInstrumentBy(global::Tinkoff.InvestApi.V1.InstrumentRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetInstrumentBy(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///Метод получения основной информации об инструменте.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Tinkoff.InvestApi.V1.InstrumentResponse GetInstrumentBy(global::Tinkoff.InvestApi.V1.InstrumentRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetInstrumentBy, null, options, request);
      }
      /// <summary>
      ///Метод получения основной информации об инструменте.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Tinkoff.InvestApi.V1.InstrumentResponse> GetInstrumentByAsync(global::Tinkoff.InvestApi.V1.InstrumentRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetInstrumentByAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///Метод получения основной информации об инструменте.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Tinkoff.InvestApi.V1.InstrumentResponse> GetInstrumentByAsync(global::Tinkoff.InvestApi.V1.InstrumentRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetInstrumentBy, null, options, request);
      }
      /// <summary>
      ///Метод для получения событий выплаты дивидендов по инструменту.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Tinkoff.InvestApi.V1.GetDividendsResponse GetDividends(global::Tinkoff.InvestApi.V1.GetDividendsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetDividends(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///Метод для получения событий выплаты дивидендов по инструменту.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Tinkoff.InvestApi.V1.GetDividendsResponse GetDividends(global::Tinkoff.InvestApi.V1.GetDividendsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetDividends, null, options, request);
      }
      /// <summary>
      ///Метод для получения событий выплаты дивидендов по инструменту.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Tinkoff.InvestApi.V1.GetDividendsResponse> GetDividendsAsync(global::Tinkoff.InvestApi.V1.GetDividendsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetDividendsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///Метод для получения событий выплаты дивидендов по инструменту.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Tinkoff.InvestApi.V1.GetDividendsResponse> GetDividendsAsync(global::Tinkoff.InvestApi.V1.GetDividendsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetDividends, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected override InstrumentsServiceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new InstrumentsServiceClient(configuration);
      }
    }

  }
}
#endregion
