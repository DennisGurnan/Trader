// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: instruments.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Tinkoff.InvestApi.V1 {

  /// <summary>Holder for reflection information generated from instruments.proto</summary>
  public static partial class InstrumentsReflection {

    #region Descriptor
    /// <summary>File descriptor for instruments.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static InstrumentsReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChFpbnN0cnVtZW50cy5wcm90bxIldGlua29mZi5wdWJsaWMuaW52ZXN0LmFw",
            "aS5jb250cmFjdC52MRofZ29vZ2xlL3Byb3RvYnVmL3RpbWVzdGFtcC5wcm90",
            "bxoMY29tbW9uLnByb3RvIn0KF1RyYWRpbmdTY2hlZHVsZXNSZXF1ZXN0EhAK",
            "CGV4Y2hhbmdlGAEgASgJEigKBGZyb20YAiABKAsyGi5nb29nbGUucHJvdG9i",
            "dWYuVGltZXN0YW1wEiYKAnRvGAMgASgLMhouZ29vZ2xlLnByb3RvYnVmLlRp",
            "bWVzdGFtcCJlChhUcmFkaW5nU2NoZWR1bGVzUmVzcG9uc2USSQoJZXhjaGFu",
            "Z2VzGAEgAygLMjYudGlua29mZi5wdWJsaWMuaW52ZXN0LmFwaS5jb250cmFj",
            "dC52MS5UcmFkaW5nU2NoZWR1bGUiZAoPVHJhZGluZ1NjaGVkdWxlEhAKCGV4",
            "Y2hhbmdlGAEgASgJEj8KBGRheXMYAiADKAsyMS50aW5rb2ZmLnB1YmxpYy5p",
            "bnZlc3QuYXBpLmNvbnRyYWN0LnYxLlRyYWRpbmdEYXkipAIKClRyYWRpbmdE",
            "YXkSKAoEZGF0ZRgBIAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5UaW1lc3RhbXAS",
            "FgoOaXNfdHJhZGluZ19kYXkYAiABKAgSLgoKc3RhcnRfdGltZRgDIAEoCzIa",
            "Lmdvb2dsZS5wcm90b2J1Zi5UaW1lc3RhbXASLAoIZW5kX3RpbWUYBCABKAsy",
            "Gi5nb29nbGUucHJvdG9idWYuVGltZXN0YW1wEjsKF21hcmtldF9vcmRlcl9z",
            "dGFydF90aW1lGAUgASgLMhouZ29vZ2xlLnByb3RvYnVmLlRpbWVzdGFtcBI5",
            "ChVtYXJrZXRfb3JkZXJfZW5kX3RpbWUYBiABKAsyGi5nb29nbGUucHJvdG9i",
            "dWYuVGltZXN0YW1wIn0KEUluc3RydW1lbnRSZXF1ZXN0EkgKB2lkX3R5cGUY",
            "ASABKA4yNy50aW5rb2ZmLnB1YmxpYy5pbnZlc3QuYXBpLmNvbnRyYWN0LnYx",
            "Lkluc3RydW1lbnRJZFR5cGUSEgoKY2xhc3NfY29kZRgCIAEoCRIKCgJpZBgD",
            "IAEoCSJoChJJbnN0cnVtZW50c1JlcXVlc3QSUgoRaW5zdHJ1bWVudF9zdGF0",
            "dXMYASABKA4yNy50aW5rb2ZmLnB1YmxpYy5pbnZlc3QuYXBpLmNvbnRyYWN0",
            "LnYxLkluc3RydW1lbnRTdGF0dXMiTwoMQm9uZFJlc3BvbnNlEj8KCmluc3Ry",
            "dW1lbnQYASABKAsyKy50aW5rb2ZmLnB1YmxpYy5pbnZlc3QuYXBpLmNvbnRy",
            "YWN0LnYxLkJvbmQiUQoNQm9uZHNSZXNwb25zZRJACgtpbnN0cnVtZW50cxgB",
            "IAMoCzIrLnRpbmtvZmYucHVibGljLmludmVzdC5hcGkuY29udHJhY3QudjEu",
            "Qm9uZCJXChBDdXJyZW5jeVJlc3BvbnNlEkMKCmluc3RydW1lbnQYASABKAsy",
            "Ly50aW5rb2ZmLnB1YmxpYy5pbnZlc3QuYXBpLmNvbnRyYWN0LnYxLkN1cnJl",
            "bmN5IloKEkN1cnJlbmNpZXNSZXNwb25zZRJECgtpbnN0cnVtZW50cxgBIAMo",
            "CzIvLnRpbmtvZmYucHVibGljLmludmVzdC5hcGkuY29udHJhY3QudjEuQ3Vy",
            "cmVuY3kiTQoLRXRmUmVzcG9uc2USPgoKaW5zdHJ1bWVudBgBIAEoCzIqLnRp",
            "bmtvZmYucHVibGljLmludmVzdC5hcGkuY29udHJhY3QudjEuRXRmIk8KDEV0",
            "ZnNSZXNwb25zZRI/CgtpbnN0cnVtZW50cxgBIAMoCzIqLnRpbmtvZmYucHVi",
            "bGljLmludmVzdC5hcGkuY29udHJhY3QudjEuRXRmIlMKDkZ1dHVyZVJlc3Bv",
            "bnNlEkEKCmluc3RydW1lbnQYASABKAsyLS50aW5rb2ZmLnB1YmxpYy5pbnZl",
            "c3QuYXBpLmNvbnRyYWN0LnYxLkZ1dHVyZSJVCg9GdXR1cmVzUmVzcG9uc2US",
            "QgoLaW5zdHJ1bWVudHMYASADKAsyLS50aW5rb2ZmLnB1YmxpYy5pbnZlc3Qu",
            "YXBpLmNvbnRyYWN0LnYxLkZ1dHVyZSJRCg1TaGFyZVJlc3BvbnNlEkAKCmlu",
            "c3RydW1lbnQYASABKAsyLC50aW5rb2ZmLnB1YmxpYy5pbnZlc3QuYXBpLmNv",
            "bnRyYWN0LnYxLlNoYXJlIlMKDlNoYXJlc1Jlc3BvbnNlEkEKC2luc3RydW1l",
            "bnRzGAEgAygLMiwudGlua29mZi5wdWJsaWMuaW52ZXN0LmFwaS5jb250cmFj",
            "dC52MS5TaGFyZSKwCwoEQm9uZBIMCgRmaWdpGAEgASgJEg4KBnRpY2tlchgC",
            "IAEoCRISCgpjbGFzc19jb2RlGAMgASgJEgwKBGlzaW4YBCABKAkSCwoDbG90",
            "GAUgASgFEhAKCGN1cnJlbmN5GAYgASgJEj8KBWtsb25nGAcgASgLMjAudGlu",
            "a29mZi5wdWJsaWMuaW52ZXN0LmFwaS5jb250cmFjdC52MS5RdW90YXRpb24S",
            "QAoGa3Nob3J0GAggASgLMjAudGlua29mZi5wdWJsaWMuaW52ZXN0LmFwaS5j",
            "b250cmFjdC52MS5RdW90YXRpb24SPwoFZGxvbmcYCSABKAsyMC50aW5rb2Zm",
            "LnB1YmxpYy5pbnZlc3QuYXBpLmNvbnRyYWN0LnYxLlF1b3RhdGlvbhJACgZk",
            "c2hvcnQYCiABKAsyMC50aW5rb2ZmLnB1YmxpYy5pbnZlc3QuYXBpLmNvbnRy",
            "YWN0LnYxLlF1b3RhdGlvbhJDCglkbG9uZ19taW4YCyABKAsyMC50aW5rb2Zm",
            "LnB1YmxpYy5pbnZlc3QuYXBpLmNvbnRyYWN0LnYxLlF1b3RhdGlvbhJECgpk",
            "c2hvcnRfbWluGAwgASgLMjAudGlua29mZi5wdWJsaWMuaW52ZXN0LmFwaS5j",
            "b250cmFjdC52MS5RdW90YXRpb24SGgoSc2hvcnRfZW5hYmxlZF9mbGFnGA0g",
            "ASgIEgwKBG5hbWUYDyABKAkSEAoIZXhjaGFuZ2UYECABKAkSIAoYY291cG9u",
            "X3F1YW50aXR5X3Blcl95ZWFyGBEgASgFEjEKDW1hdHVyaXR5X2RhdGUYEiAB",
            "KAsyGi5nb29nbGUucHJvdG9idWYuVGltZXN0YW1wEkIKB25vbWluYWwYEyAB",
            "KAsyMS50aW5rb2ZmLnB1YmxpYy5pbnZlc3QuYXBpLmNvbnRyYWN0LnYxLk1v",
            "bmV5VmFsdWUSMgoOc3RhdGVfcmVnX2RhdGUYFSABKAsyGi5nb29nbGUucHJv",
            "dG9idWYuVGltZXN0YW1wEjIKDnBsYWNlbWVudF9kYXRlGBYgASgLMhouZ29v",
            "Z2xlLnByb3RvYnVmLlRpbWVzdGFtcBJKCg9wbGFjZW1lbnRfcHJpY2UYFyAB",
            "KAsyMS50aW5rb2ZmLnB1YmxpYy5pbnZlc3QuYXBpLmNvbnRyYWN0LnYxLk1v",
            "bmV5VmFsdWUSRAoJYWNpX3ZhbHVlGBggASgLMjEudGlua29mZi5wdWJsaWMu",
            "aW52ZXN0LmFwaS5jb250cmFjdC52MS5Nb25leVZhbHVlEhcKD2NvdW50cnlf",
            "b2ZfcmlzaxgZIAEoCRIcChRjb3VudHJ5X29mX3Jpc2tfbmFtZRgaIAEoCRIO",
            "CgZzZWN0b3IYGyABKAkSEgoKaXNzdWVfa2luZBgcIAEoCRISCgppc3N1ZV9z",
            "aXplGB0gASgDEhcKD2lzc3VlX3NpemVfcGxhbhgeIAEoAxJUCg50cmFkaW5n",
            "X3N0YXR1cxgfIAEoDjI8LnRpbmtvZmYucHVibGljLmludmVzdC5hcGkuY29u",
            "dHJhY3QudjEuU2VjdXJpdHlUcmFkaW5nU3RhdHVzEhAKCG90Y19mbGFnGCAg",
            "ASgIEhoKEmJ1eV9hdmFpbGFibGVfZmxhZxghIAEoCBIbChNzZWxsX2F2YWls",
            "YWJsZV9mbGFnGCIgASgIEhwKFGZsb2F0aW5nX2NvdXBvbl9mbGFnGCMgASgI",
            "EhYKDnBlcnBldHVhbF9mbGFnGCQgASgIEhkKEWFtb3J0aXphdGlvbl9mbGFn",
            "GCUgASgIEk0KE21pbl9wcmljZV9pbmNyZW1lbnQYJiABKAsyMC50aW5rb2Zm",
            "LnB1YmxpYy5pbnZlc3QuYXBpLmNvbnRyYWN0LnYxLlF1b3RhdGlvbhIgChhh",
            "cGlfdHJhZGVfYXZhaWxhYmxlX2ZsYWcYJyABKAgi3gcKCEN1cnJlbmN5EgwK",
            "BGZpZ2kYASABKAkSDgoGdGlja2VyGAIgASgJEhIKCmNsYXNzX2NvZGUYAyAB",
            "KAkSDAoEaXNpbhgEIAEoCRILCgNsb3QYBSABKAUSEAoIY3VycmVuY3kYBiAB",
            "KAkSPwoFa2xvbmcYByABKAsyMC50aW5rb2ZmLnB1YmxpYy5pbnZlc3QuYXBp",
            "LmNvbnRyYWN0LnYxLlF1b3RhdGlvbhJACgZrc2hvcnQYCCABKAsyMC50aW5r",
            "b2ZmLnB1YmxpYy5pbnZlc3QuYXBpLmNvbnRyYWN0LnYxLlF1b3RhdGlvbhI/",
            "CgVkbG9uZxgJIAEoCzIwLnRpbmtvZmYucHVibGljLmludmVzdC5hcGkuY29u",
            "dHJhY3QudjEuUXVvdGF0aW9uEkAKBmRzaG9ydBgKIAEoCzIwLnRpbmtvZmYu",
            "cHVibGljLmludmVzdC5hcGkuY29udHJhY3QudjEuUXVvdGF0aW9uEkMKCWRs",
            "b25nX21pbhgLIAEoCzIwLnRpbmtvZmYucHVibGljLmludmVzdC5hcGkuY29u",
            "dHJhY3QudjEuUXVvdGF0aW9uEkQKCmRzaG9ydF9taW4YDCABKAsyMC50aW5r",
            "b2ZmLnB1YmxpYy5pbnZlc3QuYXBpLmNvbnRyYWN0LnYxLlF1b3RhdGlvbhIa",
            "ChJzaG9ydF9lbmFibGVkX2ZsYWcYDSABKAgSDAoEbmFtZRgPIAEoCRIQCghl",
            "eGNoYW5nZRgQIAEoCRJCCgdub21pbmFsGBEgASgLMjEudGlua29mZi5wdWJs",
            "aWMuaW52ZXN0LmFwaS5jb250cmFjdC52MS5Nb25leVZhbHVlEhcKD2NvdW50",
            "cnlfb2ZfcmlzaxgSIAEoCRIcChRjb3VudHJ5X29mX3Jpc2tfbmFtZRgTIAEo",
            "CRJUCg50cmFkaW5nX3N0YXR1cxgUIAEoDjI8LnRpbmtvZmYucHVibGljLmlu",
            "dmVzdC5hcGkuY29udHJhY3QudjEuU2VjdXJpdHlUcmFkaW5nU3RhdHVzEhAK",
            "CG90Y19mbGFnGBUgASgIEhoKEmJ1eV9hdmFpbGFibGVfZmxhZxgWIAEoCBIb",
            "ChNzZWxsX2F2YWlsYWJsZV9mbGFnGBcgASgIEhkKEWlzb19jdXJyZW5jeV9u",
            "YW1lGBggASgJEk0KE21pbl9wcmljZV9pbmNyZW1lbnQYGSABKAsyMC50aW5r",
            "b2ZmLnB1YmxpYy5pbnZlc3QuYXBpLmNvbnRyYWN0LnYxLlF1b3RhdGlvbhIg",
            "ChhhcGlfdHJhZGVfYXZhaWxhYmxlX2ZsYWcYGiABKAgi/QgKA0V0ZhIMCgRm",
            "aWdpGAEgASgJEg4KBnRpY2tlchgCIAEoCRISCgpjbGFzc19jb2RlGAMgASgJ",
            "EgwKBGlzaW4YBCABKAkSCwoDbG90GAUgASgFEhAKCGN1cnJlbmN5GAYgASgJ",
            "Ej8KBWtsb25nGAcgASgLMjAudGlua29mZi5wdWJsaWMuaW52ZXN0LmFwaS5j",
            "b250cmFjdC52MS5RdW90YXRpb24SQAoGa3Nob3J0GAggASgLMjAudGlua29m",
            "Zi5wdWJsaWMuaW52ZXN0LmFwaS5jb250cmFjdC52MS5RdW90YXRpb24SPwoF",
            "ZGxvbmcYCSABKAsyMC50aW5rb2ZmLnB1YmxpYy5pbnZlc3QuYXBpLmNvbnRy",
            "YWN0LnYxLlF1b3RhdGlvbhJACgZkc2hvcnQYCiABKAsyMC50aW5rb2ZmLnB1",
            "YmxpYy5pbnZlc3QuYXBpLmNvbnRyYWN0LnYxLlF1b3RhdGlvbhJDCglkbG9u",
            "Z19taW4YCyABKAsyMC50aW5rb2ZmLnB1YmxpYy5pbnZlc3QuYXBpLmNvbnRy",
            "YWN0LnYxLlF1b3RhdGlvbhJECgpkc2hvcnRfbWluGAwgASgLMjAudGlua29m",
            "Zi5wdWJsaWMuaW52ZXN0LmFwaS5jb250cmFjdC52MS5RdW90YXRpb24SGgoS",
            "c2hvcnRfZW5hYmxlZF9mbGFnGA0gASgIEgwKBG5hbWUYDyABKAkSEAoIZXhj",
            "aGFuZ2UYECABKAkSSgoQZml4ZWRfY29tbWlzc2lvbhgRIAEoCzIwLnRpbmtv",
            "ZmYucHVibGljLmludmVzdC5hcGkuY29udHJhY3QudjEuUXVvdGF0aW9uEhIK",
            "CmZvY3VzX3R5cGUYEiABKAkSMQoNcmVsZWFzZWRfZGF0ZRgTIAEoCzIaLmdv",
            "b2dsZS5wcm90b2J1Zi5UaW1lc3RhbXASRAoKbnVtX3NoYXJlcxgUIAEoCzIw",
            "LnRpbmtvZmYucHVibGljLmludmVzdC5hcGkuY29udHJhY3QudjEuUXVvdGF0",
            "aW9uEhcKD2NvdW50cnlfb2ZfcmlzaxgVIAEoCRIcChRjb3VudHJ5X29mX3Jp",
            "c2tfbmFtZRgWIAEoCRIOCgZzZWN0b3IYFyABKAkSGAoQcmViYWxhbmNpbmdf",
            "ZnJlcRgYIAEoCRJUCg50cmFkaW5nX3N0YXR1cxgZIAEoDjI8LnRpbmtvZmYu",
            "cHVibGljLmludmVzdC5hcGkuY29udHJhY3QudjEuU2VjdXJpdHlUcmFkaW5n",
            "U3RhdHVzEhAKCG90Y19mbGFnGBogASgIEhoKEmJ1eV9hdmFpbGFibGVfZmxh",
            "ZxgbIAEoCBIbChNzZWxsX2F2YWlsYWJsZV9mbGFnGBwgASgIEk0KE21pbl9w",
            "cmljZV9pbmNyZW1lbnQYHSABKAsyMC50aW5rb2ZmLnB1YmxpYy5pbnZlc3Qu",
            "YXBpLmNvbnRyYWN0LnYxLlF1b3RhdGlvbhIgChhhcGlfdHJhZGVfYXZhaWxh",
            "YmxlX2ZsYWcYHiABKAgiqgkKBkZ1dHVyZRIMCgRmaWdpGAEgASgJEg4KBnRp",
            "Y2tlchgCIAEoCRISCgpjbGFzc19jb2RlGAMgASgJEgsKA2xvdBgEIAEoBRIQ",
            "CghjdXJyZW5jeRgFIAEoCRI/CgVrbG9uZxgGIAEoCzIwLnRpbmtvZmYucHVi",
            "bGljLmludmVzdC5hcGkuY29udHJhY3QudjEuUXVvdGF0aW9uEkAKBmtzaG9y",
            "dBgHIAEoCzIwLnRpbmtvZmYucHVibGljLmludmVzdC5hcGkuY29udHJhY3Qu",
            "djEuUXVvdGF0aW9uEj8KBWRsb25nGAggASgLMjAudGlua29mZi5wdWJsaWMu",
            "aW52ZXN0LmFwaS5jb250cmFjdC52MS5RdW90YXRpb24SQAoGZHNob3J0GAkg",
            "ASgLMjAudGlua29mZi5wdWJsaWMuaW52ZXN0LmFwaS5jb250cmFjdC52MS5R",
            "dW90YXRpb24SQwoJZGxvbmdfbWluGAogASgLMjAudGlua29mZi5wdWJsaWMu",
            "aW52ZXN0LmFwaS5jb250cmFjdC52MS5RdW90YXRpb24SRAoKZHNob3J0X21p",
            "bhgLIAEoCzIwLnRpbmtvZmYucHVibGljLmludmVzdC5hcGkuY29udHJhY3Qu",
            "djEuUXVvdGF0aW9uEhoKEnNob3J0X2VuYWJsZWRfZmxhZxgMIAEoCBIMCgRu",
            "YW1lGA0gASgJEhAKCGV4Y2hhbmdlGA4gASgJEjQKEGZpcnN0X3RyYWRlX2Rh",
            "dGUYDyABKAsyGi5nb29nbGUucHJvdG9idWYuVGltZXN0YW1wEjMKD2xhc3Rf",
            "dHJhZGVfZGF0ZRgQIAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5UaW1lc3RhbXAS",
            "FAoMZnV0dXJlc190eXBlGBEgASgJEhIKCmFzc2V0X3R5cGUYEiABKAkSEwoL",
            "YmFzaWNfYXNzZXQYEyABKAkSSgoQYmFzaWNfYXNzZXRfc2l6ZRgUIAEoCzIw",
            "LnRpbmtvZmYucHVibGljLmludmVzdC5hcGkuY29udHJhY3QudjEuUXVvdGF0",
            "aW9uEhcKD2NvdW50cnlfb2ZfcmlzaxgVIAEoCRIcChRjb3VudHJ5X29mX3Jp",
            "c2tfbmFtZRgWIAEoCRIOCgZzZWN0b3IYFyABKAkSMwoPZXhwaXJhdGlvbl9k",
            "YXRlGBggASgLMhouZ29vZ2xlLnByb3RvYnVmLlRpbWVzdGFtcBJUCg50cmFk",
            "aW5nX3N0YXR1cxgZIAEoDjI8LnRpbmtvZmYucHVibGljLmludmVzdC5hcGku",
            "Y29udHJhY3QudjEuU2VjdXJpdHlUcmFkaW5nU3RhdHVzEhAKCG90Y19mbGFn",
            "GBogASgIEhoKEmJ1eV9hdmFpbGFibGVfZmxhZxgbIAEoCBIbChNzZWxsX2F2",
            "YWlsYWJsZV9mbGFnGBwgASgIEk0KE21pbl9wcmljZV9pbmNyZW1lbnQYHSAB",
            "KAsyMC50aW5rb2ZmLnB1YmxpYy5pbnZlc3QuYXBpLmNvbnRyYWN0LnYxLlF1",
            "b3RhdGlvbhIgChhhcGlfdHJhZGVfYXZhaWxhYmxlX2ZsYWcYHiABKAgiiQkK",
            "BVNoYXJlEgwKBGZpZ2kYASABKAkSDgoGdGlja2VyGAIgASgJEhIKCmNsYXNz",
            "X2NvZGUYAyABKAkSDAoEaXNpbhgEIAEoCRILCgNsb3QYBSABKAUSEAoIY3Vy",
            "cmVuY3kYBiABKAkSPwoFa2xvbmcYByABKAsyMC50aW5rb2ZmLnB1YmxpYy5p",
            "bnZlc3QuYXBpLmNvbnRyYWN0LnYxLlF1b3RhdGlvbhJACgZrc2hvcnQYCCAB",
            "KAsyMC50aW5rb2ZmLnB1YmxpYy5pbnZlc3QuYXBpLmNvbnRyYWN0LnYxLlF1",
            "b3RhdGlvbhI/CgVkbG9uZxgJIAEoCzIwLnRpbmtvZmYucHVibGljLmludmVz",
            "dC5hcGkuY29udHJhY3QudjEuUXVvdGF0aW9uEkAKBmRzaG9ydBgKIAEoCzIw",
            "LnRpbmtvZmYucHVibGljLmludmVzdC5hcGkuY29udHJhY3QudjEuUXVvdGF0",
            "aW9uEkMKCWRsb25nX21pbhgLIAEoCzIwLnRpbmtvZmYucHVibGljLmludmVz",
            "dC5hcGkuY29udHJhY3QudjEuUXVvdGF0aW9uEkQKCmRzaG9ydF9taW4YDCAB",
            "KAsyMC50aW5rb2ZmLnB1YmxpYy5pbnZlc3QuYXBpLmNvbnRyYWN0LnYxLlF1",
            "b3RhdGlvbhIaChJzaG9ydF9lbmFibGVkX2ZsYWcYDSABKAgSDAoEbmFtZRgP",
            "IAEoCRIQCghleGNoYW5nZRgQIAEoCRIsCghpcG9fZGF0ZRgRIAEoCzIaLmdv",
            "b2dsZS5wcm90b2J1Zi5UaW1lc3RhbXASEgoKaXNzdWVfc2l6ZRgSIAEoAxIX",
            "Cg9jb3VudHJ5X29mX3Jpc2sYEyABKAkSHAoUY291bnRyeV9vZl9yaXNrX25h",
            "bWUYFCABKAkSDgoGc2VjdG9yGBUgASgJEhcKD2lzc3VlX3NpemVfcGxhbhgW",
            "IAEoAxJCCgdub21pbmFsGBcgASgLMjEudGlua29mZi5wdWJsaWMuaW52ZXN0",
            "LmFwaS5jb250cmFjdC52MS5Nb25leVZhbHVlElQKDnRyYWRpbmdfc3RhdHVz",
            "GBkgASgOMjwudGlua29mZi5wdWJsaWMuaW52ZXN0LmFwaS5jb250cmFjdC52",
            "MS5TZWN1cml0eVRyYWRpbmdTdGF0dXMSEAoIb3RjX2ZsYWcYGiABKAgSGgoS",
            "YnV5X2F2YWlsYWJsZV9mbGFnGBsgASgIEhsKE3NlbGxfYXZhaWxhYmxlX2Zs",
            "YWcYHCABKAgSFgoOZGl2X3lpZWxkX2ZsYWcYHSABKAgSRAoKc2hhcmVfdHlw",
            "ZRgeIAEoDjIwLnRpbmtvZmYucHVibGljLmludmVzdC5hcGkuY29udHJhY3Qu",
            "djEuU2hhcmVUeXBlEk0KE21pbl9wcmljZV9pbmNyZW1lbnQYHyABKAsyMC50",
            "aW5rb2ZmLnB1YmxpYy5pbnZlc3QuYXBpLmNvbnRyYWN0LnYxLlF1b3RhdGlv",
            "bhIgChhhcGlfdHJhZGVfYXZhaWxhYmxlX2ZsYWcYICABKAgifAoaR2V0QWNj",
            "cnVlZEludGVyZXN0c1JlcXVlc3QSDAoEZmlnaRgBIAEoCRIoCgRmcm9tGAIg",
            "ASgLMhouZ29vZ2xlLnByb3RvYnVmLlRpbWVzdGFtcBImCgJ0bxgDIAEoCzIa",
            "Lmdvb2dsZS5wcm90b2J1Zi5UaW1lc3RhbXAicAobR2V0QWNjcnVlZEludGVy",
            "ZXN0c1Jlc3BvbnNlElEKEWFjY3J1ZWRfaW50ZXJlc3RzGAEgAygLMjYudGlu",
            "a29mZi5wdWJsaWMuaW52ZXN0LmFwaS5jb250cmFjdC52MS5BY2NydWVkSW50",
            "ZXJlc3QiiAIKD0FjY3J1ZWRJbnRlcmVzdBIoCgRkYXRlGAEgASgLMhouZ29v",
            "Z2xlLnByb3RvYnVmLlRpbWVzdGFtcBI/CgV2YWx1ZRgCIAEoCzIwLnRpbmtv",
            "ZmYucHVibGljLmludmVzdC5hcGkuY29udHJhY3QudjEuUXVvdGF0aW9uEkcK",
            "DXZhbHVlX3BlcmNlbnQYAyABKAsyMC50aW5rb2ZmLnB1YmxpYy5pbnZlc3Qu",
            "YXBpLmNvbnRyYWN0LnYxLlF1b3RhdGlvbhJBCgdub21pbmFsGAQgASgLMjAu",
            "dGlua29mZi5wdWJsaWMuaW52ZXN0LmFwaS5jb250cmFjdC52MS5RdW90YXRp",
            "b24iJwoXR2V0RnV0dXJlc01hcmdpblJlcXVlc3QSDAoEZmlnaRgBIAEoCSLk",
            "AgoYR2V0RnV0dXJlc01hcmdpblJlc3BvbnNlElAKFWluaXRpYWxfbWFyZ2lu",
            "X29uX2J1eRgBIAEoCzIxLnRpbmtvZmYucHVibGljLmludmVzdC5hcGkuY29u",
            "dHJhY3QudjEuTW9uZXlWYWx1ZRJRChZpbml0aWFsX21hcmdpbl9vbl9zZWxs",
            "GAIgASgLMjEudGlua29mZi5wdWJsaWMuaW52ZXN0LmFwaS5jb250cmFjdC52",
            "MS5Nb25leVZhbHVlEk0KE21pbl9wcmljZV9pbmNyZW1lbnQYAyABKAsyMC50",
            "aW5rb2ZmLnB1YmxpYy5pbnZlc3QuYXBpLmNvbnRyYWN0LnYxLlF1b3RhdGlv",
            "bhJUChptaW5fcHJpY2VfaW5jcmVtZW50X2Ftb3VudBgEIAEoCzIwLnRpbmtv",
            "ZmYucHVibGljLmludmVzdC5hcGkuY29udHJhY3QudjEuUXVvdGF0aW9uIlsK",
            "Ekluc3RydW1lbnRSZXNwb25zZRJFCgppbnN0cnVtZW50GAEgASgLMjEudGlu",
            "a29mZi5wdWJsaWMuaW52ZXN0LmFwaS5jb250cmFjdC52MS5JbnN0cnVtZW50",
            "IpoHCgpJbnN0cnVtZW50EgwKBGZpZ2kYASABKAkSDgoGdGlja2VyGAIgASgJ",
            "EhIKCmNsYXNzX2NvZGUYAyABKAkSDAoEaXNpbhgEIAEoCRILCgNsb3QYBSAB",
            "KAUSEAoIY3VycmVuY3kYBiABKAkSPwoFa2xvbmcYByABKAsyMC50aW5rb2Zm",
            "LnB1YmxpYy5pbnZlc3QuYXBpLmNvbnRyYWN0LnYxLlF1b3RhdGlvbhJACgZr",
            "c2hvcnQYCCABKAsyMC50aW5rb2ZmLnB1YmxpYy5pbnZlc3QuYXBpLmNvbnRy",
            "YWN0LnYxLlF1b3RhdGlvbhI/CgVkbG9uZxgJIAEoCzIwLnRpbmtvZmYucHVi",
            "bGljLmludmVzdC5hcGkuY29udHJhY3QudjEuUXVvdGF0aW9uEkAKBmRzaG9y",
            "dBgKIAEoCzIwLnRpbmtvZmYucHVibGljLmludmVzdC5hcGkuY29udHJhY3Qu",
            "djEuUXVvdGF0aW9uEkMKCWRsb25nX21pbhgLIAEoCzIwLnRpbmtvZmYucHVi",
            "bGljLmludmVzdC5hcGkuY29udHJhY3QudjEuUXVvdGF0aW9uEkQKCmRzaG9y",
            "dF9taW4YDCABKAsyMC50aW5rb2ZmLnB1YmxpYy5pbnZlc3QuYXBpLmNvbnRy",
            "YWN0LnYxLlF1b3RhdGlvbhIaChJzaG9ydF9lbmFibGVkX2ZsYWcYDSABKAgS",
            "DAoEbmFtZRgOIAEoCRIQCghleGNoYW5nZRgPIAEoCRIXCg9jb3VudHJ5X29m",
            "X3Jpc2sYECABKAkSHAoUY291bnRyeV9vZl9yaXNrX25hbWUYESABKAkSFwoP",
            "aW5zdHJ1bWVudF90eXBlGBIgASgJElQKDnRyYWRpbmdfc3RhdHVzGBMgASgO",
            "MjwudGlua29mZi5wdWJsaWMuaW52ZXN0LmFwaS5jb250cmFjdC52MS5TZWN1",
            "cml0eVRyYWRpbmdTdGF0dXMSEAoIb3RjX2ZsYWcYFCABKAgSGgoSYnV5X2F2",
            "YWlsYWJsZV9mbGFnGBUgASgIEhsKE3NlbGxfYXZhaWxhYmxlX2ZsYWcYFiAB",
            "KAgSTQoTbWluX3ByaWNlX2luY3JlbWVudBgXIAEoCzIwLnRpbmtvZmYucHVi",
            "bGljLmludmVzdC5hcGkuY29udHJhY3QudjEuUXVvdGF0aW9uEiAKGGFwaV90",
            "cmFkZV9hdmFpbGFibGVfZmxhZxgYIAEoCCJ1ChNHZXREaXZpZGVuZHNSZXF1",
            "ZXN0EgwKBGZpZ2kYASABKAkSKAoEZnJvbRgCIAEoCzIaLmdvb2dsZS5wcm90",
            "b2J1Zi5UaW1lc3RhbXASJgoCdG8YAyABKAsyGi5nb29nbGUucHJvdG9idWYu",
            "VGltZXN0YW1wIloKFEdldERpdmlkZW5kc1Jlc3BvbnNlEkIKCWRpdmlkZW5k",
            "cxgBIAMoCzIvLnRpbmtvZmYucHVibGljLmludmVzdC5hcGkuY29udHJhY3Qu",
            "djEuRGl2aWRlbmQihgQKCERpdmlkZW5kEkcKDGRpdmlkZW5kX25ldBgBIAEo",
            "CzIxLnRpbmtvZmYucHVibGljLmludmVzdC5hcGkuY29udHJhY3QudjEuTW9u",
            "ZXlWYWx1ZRIwCgxwYXltZW50X2RhdGUYAiABKAsyGi5nb29nbGUucHJvdG9i",
            "dWYuVGltZXN0YW1wEjEKDWRlY2xhcmVkX2RhdGUYAyABKAsyGi5nb29nbGUu",
            "cHJvdG9idWYuVGltZXN0YW1wEjEKDWxhc3RfYnV5X2RhdGUYBCABKAsyGi5n",
            "b29nbGUucHJvdG9idWYuVGltZXN0YW1wEhUKDWRpdmlkZW5kX3R5cGUYBSAB",
            "KAkSLwoLcmVjb3JkX2RhdGUYBiABKAsyGi5nb29nbGUucHJvdG9idWYuVGlt",
            "ZXN0YW1wEhIKCnJlZ3VsYXJpdHkYByABKAkSRgoLY2xvc2VfcHJpY2UYCCAB",
            "KAsyMS50aW5rb2ZmLnB1YmxpYy5pbnZlc3QuYXBpLmNvbnRyYWN0LnYxLk1v",
            "bmV5VmFsdWUSRQoLeWllbGRfdmFsdWUYCSABKAsyMC50aW5rb2ZmLnB1Ymxp",
            "Yy5pbnZlc3QuYXBpLmNvbnRyYWN0LnYxLlF1b3RhdGlvbhIuCgpjcmVhdGVk",
            "X2F0GAogASgLMhouZ29vZ2xlLnByb3RvYnVmLlRpbWVzdGFtcCptChBJbnN0",
            "cnVtZW50SWRUeXBlEh0KGUlOU1RSVU1FTlRfSURfVU5TUEVDSUZJRUQQABIb",
            "ChdJTlNUUlVNRU5UX0lEX1RZUEVfRklHSRABEh0KGUlOU1RSVU1FTlRfSURf",
            "VFlQRV9USUNLRVIQAipsChBJbnN0cnVtZW50U3RhdHVzEiEKHUlOU1RSVU1F",
            "TlRfU1RBVFVTX1VOU1BFQ0lGSUVEEAASGgoWSU5TVFJVTUVOVF9TVEFUVVNf",
            "QkFTRRABEhkKFUlOU1RSVU1FTlRfU1RBVFVTX0FMTBACKuUBCglTaGFyZVR5",
            "cGUSGgoWU0hBUkVfVFlQRV9VTlNQRUNJRklFRBAAEhUKEVNIQVJFX1RZUEVf",
            "Q09NTU9OEAESGAoUU0hBUkVfVFlQRV9QUkVGRVJSRUQQAhISCg5TSEFSRV9U",
            "WVBFX0FEUhADEhIKDlNIQVJFX1RZUEVfR0RSEAQSEgoOU0hBUkVfVFlQRV9N",
            "TFAQBRIaChZTSEFSRV9UWVBFX05ZX1JFR19TSFJTEAYSHgoaU0hBUkVfVFlQ",
            "RV9DTE9TRURfRU5EX0ZVTkQQBxITCg9TSEFSRV9UWVBFX1JFSVQQCDLMDwoS",
            "SW5zdHJ1bWVudHNTZXJ2aWNlEpMBChBUcmFkaW5nU2NoZWR1bGVzEj4udGlu",
            "a29mZi5wdWJsaWMuaW52ZXN0LmFwaS5jb250cmFjdC52MS5UcmFkaW5nU2No",
            "ZWR1bGVzUmVxdWVzdBo/LnRpbmtvZmYucHVibGljLmludmVzdC5hcGkuY29u",
            "dHJhY3QudjEuVHJhZGluZ1NjaGVkdWxlc1Jlc3BvbnNlEncKBkJvbmRCeRI4",
            "LnRpbmtvZmYucHVibGljLmludmVzdC5hcGkuY29udHJhY3QudjEuSW5zdHJ1",
            "bWVudFJlcXVlc3QaMy50aW5rb2ZmLnB1YmxpYy5pbnZlc3QuYXBpLmNvbnRy",
            "YWN0LnYxLkJvbmRSZXNwb25zZRJ4CgVCb25kcxI5LnRpbmtvZmYucHVibGlj",
            "LmludmVzdC5hcGkuY29udHJhY3QudjEuSW5zdHJ1bWVudHNSZXF1ZXN0GjQu",
            "dGlua29mZi5wdWJsaWMuaW52ZXN0LmFwaS5jb250cmFjdC52MS5Cb25kc1Jl",
            "c3BvbnNlEn8KCkN1cnJlbmN5QnkSOC50aW5rb2ZmLnB1YmxpYy5pbnZlc3Qu",
            "YXBpLmNvbnRyYWN0LnYxLkluc3RydW1lbnRSZXF1ZXN0GjcudGlua29mZi5w",
            "dWJsaWMuaW52ZXN0LmFwaS5jb250cmFjdC52MS5DdXJyZW5jeVJlc3BvbnNl",
            "EoIBCgpDdXJyZW5jaWVzEjkudGlua29mZi5wdWJsaWMuaW52ZXN0LmFwaS5j",
            "b250cmFjdC52MS5JbnN0cnVtZW50c1JlcXVlc3QaOS50aW5rb2ZmLnB1Ymxp",
            "Yy5pbnZlc3QuYXBpLmNvbnRyYWN0LnYxLkN1cnJlbmNpZXNSZXNwb25zZRJ1",
            "CgVFdGZCeRI4LnRpbmtvZmYucHVibGljLmludmVzdC5hcGkuY29udHJhY3Qu",
            "djEuSW5zdHJ1bWVudFJlcXVlc3QaMi50aW5rb2ZmLnB1YmxpYy5pbnZlc3Qu",
            "YXBpLmNvbnRyYWN0LnYxLkV0ZlJlc3BvbnNlEnYKBEV0ZnMSOS50aW5rb2Zm",
            "LnB1YmxpYy5pbnZlc3QuYXBpLmNvbnRyYWN0LnYxLkluc3RydW1lbnRzUmVx",
            "dWVzdBozLnRpbmtvZmYucHVibGljLmludmVzdC5hcGkuY29udHJhY3QudjEu",
            "RXRmc1Jlc3BvbnNlEnsKCEZ1dHVyZUJ5EjgudGlua29mZi5wdWJsaWMuaW52",
            "ZXN0LmFwaS5jb250cmFjdC52MS5JbnN0cnVtZW50UmVxdWVzdBo1LnRpbmtv",
            "ZmYucHVibGljLmludmVzdC5hcGkuY29udHJhY3QudjEuRnV0dXJlUmVzcG9u",
            "c2USfAoHRnV0dXJlcxI5LnRpbmtvZmYucHVibGljLmludmVzdC5hcGkuY29u",
            "dHJhY3QudjEuSW5zdHJ1bWVudHNSZXF1ZXN0GjYudGlua29mZi5wdWJsaWMu",
            "aW52ZXN0LmFwaS5jb250cmFjdC52MS5GdXR1cmVzUmVzcG9uc2USeQoHU2hh",
            "cmVCeRI4LnRpbmtvZmYucHVibGljLmludmVzdC5hcGkuY29udHJhY3QudjEu",
            "SW5zdHJ1bWVudFJlcXVlc3QaNC50aW5rb2ZmLnB1YmxpYy5pbnZlc3QuYXBp",
            "LmNvbnRyYWN0LnYxLlNoYXJlUmVzcG9uc2USegoGU2hhcmVzEjkudGlua29m",
            "Zi5wdWJsaWMuaW52ZXN0LmFwaS5jb250cmFjdC52MS5JbnN0cnVtZW50c1Jl",
            "cXVlc3QaNS50aW5rb2ZmLnB1YmxpYy5pbnZlc3QuYXBpLmNvbnRyYWN0LnYx",
            "LlNoYXJlc1Jlc3BvbnNlEpwBChNHZXRBY2NydWVkSW50ZXJlc3RzEkEudGlu",
            "a29mZi5wdWJsaWMuaW52ZXN0LmFwaS5jb250cmFjdC52MS5HZXRBY2NydWVk",
            "SW50ZXJlc3RzUmVxdWVzdBpCLnRpbmtvZmYucHVibGljLmludmVzdC5hcGku",
            "Y29udHJhY3QudjEuR2V0QWNjcnVlZEludGVyZXN0c1Jlc3BvbnNlEpMBChBH",
            "ZXRGdXR1cmVzTWFyZ2luEj4udGlua29mZi5wdWJsaWMuaW52ZXN0LmFwaS5j",
            "b250cmFjdC52MS5HZXRGdXR1cmVzTWFyZ2luUmVxdWVzdBo/LnRpbmtvZmYu",
            "cHVibGljLmludmVzdC5hcGkuY29udHJhY3QudjEuR2V0RnV0dXJlc01hcmdp",
            "blJlc3BvbnNlEoYBCg9HZXRJbnN0cnVtZW50QnkSOC50aW5rb2ZmLnB1Ymxp",
            "Yy5pbnZlc3QuYXBpLmNvbnRyYWN0LnYxLkluc3RydW1lbnRSZXF1ZXN0Gjku",
            "dGlua29mZi5wdWJsaWMuaW52ZXN0LmFwaS5jb250cmFjdC52MS5JbnN0cnVt",
            "ZW50UmVzcG9uc2UShwEKDEdldERpdmlkZW5kcxI6LnRpbmtvZmYucHVibGlj",
            "LmludmVzdC5hcGkuY29udHJhY3QudjEuR2V0RGl2aWRlbmRzUmVxdWVzdBo7",
            "LnRpbmtvZmYucHVibGljLmludmVzdC5hcGkuY29udHJhY3QudjEuR2V0RGl2",
            "aWRlbmRzUmVzcG9uc2VCYQoccnUudGlua29mZi5waWFwaS5jb250cmFjdC52",
            "MVABWgwuLztpbnZlc3RhcGmiAgVUSUFQSaoCFFRpbmtvZmYuSW52ZXN0QXBp",
            "LlYxygIRVGlua29mZlxJbnZlc3RcVjFiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Google.Protobuf.WellKnownTypes.TimestampReflection.Descriptor, global::Tinkoff.InvestApi.V1.CommonReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::Tinkoff.InvestApi.V1.InstrumentIdType), typeof(global::Tinkoff.InvestApi.V1.InstrumentStatus), typeof(global::Tinkoff.InvestApi.V1.ShareType), }, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Tinkoff.InvestApi.V1.TradingSchedulesRequest), global::Tinkoff.InvestApi.V1.TradingSchedulesRequest.Parser, new[]{ "Exchange", "From", "To" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tinkoff.InvestApi.V1.TradingSchedulesResponse), global::Tinkoff.InvestApi.V1.TradingSchedulesResponse.Parser, new[]{ "Exchanges" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tinkoff.InvestApi.V1.TradingSchedule), global::Tinkoff.InvestApi.V1.TradingSchedule.Parser, new[]{ "Exchange", "Days" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tinkoff.InvestApi.V1.TradingDay), global::Tinkoff.InvestApi.V1.TradingDay.Parser, new[]{ "Date", "IsTradingDay", "StartTime", "EndTime", "MarketOrderStartTime", "MarketOrderEndTime" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tinkoff.InvestApi.V1.InstrumentRequest), global::Tinkoff.InvestApi.V1.InstrumentRequest.Parser, new[]{ "IdType", "ClassCode", "Id" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tinkoff.InvestApi.V1.InstrumentsRequest), global::Tinkoff.InvestApi.V1.InstrumentsRequest.Parser, new[]{ "InstrumentStatus" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tinkoff.InvestApi.V1.BondResponse), global::Tinkoff.InvestApi.V1.BondResponse.Parser, new[]{ "Instrument" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tinkoff.InvestApi.V1.BondsResponse), global::Tinkoff.InvestApi.V1.BondsResponse.Parser, new[]{ "Instruments" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tinkoff.InvestApi.V1.CurrencyResponse), global::Tinkoff.InvestApi.V1.CurrencyResponse.Parser, new[]{ "Instrument" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tinkoff.InvestApi.V1.CurrenciesResponse), global::Tinkoff.InvestApi.V1.CurrenciesResponse.Parser, new[]{ "Instruments" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tinkoff.InvestApi.V1.EtfResponse), global::Tinkoff.InvestApi.V1.EtfResponse.Parser, new[]{ "Instrument" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tinkoff.InvestApi.V1.EtfsResponse), global::Tinkoff.InvestApi.V1.EtfsResponse.Parser, new[]{ "Instruments" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tinkoff.InvestApi.V1.FutureResponse), global::Tinkoff.InvestApi.V1.FutureResponse.Parser, new[]{ "Instrument" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tinkoff.InvestApi.V1.FuturesResponse), global::Tinkoff.InvestApi.V1.FuturesResponse.Parser, new[]{ "Instruments" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tinkoff.InvestApi.V1.ShareResponse), global::Tinkoff.InvestApi.V1.ShareResponse.Parser, new[]{ "Instrument" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tinkoff.InvestApi.V1.SharesResponse), global::Tinkoff.InvestApi.V1.SharesResponse.Parser, new[]{ "Instruments" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tinkoff.InvestApi.V1.Bond), global::Tinkoff.InvestApi.V1.Bond.Parser, new[]{ "Figi", "Ticker", "ClassCode", "Isin", "Lot", "Currency", "Klong", "Kshort", "Dlong", "Dshort", "DlongMin", "DshortMin", "ShortEnabledFlag", "Name", "Exchange", "CouponQuantityPerYear", "MaturityDate", "Nominal", "StateRegDate", "PlacementDate", "PlacementPrice", "AciValue", "CountryOfRisk", "CountryOfRiskName", "Sector", "IssueKind", "IssueSize", "IssueSizePlan", "TradingStatus", "OtcFlag", "BuyAvailableFlag", "SellAvailableFlag", "FloatingCouponFlag", "PerpetualFlag", "AmortizationFlag", "MinPriceIncrement", "ApiTradeAvailableFlag" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tinkoff.InvestApi.V1.Currency), global::Tinkoff.InvestApi.V1.Currency.Parser, new[]{ "Figi", "Ticker", "ClassCode", "Isin", "Lot", "Currency_", "Klong", "Kshort", "Dlong", "Dshort", "DlongMin", "DshortMin", "ShortEnabledFlag", "Name", "Exchange", "Nominal", "CountryOfRisk", "CountryOfRiskName", "TradingStatus", "OtcFlag", "BuyAvailableFlag", "SellAvailableFlag", "IsoCurrencyName", "MinPriceIncrement", "ApiTradeAvailableFlag" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tinkoff.InvestApi.V1.Etf), global::Tinkoff.InvestApi.V1.Etf.Parser, new[]{ "Figi", "Ticker", "ClassCode", "Isin", "Lot", "Currency", "Klong", "Kshort", "Dlong", "Dshort", "DlongMin", "DshortMin", "ShortEnabledFlag", "Name", "Exchange", "FixedCommission", "FocusType", "ReleasedDate", "NumShares", "CountryOfRisk", "CountryOfRiskName", "Sector", "RebalancingFreq", "TradingStatus", "OtcFlag", "BuyAvailableFlag", "SellAvailableFlag", "MinPriceIncrement", "ApiTradeAvailableFlag" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tinkoff.InvestApi.V1.Future), global::Tinkoff.InvestApi.V1.Future.Parser, new[]{ "Figi", "Ticker", "ClassCode", "Lot", "Currency", "Klong", "Kshort", "Dlong", "Dshort", "DlongMin", "DshortMin", "ShortEnabledFlag", "Name", "Exchange", "FirstTradeDate", "LastTradeDate", "FuturesType", "AssetType", "BasicAsset", "BasicAssetSize", "CountryOfRisk", "CountryOfRiskName", "Sector", "ExpirationDate", "TradingStatus", "OtcFlag", "BuyAvailableFlag", "SellAvailableFlag", "MinPriceIncrement", "ApiTradeAvailableFlag" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tinkoff.InvestApi.V1.Share), global::Tinkoff.InvestApi.V1.Share.Parser, new[]{ "Figi", "Ticker", "ClassCode", "Isin", "Lot", "Currency", "Klong", "Kshort", "Dlong", "Dshort", "DlongMin", "DshortMin", "ShortEnabledFlag", "Name", "Exchange", "IpoDate", "IssueSize", "CountryOfRisk", "CountryOfRiskName", "Sector", "IssueSizePlan", "Nominal", "TradingStatus", "OtcFlag", "BuyAvailableFlag", "SellAvailableFlag", "DivYieldFlag", "ShareType", "MinPriceIncrement", "ApiTradeAvailableFlag" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tinkoff.InvestApi.V1.GetAccruedInterestsRequest), global::Tinkoff.InvestApi.V1.GetAccruedInterestsRequest.Parser, new[]{ "Figi", "From", "To" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tinkoff.InvestApi.V1.GetAccruedInterestsResponse), global::Tinkoff.InvestApi.V1.GetAccruedInterestsResponse.Parser, new[]{ "AccruedInterests" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tinkoff.InvestApi.V1.AccruedInterest), global::Tinkoff.InvestApi.V1.AccruedInterest.Parser, new[]{ "Date", "Value", "ValuePercent", "Nominal" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tinkoff.InvestApi.V1.GetFuturesMarginRequest), global::Tinkoff.InvestApi.V1.GetFuturesMarginRequest.Parser, new[]{ "Figi" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tinkoff.InvestApi.V1.GetFuturesMarginResponse), global::Tinkoff.InvestApi.V1.GetFuturesMarginResponse.Parser, new[]{ "InitialMarginOnBuy", "InitialMarginOnSell", "MinPriceIncrement", "MinPriceIncrementAmount" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tinkoff.InvestApi.V1.InstrumentResponse), global::Tinkoff.InvestApi.V1.InstrumentResponse.Parser, new[]{ "Instrument" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tinkoff.InvestApi.V1.Instrument), global::Tinkoff.InvestApi.V1.Instrument.Parser, new[]{ "Figi", "Ticker", "ClassCode", "Isin", "Lot", "Currency", "Klong", "Kshort", "Dlong", "Dshort", "DlongMin", "DshortMin", "ShortEnabledFlag", "Name", "Exchange", "CountryOfRisk", "CountryOfRiskName", "InstrumentType", "TradingStatus", "OtcFlag", "BuyAvailableFlag", "SellAvailableFlag", "MinPriceIncrement", "ApiTradeAvailableFlag" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tinkoff.InvestApi.V1.GetDividendsRequest), global::Tinkoff.InvestApi.V1.GetDividendsRequest.Parser, new[]{ "Figi", "From", "To" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tinkoff.InvestApi.V1.GetDividendsResponse), global::Tinkoff.InvestApi.V1.GetDividendsResponse.Parser, new[]{ "Dividends" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tinkoff.InvestApi.V1.Dividend), global::Tinkoff.InvestApi.V1.Dividend.Parser, new[]{ "DividendNet", "PaymentDate", "DeclaredDate", "LastBuyDate", "DividendType", "RecordDate", "Regularity", "ClosePrice", "YieldValue", "CreatedAt" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  /// <summary>
  ///Тип идентификатора инструмента. Подробнее об идентификации инструментов: [Идентификация инструментов](https://tinkoff.github.io/investAPI/faq_identification/)
  /// </summary>
  public enum InstrumentIdType {
    /// <summary>
    ///Значение не определено.
    /// </summary>
    [pbr::OriginalName("INSTRUMENT_ID_UNSPECIFIED")] InstrumentIdUnspecified = 0,
    /// <summary>
    ///Figi.
    /// </summary>
    [pbr::OriginalName("INSTRUMENT_ID_TYPE_FIGI")] Figi = 1,
    /// <summary>
    ///Ticker.
    /// </summary>
    [pbr::OriginalName("INSTRUMENT_ID_TYPE_TICKER")] Ticker = 2,
  }

  /// <summary>
  ///Статус запрашиваемых инструментов.
  /// </summary>
  public enum InstrumentStatus {
    /// <summary>
    ///Значение не определено.
    /// </summary>
    [pbr::OriginalName("INSTRUMENT_STATUS_UNSPECIFIED")] Unspecified = 0,
    /// <summary>
    ///Базовый список инструментов (по умолчанию). Инструменты доступные для торговли через TINKOFF INVEST API.
    /// </summary>
    [pbr::OriginalName("INSTRUMENT_STATUS_BASE")] Base = 1,
    /// <summary>
    ///Список всех инструментов.
    /// </summary>
    [pbr::OriginalName("INSTRUMENT_STATUS_ALL")] All = 2,
  }

  /// <summary>
  ///Тип акций.
  /// </summary>
  public enum ShareType {
    /// <summary>
    ///Значение не определено.
    /// </summary>
    [pbr::OriginalName("SHARE_TYPE_UNSPECIFIED")] Unspecified = 0,
    /// <summary>
    ///Обыкновенная
    /// </summary>
    [pbr::OriginalName("SHARE_TYPE_COMMON")] Common = 1,
    /// <summary>
    ///Привилегированная
    /// </summary>
    [pbr::OriginalName("SHARE_TYPE_PREFERRED")] Preferred = 2,
    /// <summary>
    ///Американские депозитарные расписки
    /// </summary>
    [pbr::OriginalName("SHARE_TYPE_ADR")] Adr = 3,
    /// <summary>
    ///Глобальные депозитарные расписки
    /// </summary>
    [pbr::OriginalName("SHARE_TYPE_GDR")] Gdr = 4,
    /// <summary>
    ///Товарищество с ограниченной ответственностью
    /// </summary>
    [pbr::OriginalName("SHARE_TYPE_MLP")] Mlp = 5,
    /// <summary>
    ///Акции из реестра Нью-Йорка
    /// </summary>
    [pbr::OriginalName("SHARE_TYPE_NY_REG_SHRS")] NyRegShrs = 6,
    /// <summary>
    ///Закрытый инвестиционный фонд
    /// </summary>
    [pbr::OriginalName("SHARE_TYPE_CLOSED_END_FUND")] ClosedEndFund = 7,
    /// <summary>
    ///Траст недвижимости
    /// </summary>
    [pbr::OriginalName("SHARE_TYPE_REIT")] Reit = 8,
  }

  #endregion

  #region Messages
  /// <summary>
  ///Запрос расписания торгов
  /// </summary>
  public sealed partial class TradingSchedulesRequest : pb::IMessage<TradingSchedulesRequest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<TradingSchedulesRequest> _parser = new pb::MessageParser<TradingSchedulesRequest>(() => new TradingSchedulesRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<TradingSchedulesRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tinkoff.InvestApi.V1.InstrumentsReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public TradingSchedulesRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public TradingSchedulesRequest(TradingSchedulesRequest other) : this() {
      exchange_ = other.exchange_;
      from_ = other.from_ != null ? other.from_.Clone() : null;
      to_ = other.to_ != null ? other.to_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public TradingSchedulesRequest Clone() {
      return new TradingSchedulesRequest(this);
    }

    /// <summary>Field number for the "exchange" field.</summary>
    public const int ExchangeFieldNumber = 1;
    private string exchange_ = "";
    /// <summary>
    ///Наименование биржи или расчетного календаря. &lt;/br>Если не передаётся, возвращается информация по всем доступным торговым площадкам.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Exchange {
      get { return exchange_; }
      set {
        exchange_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "from" field.</summary>
    public const int FromFieldNumber = 2;
    private global::Google.Protobuf.WellKnownTypes.Timestamp from_;
    /// <summary>
    ///Начало периода по часовому поясу UTC.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.WellKnownTypes.Timestamp From {
      get { return from_; }
      set {
        from_ = value;
      }
    }

    /// <summary>Field number for the "to" field.</summary>
    public const int ToFieldNumber = 3;
    private global::Google.Protobuf.WellKnownTypes.Timestamp to_;
    /// <summary>
    ///Окончание периода по часовому поясу UTC.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.WellKnownTypes.Timestamp To {
      get { return to_; }
      set {
        to_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as TradingSchedulesRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(TradingSchedulesRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Exchange != other.Exchange) return false;
      if (!object.Equals(From, other.From)) return false;
      if (!object.Equals(To, other.To)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (Exchange.Length != 0) hash ^= Exchange.GetHashCode();
      if (from_ != null) hash ^= From.GetHashCode();
      if (to_ != null) hash ^= To.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Exchange.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Exchange);
      }
      if (from_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(From);
      }
      if (to_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(To);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Exchange.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Exchange);
      }
      if (from_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(From);
      }
      if (to_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(To);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (Exchange.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Exchange);
      }
      if (from_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(From);
      }
      if (to_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(To);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(TradingSchedulesRequest other) {
      if (other == null) {
        return;
      }
      if (other.Exchange.Length != 0) {
        Exchange = other.Exchange;
      }
      if (other.from_ != null) {
        if (from_ == null) {
          From = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        From.MergeFrom(other.From);
      }
      if (other.to_ != null) {
        if (to_ == null) {
          To = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        To.MergeFrom(other.To);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Exchange = input.ReadString();
            break;
          }
          case 18: {
            if (from_ == null) {
              From = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(From);
            break;
          }
          case 26: {
            if (to_ == null) {
              To = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(To);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Exchange = input.ReadString();
            break;
          }
          case 18: {
            if (from_ == null) {
              From = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(From);
            break;
          }
          case 26: {
            if (to_ == null) {
              To = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(To);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///Список торговых площадок
  /// </summary>
  public sealed partial class TradingSchedulesResponse : pb::IMessage<TradingSchedulesResponse>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<TradingSchedulesResponse> _parser = new pb::MessageParser<TradingSchedulesResponse>(() => new TradingSchedulesResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<TradingSchedulesResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tinkoff.InvestApi.V1.InstrumentsReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public TradingSchedulesResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public TradingSchedulesResponse(TradingSchedulesResponse other) : this() {
      exchanges_ = other.exchanges_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public TradingSchedulesResponse Clone() {
      return new TradingSchedulesResponse(this);
    }

    /// <summary>Field number for the "exchanges" field.</summary>
    public const int ExchangesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Tinkoff.InvestApi.V1.TradingSchedule> _repeated_exchanges_codec
        = pb::FieldCodec.ForMessage(10, global::Tinkoff.InvestApi.V1.TradingSchedule.Parser);
    private readonly pbc::RepeatedField<global::Tinkoff.InvestApi.V1.TradingSchedule> exchanges_ = new pbc::RepeatedField<global::Tinkoff.InvestApi.V1.TradingSchedule>();
    /// <summary>
    /// Список торговых площадок и режимов торгов.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Tinkoff.InvestApi.V1.TradingSchedule> Exchanges {
      get { return exchanges_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as TradingSchedulesResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(TradingSchedulesResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!exchanges_.Equals(other.exchanges_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= exchanges_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      exchanges_.WriteTo(output, _repeated_exchanges_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      exchanges_.WriteTo(ref output, _repeated_exchanges_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      size += exchanges_.CalculateSize(_repeated_exchanges_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(TradingSchedulesResponse other) {
      if (other == null) {
        return;
      }
      exchanges_.Add(other.exchanges_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            exchanges_.AddEntriesFrom(input, _repeated_exchanges_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            exchanges_.AddEntriesFrom(ref input, _repeated_exchanges_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///Данные по торговой площадке.
  /// </summary>
  public sealed partial class TradingSchedule : pb::IMessage<TradingSchedule>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<TradingSchedule> _parser = new pb::MessageParser<TradingSchedule>(() => new TradingSchedule());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<TradingSchedule> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tinkoff.InvestApi.V1.InstrumentsReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public TradingSchedule() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public TradingSchedule(TradingSchedule other) : this() {
      exchange_ = other.exchange_;
      days_ = other.days_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public TradingSchedule Clone() {
      return new TradingSchedule(this);
    }

    /// <summary>Field number for the "exchange" field.</summary>
    public const int ExchangeFieldNumber = 1;
    private string exchange_ = "";
    /// <summary>
    /// Наименование торговой площадки.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Exchange {
      get { return exchange_; }
      set {
        exchange_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "days" field.</summary>
    public const int DaysFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Tinkoff.InvestApi.V1.TradingDay> _repeated_days_codec
        = pb::FieldCodec.ForMessage(18, global::Tinkoff.InvestApi.V1.TradingDay.Parser);
    private readonly pbc::RepeatedField<global::Tinkoff.InvestApi.V1.TradingDay> days_ = new pbc::RepeatedField<global::Tinkoff.InvestApi.V1.TradingDay>();
    /// <summary>
    /// Массив с торговыми и неторговыми днями.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Tinkoff.InvestApi.V1.TradingDay> Days {
      get { return days_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as TradingSchedule);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(TradingSchedule other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Exchange != other.Exchange) return false;
      if(!days_.Equals(other.days_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (Exchange.Length != 0) hash ^= Exchange.GetHashCode();
      hash ^= days_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Exchange.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Exchange);
      }
      days_.WriteTo(output, _repeated_days_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Exchange.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Exchange);
      }
      days_.WriteTo(ref output, _repeated_days_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (Exchange.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Exchange);
      }
      size += days_.CalculateSize(_repeated_days_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(TradingSchedule other) {
      if (other == null) {
        return;
      }
      if (other.Exchange.Length != 0) {
        Exchange = other.Exchange;
      }
      days_.Add(other.days_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Exchange = input.ReadString();
            break;
          }
          case 18: {
            days_.AddEntriesFrom(input, _repeated_days_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Exchange = input.ReadString();
            break;
          }
          case 18: {
            days_.AddEntriesFrom(ref input, _repeated_days_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///Информация о времени торгов.
  /// </summary>
  public sealed partial class TradingDay : pb::IMessage<TradingDay>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<TradingDay> _parser = new pb::MessageParser<TradingDay>(() => new TradingDay());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<TradingDay> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tinkoff.InvestApi.V1.InstrumentsReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public TradingDay() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public TradingDay(TradingDay other) : this() {
      date_ = other.date_ != null ? other.date_.Clone() : null;
      isTradingDay_ = other.isTradingDay_;
      startTime_ = other.startTime_ != null ? other.startTime_.Clone() : null;
      endTime_ = other.endTime_ != null ? other.endTime_.Clone() : null;
      marketOrderStartTime_ = other.marketOrderStartTime_ != null ? other.marketOrderStartTime_.Clone() : null;
      marketOrderEndTime_ = other.marketOrderEndTime_ != null ? other.marketOrderEndTime_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public TradingDay Clone() {
      return new TradingDay(this);
    }

    /// <summary>Field number for the "date" field.</summary>
    public const int DateFieldNumber = 1;
    private global::Google.Protobuf.WellKnownTypes.Timestamp date_;
    /// <summary>
    /// Дата.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.WellKnownTypes.Timestamp Date {
      get { return date_; }
      set {
        date_ = value;
      }
    }

    /// <summary>Field number for the "is_trading_day" field.</summary>
    public const int IsTradingDayFieldNumber = 2;
    private bool isTradingDay_;
    /// <summary>
    /// Признак торгового дня на бирже.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool IsTradingDay {
      get { return isTradingDay_; }
      set {
        isTradingDay_ = value;
      }
    }

    /// <summary>Field number for the "start_time" field.</summary>
    public const int StartTimeFieldNumber = 3;
    private global::Google.Protobuf.WellKnownTypes.Timestamp startTime_;
    /// <summary>
    /// Время начала торгов по часовому поясу UTC.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.WellKnownTypes.Timestamp StartTime {
      get { return startTime_; }
      set {
        startTime_ = value;
      }
    }

    /// <summary>Field number for the "end_time" field.</summary>
    public const int EndTimeFieldNumber = 4;
    private global::Google.Protobuf.WellKnownTypes.Timestamp endTime_;
    /// <summary>
    /// Время окончания торгов по часовому поясу UTC.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.WellKnownTypes.Timestamp EndTime {
      get { return endTime_; }
      set {
        endTime_ = value;
      }
    }

    /// <summary>Field number for the "market_order_start_time" field.</summary>
    public const int MarketOrderStartTimeFieldNumber = 5;
    private global::Google.Protobuf.WellKnownTypes.Timestamp marketOrderStartTime_;
    /// <summary>
    /// Время начала подачи заявки по часовому поясу UTC.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.WellKnownTypes.Timestamp MarketOrderStartTime {
      get { return marketOrderStartTime_; }
      set {
        marketOrderStartTime_ = value;
      }
    }

    /// <summary>Field number for the "market_order_end_time" field.</summary>
    public const int MarketOrderEndTimeFieldNumber = 6;
    private global::Google.Protobuf.WellKnownTypes.Timestamp marketOrderEndTime_;
    /// <summary>
    /// Время окончания подачи заявки по часовому поясу UTC.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.WellKnownTypes.Timestamp MarketOrderEndTime {
      get { return marketOrderEndTime_; }
      set {
        marketOrderEndTime_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as TradingDay);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(TradingDay other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Date, other.Date)) return false;
      if (IsTradingDay != other.IsTradingDay) return false;
      if (!object.Equals(StartTime, other.StartTime)) return false;
      if (!object.Equals(EndTime, other.EndTime)) return false;
      if (!object.Equals(MarketOrderStartTime, other.MarketOrderStartTime)) return false;
      if (!object.Equals(MarketOrderEndTime, other.MarketOrderEndTime)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (date_ != null) hash ^= Date.GetHashCode();
      if (IsTradingDay != false) hash ^= IsTradingDay.GetHashCode();
      if (startTime_ != null) hash ^= StartTime.GetHashCode();
      if (endTime_ != null) hash ^= EndTime.GetHashCode();
      if (marketOrderStartTime_ != null) hash ^= MarketOrderStartTime.GetHashCode();
      if (marketOrderEndTime_ != null) hash ^= MarketOrderEndTime.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (date_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Date);
      }
      if (IsTradingDay != false) {
        output.WriteRawTag(16);
        output.WriteBool(IsTradingDay);
      }
      if (startTime_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(StartTime);
      }
      if (endTime_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(EndTime);
      }
      if (marketOrderStartTime_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(MarketOrderStartTime);
      }
      if (marketOrderEndTime_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(MarketOrderEndTime);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (date_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Date);
      }
      if (IsTradingDay != false) {
        output.WriteRawTag(16);
        output.WriteBool(IsTradingDay);
      }
      if (startTime_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(StartTime);
      }
      if (endTime_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(EndTime);
      }
      if (marketOrderStartTime_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(MarketOrderStartTime);
      }
      if (marketOrderEndTime_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(MarketOrderEndTime);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (date_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Date);
      }
      if (IsTradingDay != false) {
        size += 1 + 1;
      }
      if (startTime_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(StartTime);
      }
      if (endTime_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(EndTime);
      }
      if (marketOrderStartTime_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(MarketOrderStartTime);
      }
      if (marketOrderEndTime_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(MarketOrderEndTime);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(TradingDay other) {
      if (other == null) {
        return;
      }
      if (other.date_ != null) {
        if (date_ == null) {
          Date = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        Date.MergeFrom(other.Date);
      }
      if (other.IsTradingDay != false) {
        IsTradingDay = other.IsTradingDay;
      }
      if (other.startTime_ != null) {
        if (startTime_ == null) {
          StartTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        StartTime.MergeFrom(other.StartTime);
      }
      if (other.endTime_ != null) {
        if (endTime_ == null) {
          EndTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        EndTime.MergeFrom(other.EndTime);
      }
      if (other.marketOrderStartTime_ != null) {
        if (marketOrderStartTime_ == null) {
          MarketOrderStartTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        MarketOrderStartTime.MergeFrom(other.MarketOrderStartTime);
      }
      if (other.marketOrderEndTime_ != null) {
        if (marketOrderEndTime_ == null) {
          MarketOrderEndTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        MarketOrderEndTime.MergeFrom(other.MarketOrderEndTime);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (date_ == null) {
              Date = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(Date);
            break;
          }
          case 16: {
            IsTradingDay = input.ReadBool();
            break;
          }
          case 26: {
            if (startTime_ == null) {
              StartTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(StartTime);
            break;
          }
          case 34: {
            if (endTime_ == null) {
              EndTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(EndTime);
            break;
          }
          case 42: {
            if (marketOrderStartTime_ == null) {
              MarketOrderStartTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(MarketOrderStartTime);
            break;
          }
          case 50: {
            if (marketOrderEndTime_ == null) {
              MarketOrderEndTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(MarketOrderEndTime);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (date_ == null) {
              Date = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(Date);
            break;
          }
          case 16: {
            IsTradingDay = input.ReadBool();
            break;
          }
          case 26: {
            if (startTime_ == null) {
              StartTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(StartTime);
            break;
          }
          case 34: {
            if (endTime_ == null) {
              EndTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(EndTime);
            break;
          }
          case 42: {
            if (marketOrderStartTime_ == null) {
              MarketOrderStartTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(MarketOrderStartTime);
            break;
          }
          case 50: {
            if (marketOrderEndTime_ == null) {
              MarketOrderEndTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(MarketOrderEndTime);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///Запрос получения инструмента по идентификатору.
  /// </summary>
  public sealed partial class InstrumentRequest : pb::IMessage<InstrumentRequest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<InstrumentRequest> _parser = new pb::MessageParser<InstrumentRequest>(() => new InstrumentRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<InstrumentRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tinkoff.InvestApi.V1.InstrumentsReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public InstrumentRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public InstrumentRequest(InstrumentRequest other) : this() {
      idType_ = other.idType_;
      classCode_ = other.classCode_;
      id_ = other.id_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public InstrumentRequest Clone() {
      return new InstrumentRequest(this);
    }

    /// <summary>Field number for the "id_type" field.</summary>
    public const int IdTypeFieldNumber = 1;
    private global::Tinkoff.InvestApi.V1.InstrumentIdType idType_ = global::Tinkoff.InvestApi.V1.InstrumentIdType.InstrumentIdUnspecified;
    /// <summary>
    /// Тип идентификатора инструмента. Возможные значения: figi, ticker, isin. Подробнее об идентификации инструментов: [Идентификация инструментов](https://tinkoff.github.io/investAPI/faq_identification/)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Tinkoff.InvestApi.V1.InstrumentIdType IdType {
      get { return idType_; }
      set {
        idType_ = value;
      }
    }

    /// <summary>Field number for the "class_code" field.</summary>
    public const int ClassCodeFieldNumber = 2;
    private string classCode_ = "";
    /// <summary>
    /// Идентификатор class_code. Обязателен при id_type = ticker.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string ClassCode {
      get { return classCode_; }
      set {
        classCode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 3;
    private string id_ = "";
    /// <summary>
    /// Идентификатор запрашиваемого инструмента.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as InstrumentRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(InstrumentRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (IdType != other.IdType) return false;
      if (ClassCode != other.ClassCode) return false;
      if (Id != other.Id) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (IdType != global::Tinkoff.InvestApi.V1.InstrumentIdType.InstrumentIdUnspecified) hash ^= IdType.GetHashCode();
      if (ClassCode.Length != 0) hash ^= ClassCode.GetHashCode();
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (IdType != global::Tinkoff.InvestApi.V1.InstrumentIdType.InstrumentIdUnspecified) {
        output.WriteRawTag(8);
        output.WriteEnum((int) IdType);
      }
      if (ClassCode.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(ClassCode);
      }
      if (Id.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Id);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (IdType != global::Tinkoff.InvestApi.V1.InstrumentIdType.InstrumentIdUnspecified) {
        output.WriteRawTag(8);
        output.WriteEnum((int) IdType);
      }
      if (ClassCode.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(ClassCode);
      }
      if (Id.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Id);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (IdType != global::Tinkoff.InvestApi.V1.InstrumentIdType.InstrumentIdUnspecified) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) IdType);
      }
      if (ClassCode.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ClassCode);
      }
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(InstrumentRequest other) {
      if (other == null) {
        return;
      }
      if (other.IdType != global::Tinkoff.InvestApi.V1.InstrumentIdType.InstrumentIdUnspecified) {
        IdType = other.IdType;
      }
      if (other.ClassCode.Length != 0) {
        ClassCode = other.ClassCode;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            IdType = (global::Tinkoff.InvestApi.V1.InstrumentIdType) input.ReadEnum();
            break;
          }
          case 18: {
            ClassCode = input.ReadString();
            break;
          }
          case 26: {
            Id = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            IdType = (global::Tinkoff.InvestApi.V1.InstrumentIdType) input.ReadEnum();
            break;
          }
          case 18: {
            ClassCode = input.ReadString();
            break;
          }
          case 26: {
            Id = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///Запрос получения инструментов.
  /// </summary>
  public sealed partial class InstrumentsRequest : pb::IMessage<InstrumentsRequest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<InstrumentsRequest> _parser = new pb::MessageParser<InstrumentsRequest>(() => new InstrumentsRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<InstrumentsRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tinkoff.InvestApi.V1.InstrumentsReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public InstrumentsRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public InstrumentsRequest(InstrumentsRequest other) : this() {
      instrumentStatus_ = other.instrumentStatus_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public InstrumentsRequest Clone() {
      return new InstrumentsRequest(this);
    }

    /// <summary>Field number for the "instrument_status" field.</summary>
    public const int InstrumentStatusFieldNumber = 1;
    private global::Tinkoff.InvestApi.V1.InstrumentStatus instrumentStatus_ = global::Tinkoff.InvestApi.V1.InstrumentStatus.Unspecified;
    /// <summary>
    ///Статус запрашиваемых инструментов. Возможные значения: [InstrumentStatus](#instrumentstatus)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Tinkoff.InvestApi.V1.InstrumentStatus InstrumentStatus {
      get { return instrumentStatus_; }
      set {
        instrumentStatus_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as InstrumentsRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(InstrumentsRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (InstrumentStatus != other.InstrumentStatus) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (InstrumentStatus != global::Tinkoff.InvestApi.V1.InstrumentStatus.Unspecified) hash ^= InstrumentStatus.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (InstrumentStatus != global::Tinkoff.InvestApi.V1.InstrumentStatus.Unspecified) {
        output.WriteRawTag(8);
        output.WriteEnum((int) InstrumentStatus);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (InstrumentStatus != global::Tinkoff.InvestApi.V1.InstrumentStatus.Unspecified) {
        output.WriteRawTag(8);
        output.WriteEnum((int) InstrumentStatus);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (InstrumentStatus != global::Tinkoff.InvestApi.V1.InstrumentStatus.Unspecified) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) InstrumentStatus);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(InstrumentsRequest other) {
      if (other == null) {
        return;
      }
      if (other.InstrumentStatus != global::Tinkoff.InvestApi.V1.InstrumentStatus.Unspecified) {
        InstrumentStatus = other.InstrumentStatus;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            InstrumentStatus = (global::Tinkoff.InvestApi.V1.InstrumentStatus) input.ReadEnum();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            InstrumentStatus = (global::Tinkoff.InvestApi.V1.InstrumentStatus) input.ReadEnum();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///Информация об облигации.
  /// </summary>
  public sealed partial class BondResponse : pb::IMessage<BondResponse>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<BondResponse> _parser = new pb::MessageParser<BondResponse>(() => new BondResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<BondResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tinkoff.InvestApi.V1.InstrumentsReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public BondResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public BondResponse(BondResponse other) : this() {
      instrument_ = other.instrument_ != null ? other.instrument_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public BondResponse Clone() {
      return new BondResponse(this);
    }

    /// <summary>Field number for the "instrument" field.</summary>
    public const int InstrumentFieldNumber = 1;
    private global::Tinkoff.InvestApi.V1.Bond instrument_;
    /// <summary>
    /// Информация об облигации.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Tinkoff.InvestApi.V1.Bond Instrument {
      get { return instrument_; }
      set {
        instrument_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as BondResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(BondResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Instrument, other.Instrument)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (instrument_ != null) hash ^= Instrument.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (instrument_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Instrument);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (instrument_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Instrument);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (instrument_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Instrument);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(BondResponse other) {
      if (other == null) {
        return;
      }
      if (other.instrument_ != null) {
        if (instrument_ == null) {
          Instrument = new global::Tinkoff.InvestApi.V1.Bond();
        }
        Instrument.MergeFrom(other.Instrument);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (instrument_ == null) {
              Instrument = new global::Tinkoff.InvestApi.V1.Bond();
            }
            input.ReadMessage(Instrument);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (instrument_ == null) {
              Instrument = new global::Tinkoff.InvestApi.V1.Bond();
            }
            input.ReadMessage(Instrument);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///Список облигаций.
  /// </summary>
  public sealed partial class BondsResponse : pb::IMessage<BondsResponse>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<BondsResponse> _parser = new pb::MessageParser<BondsResponse>(() => new BondsResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<BondsResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tinkoff.InvestApi.V1.InstrumentsReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public BondsResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public BondsResponse(BondsResponse other) : this() {
      instruments_ = other.instruments_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public BondsResponse Clone() {
      return new BondsResponse(this);
    }

    /// <summary>Field number for the "instruments" field.</summary>
    public const int InstrumentsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Tinkoff.InvestApi.V1.Bond> _repeated_instruments_codec
        = pb::FieldCodec.ForMessage(10, global::Tinkoff.InvestApi.V1.Bond.Parser);
    private readonly pbc::RepeatedField<global::Tinkoff.InvestApi.V1.Bond> instruments_ = new pbc::RepeatedField<global::Tinkoff.InvestApi.V1.Bond>();
    /// <summary>
    ///Массив облигаций.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Tinkoff.InvestApi.V1.Bond> Instruments {
      get { return instruments_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as BondsResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(BondsResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!instruments_.Equals(other.instruments_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= instruments_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      instruments_.WriteTo(output, _repeated_instruments_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      instruments_.WriteTo(ref output, _repeated_instruments_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      size += instruments_.CalculateSize(_repeated_instruments_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(BondsResponse other) {
      if (other == null) {
        return;
      }
      instruments_.Add(other.instruments_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            instruments_.AddEntriesFrom(input, _repeated_instruments_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            instruments_.AddEntriesFrom(ref input, _repeated_instruments_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///Данные по валюте.
  /// </summary>
  public sealed partial class CurrencyResponse : pb::IMessage<CurrencyResponse>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CurrencyResponse> _parser = new pb::MessageParser<CurrencyResponse>(() => new CurrencyResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<CurrencyResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tinkoff.InvestApi.V1.InstrumentsReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public CurrencyResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public CurrencyResponse(CurrencyResponse other) : this() {
      instrument_ = other.instrument_ != null ? other.instrument_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public CurrencyResponse Clone() {
      return new CurrencyResponse(this);
    }

    /// <summary>Field number for the "instrument" field.</summary>
    public const int InstrumentFieldNumber = 1;
    private global::Tinkoff.InvestApi.V1.Currency instrument_;
    /// <summary>
    /// Информация о валюте.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Tinkoff.InvestApi.V1.Currency Instrument {
      get { return instrument_; }
      set {
        instrument_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as CurrencyResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(CurrencyResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Instrument, other.Instrument)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (instrument_ != null) hash ^= Instrument.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (instrument_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Instrument);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (instrument_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Instrument);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (instrument_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Instrument);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(CurrencyResponse other) {
      if (other == null) {
        return;
      }
      if (other.instrument_ != null) {
        if (instrument_ == null) {
          Instrument = new global::Tinkoff.InvestApi.V1.Currency();
        }
        Instrument.MergeFrom(other.Instrument);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (instrument_ == null) {
              Instrument = new global::Tinkoff.InvestApi.V1.Currency();
            }
            input.ReadMessage(Instrument);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (instrument_ == null) {
              Instrument = new global::Tinkoff.InvestApi.V1.Currency();
            }
            input.ReadMessage(Instrument);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///Данные по валютам.
  /// </summary>
  public sealed partial class CurrenciesResponse : pb::IMessage<CurrenciesResponse>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CurrenciesResponse> _parser = new pb::MessageParser<CurrenciesResponse>(() => new CurrenciesResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<CurrenciesResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tinkoff.InvestApi.V1.InstrumentsReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public CurrenciesResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public CurrenciesResponse(CurrenciesResponse other) : this() {
      instruments_ = other.instruments_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public CurrenciesResponse Clone() {
      return new CurrenciesResponse(this);
    }

    /// <summary>Field number for the "instruments" field.</summary>
    public const int InstrumentsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Tinkoff.InvestApi.V1.Currency> _repeated_instruments_codec
        = pb::FieldCodec.ForMessage(10, global::Tinkoff.InvestApi.V1.Currency.Parser);
    private readonly pbc::RepeatedField<global::Tinkoff.InvestApi.V1.Currency> instruments_ = new pbc::RepeatedField<global::Tinkoff.InvestApi.V1.Currency>();
    /// <summary>
    ///Массив валют.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Tinkoff.InvestApi.V1.Currency> Instruments {
      get { return instruments_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as CurrenciesResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(CurrenciesResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!instruments_.Equals(other.instruments_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= instruments_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      instruments_.WriteTo(output, _repeated_instruments_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      instruments_.WriteTo(ref output, _repeated_instruments_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      size += instruments_.CalculateSize(_repeated_instruments_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(CurrenciesResponse other) {
      if (other == null) {
        return;
      }
      instruments_.Add(other.instruments_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            instruments_.AddEntriesFrom(input, _repeated_instruments_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            instruments_.AddEntriesFrom(ref input, _repeated_instruments_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///Данные по фонду.
  /// </summary>
  public sealed partial class EtfResponse : pb::IMessage<EtfResponse>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<EtfResponse> _parser = new pb::MessageParser<EtfResponse>(() => new EtfResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<EtfResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tinkoff.InvestApi.V1.InstrumentsReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public EtfResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public EtfResponse(EtfResponse other) : this() {
      instrument_ = other.instrument_ != null ? other.instrument_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public EtfResponse Clone() {
      return new EtfResponse(this);
    }

    /// <summary>Field number for the "instrument" field.</summary>
    public const int InstrumentFieldNumber = 1;
    private global::Tinkoff.InvestApi.V1.Etf instrument_;
    /// <summary>
    /// Информация о фонде.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Tinkoff.InvestApi.V1.Etf Instrument {
      get { return instrument_; }
      set {
        instrument_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as EtfResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(EtfResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Instrument, other.Instrument)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (instrument_ != null) hash ^= Instrument.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (instrument_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Instrument);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (instrument_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Instrument);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (instrument_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Instrument);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(EtfResponse other) {
      if (other == null) {
        return;
      }
      if (other.instrument_ != null) {
        if (instrument_ == null) {
          Instrument = new global::Tinkoff.InvestApi.V1.Etf();
        }
        Instrument.MergeFrom(other.Instrument);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (instrument_ == null) {
              Instrument = new global::Tinkoff.InvestApi.V1.Etf();
            }
            input.ReadMessage(Instrument);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (instrument_ == null) {
              Instrument = new global::Tinkoff.InvestApi.V1.Etf();
            }
            input.ReadMessage(Instrument);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///Данные по фондам.
  /// </summary>
  public sealed partial class EtfsResponse : pb::IMessage<EtfsResponse>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<EtfsResponse> _parser = new pb::MessageParser<EtfsResponse>(() => new EtfsResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<EtfsResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tinkoff.InvestApi.V1.InstrumentsReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public EtfsResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public EtfsResponse(EtfsResponse other) : this() {
      instruments_ = other.instruments_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public EtfsResponse Clone() {
      return new EtfsResponse(this);
    }

    /// <summary>Field number for the "instruments" field.</summary>
    public const int InstrumentsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Tinkoff.InvestApi.V1.Etf> _repeated_instruments_codec
        = pb::FieldCodec.ForMessage(10, global::Tinkoff.InvestApi.V1.Etf.Parser);
    private readonly pbc::RepeatedField<global::Tinkoff.InvestApi.V1.Etf> instruments_ = new pbc::RepeatedField<global::Tinkoff.InvestApi.V1.Etf>();
    /// <summary>
    ///Массив фондов.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Tinkoff.InvestApi.V1.Etf> Instruments {
      get { return instruments_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as EtfsResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(EtfsResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!instruments_.Equals(other.instruments_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= instruments_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      instruments_.WriteTo(output, _repeated_instruments_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      instruments_.WriteTo(ref output, _repeated_instruments_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      size += instruments_.CalculateSize(_repeated_instruments_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(EtfsResponse other) {
      if (other == null) {
        return;
      }
      instruments_.Add(other.instruments_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            instruments_.AddEntriesFrom(input, _repeated_instruments_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            instruments_.AddEntriesFrom(ref input, _repeated_instruments_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///Данные по фьючерсу.
  /// </summary>
  public sealed partial class FutureResponse : pb::IMessage<FutureResponse>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<FutureResponse> _parser = new pb::MessageParser<FutureResponse>(() => new FutureResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<FutureResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tinkoff.InvestApi.V1.InstrumentsReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public FutureResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public FutureResponse(FutureResponse other) : this() {
      instrument_ = other.instrument_ != null ? other.instrument_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public FutureResponse Clone() {
      return new FutureResponse(this);
    }

    /// <summary>Field number for the "instrument" field.</summary>
    public const int InstrumentFieldNumber = 1;
    private global::Tinkoff.InvestApi.V1.Future instrument_;
    /// <summary>
    /// Информация о фьючерсу.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Tinkoff.InvestApi.V1.Future Instrument {
      get { return instrument_; }
      set {
        instrument_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as FutureResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(FutureResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Instrument, other.Instrument)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (instrument_ != null) hash ^= Instrument.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (instrument_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Instrument);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (instrument_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Instrument);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (instrument_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Instrument);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(FutureResponse other) {
      if (other == null) {
        return;
      }
      if (other.instrument_ != null) {
        if (instrument_ == null) {
          Instrument = new global::Tinkoff.InvestApi.V1.Future();
        }
        Instrument.MergeFrom(other.Instrument);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (instrument_ == null) {
              Instrument = new global::Tinkoff.InvestApi.V1.Future();
            }
            input.ReadMessage(Instrument);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (instrument_ == null) {
              Instrument = new global::Tinkoff.InvestApi.V1.Future();
            }
            input.ReadMessage(Instrument);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///Данные по фьючерсам.
  /// </summary>
  public sealed partial class FuturesResponse : pb::IMessage<FuturesResponse>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<FuturesResponse> _parser = new pb::MessageParser<FuturesResponse>(() => new FuturesResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<FuturesResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tinkoff.InvestApi.V1.InstrumentsReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public FuturesResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public FuturesResponse(FuturesResponse other) : this() {
      instruments_ = other.instruments_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public FuturesResponse Clone() {
      return new FuturesResponse(this);
    }

    /// <summary>Field number for the "instruments" field.</summary>
    public const int InstrumentsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Tinkoff.InvestApi.V1.Future> _repeated_instruments_codec
        = pb::FieldCodec.ForMessage(10, global::Tinkoff.InvestApi.V1.Future.Parser);
    private readonly pbc::RepeatedField<global::Tinkoff.InvestApi.V1.Future> instruments_ = new pbc::RepeatedField<global::Tinkoff.InvestApi.V1.Future>();
    /// <summary>
    ///Массив фьючерсов.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Tinkoff.InvestApi.V1.Future> Instruments {
      get { return instruments_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as FuturesResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(FuturesResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!instruments_.Equals(other.instruments_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= instruments_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      instruments_.WriteTo(output, _repeated_instruments_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      instruments_.WriteTo(ref output, _repeated_instruments_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      size += instruments_.CalculateSize(_repeated_instruments_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(FuturesResponse other) {
      if (other == null) {
        return;
      }
      instruments_.Add(other.instruments_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            instruments_.AddEntriesFrom(input, _repeated_instruments_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            instruments_.AddEntriesFrom(ref input, _repeated_instruments_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///Данные по акции.
  /// </summary>
  public sealed partial class ShareResponse : pb::IMessage<ShareResponse>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ShareResponse> _parser = new pb::MessageParser<ShareResponse>(() => new ShareResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<ShareResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tinkoff.InvestApi.V1.InstrumentsReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ShareResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ShareResponse(ShareResponse other) : this() {
      instrument_ = other.instrument_ != null ? other.instrument_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ShareResponse Clone() {
      return new ShareResponse(this);
    }

    /// <summary>Field number for the "instrument" field.</summary>
    public const int InstrumentFieldNumber = 1;
    private global::Tinkoff.InvestApi.V1.Share instrument_;
    /// <summary>
    /// Информация об акции.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Tinkoff.InvestApi.V1.Share Instrument {
      get { return instrument_; }
      set {
        instrument_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as ShareResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(ShareResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Instrument, other.Instrument)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (instrument_ != null) hash ^= Instrument.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (instrument_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Instrument);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (instrument_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Instrument);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (instrument_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Instrument);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(ShareResponse other) {
      if (other == null) {
        return;
      }
      if (other.instrument_ != null) {
        if (instrument_ == null) {
          Instrument = new global::Tinkoff.InvestApi.V1.Share();
        }
        Instrument.MergeFrom(other.Instrument);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (instrument_ == null) {
              Instrument = new global::Tinkoff.InvestApi.V1.Share();
            }
            input.ReadMessage(Instrument);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (instrument_ == null) {
              Instrument = new global::Tinkoff.InvestApi.V1.Share();
            }
            input.ReadMessage(Instrument);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///Данные по акциям.
  /// </summary>
  public sealed partial class SharesResponse : pb::IMessage<SharesResponse>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SharesResponse> _parser = new pb::MessageParser<SharesResponse>(() => new SharesResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<SharesResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tinkoff.InvestApi.V1.InstrumentsReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public SharesResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public SharesResponse(SharesResponse other) : this() {
      instruments_ = other.instruments_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public SharesResponse Clone() {
      return new SharesResponse(this);
    }

    /// <summary>Field number for the "instruments" field.</summary>
    public const int InstrumentsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Tinkoff.InvestApi.V1.Share> _repeated_instruments_codec
        = pb::FieldCodec.ForMessage(10, global::Tinkoff.InvestApi.V1.Share.Parser);
    private readonly pbc::RepeatedField<global::Tinkoff.InvestApi.V1.Share> instruments_ = new pbc::RepeatedField<global::Tinkoff.InvestApi.V1.Share>();
    /// <summary>
    ///Массив акций.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Tinkoff.InvestApi.V1.Share> Instruments {
      get { return instruments_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as SharesResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(SharesResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!instruments_.Equals(other.instruments_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= instruments_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      instruments_.WriteTo(output, _repeated_instruments_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      instruments_.WriteTo(ref output, _repeated_instruments_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      size += instruments_.CalculateSize(_repeated_instruments_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(SharesResponse other) {
      if (other == null) {
        return;
      }
      instruments_.Add(other.instruments_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            instruments_.AddEntriesFrom(input, _repeated_instruments_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            instruments_.AddEntriesFrom(ref input, _repeated_instruments_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///Объект передачи информации об облигации.
  /// </summary>
  public sealed partial class Bond : pb::IMessage<Bond>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Bond> _parser = new pb::MessageParser<Bond>(() => new Bond());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<Bond> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tinkoff.InvestApi.V1.InstrumentsReflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Bond() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Bond(Bond other) : this() {
      figi_ = other.figi_;
      ticker_ = other.ticker_;
      classCode_ = other.classCode_;
      isin_ = other.isin_;
      lot_ = other.lot_;
      currency_ = other.currency_;
      klong_ = other.klong_ != null ? other.klong_.Clone() : null;
      kshort_ = other.kshort_ != null ? other.kshort_.Clone() : null;
      dlong_ = other.dlong_ != null ? other.dlong_.Clone() : null;
      dshort_ = other.dshort_ != null ? other.dshort_.Clone() : null;
      dlongMin_ = other.dlongMin_ != null ? other.dlongMin_.Clone() : null;
      dshortMin_ = other.dshortMin_ != null ? other.dshortMin_.Clone() : null;
      shortEnabledFlag_ = other.shortEnabledFlag_;
      name_ = other.name_;
      exchange_ = other.exchange_;
      couponQuantityPerYear_ = other.couponQuantityPerYear_;
      maturityDate_ = other.maturityDate_ != null ? other.maturityDate_.Clone() : null;
      nominal_ = other.nominal_ != null ? other.nominal_.Clone() : null;
      stateRegDate_ = other.stateRegDate_ != null ? other.stateRegDate_.Clone() : null;
      placementDate_ = other.placementDate_ != null ? other.placementDate_.Clone() : null;
      placementPrice_ = other.placementPrice_ != null ? other.placementPrice_.Clone() : null;
      aciValue_ = other.aciValue_ != null ? other.aciValue_.Clone() : null;
      countryOfRisk_ = other.countryOfRisk_;
      countryOfRiskName_ = other.countryOfRiskName_;
      sector_ = other.sector_;
      issueKind_ = other.issueKind_;
      issueSize_ = other.issueSize_;
      issueSizePlan_ = other.issueSizePlan_;
      tradingStatus_ = other.tradingStatus_;
      otcFlag_ = other.otcFlag_;
      buyAvailableFlag_ = other.buyAvailableFlag_;
      sellAvailableFlag_ = other.sellAvailableFlag_;
      floatingCouponFlag_ = other.floatingCouponFlag_;
      perpetualFlag_ = other.perpetualFlag_;
      amortizationFlag_ = other.amortizationFlag_;
      minPriceIncrement_ = other.minPriceIncrement_ != null ? other.minPriceIncrement_.Clone() : null;
      apiTradeAvailableFlag_ = other.apiTradeAvailableFlag_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Bond Clone() {
      return new Bond(this);
    }

    /// <summary>Field number for the "figi" field.</summary>
    public const int FigiFieldNumber = 1;
    private string figi_ = "";
    /// <summary>
    ///Figi-идентификатор инструмента.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Figi {
      get { return figi_; }
      set {
        figi_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ticker" field.</summary>
    public const int TickerFieldNumber = 2;
    private string ticker_ = "";
    /// <summary>
    ///Тикер инструмента.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Ticker {
      get { return ticker_; }
      set {
        ticker_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "class_code" field.</summary>
    public const int ClassCodeFieldNumber = 3;
    private string classCode_ = "";
    /// <summary>
    ///Класс-код (секция торгов).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string ClassCode {
      get { return classCode_; }
      set {
        classCode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "isin" field.</summary>
    public const int IsinFieldNumber = 4;
    private string isin_ = "";
    /// <summary>
    ///Isin-идентификатор инструмента.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Isin {
      get { return isin_; }
      set {
        isin_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "lot" field.</summary>
    public const int LotFieldNumber = 5;
    private int lot_;
    /// <summary>
    ///Лотность инструмента. Возможно совершение операций только на количества ценной бумаги, кратные параметру *lot*. Подробнее: [лот](https://tinkoff.github.io/investAPI/glossary#lot)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Lot {
      get { return lot_; }
      set {
        lot_ = value;
      }
    }

    /// <summary>Field number for the "currency" field.</summary>
    public const int CurrencyFieldNumber = 6;
    private string currency_ = "";
    /// <summary>
    ///Валюта расчётов.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Currency {
      get { return currency_; }
      set {
        currency_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "klong" field.</summary>
    public const int KlongFieldNumber = 7;
    private global::Tinkoff.InvestApi.V1.Quotation klong_;
    /// <summary>
    ///Коэффициент ставки риска длинной позиции по инструменту.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Tinkoff.InvestApi.V1.Quotation Klong {
      get { return klong_; }
      set {
        klong_ = value;
      }
    }

    /// <summary>Field number for the "kshort" field.</summary>
    public const int KshortFieldNumber = 8;
    private global::Tinkoff.InvestApi.V1.Quotation kshort_;
    /// <summary>
    ///Коэффициент ставки риска короткой позиции по инструменту.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Tinkoff.InvestApi.V1.Quotation Kshort {
      get { return kshort_; }
      set {
        kshort_ = value;
      }
    }

    /// <summary>Field number for the "dlong" field.</summary>
    public const int DlongFieldNumber = 9;
    private global::Tinkoff.InvestApi.V1.Quotation dlong_;
    /// <summary>
    ///Ставка риска минимальной маржи в лонг. Подробнее: [ставка риска в лонг](https://help.tinkoff.ru/margin-trade/long/risk-rate/)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Tinkoff.InvestApi.V1.Quotation Dlong {
      get { return dlong_; }
      set {
        dlong_ = value;
      }
    }

    /// <summary>Field number for the "dshort" field.</summary>
    public const int DshortFieldNumber = 10;
    private global::Tinkoff.InvestApi.V1.Quotation dshort_;
    /// <summary>
    ///Ставка риска минимальной маржи в шорт. Подробнее: [ставка риска в шорт](https://help.tinkoff.ru/margin-trade/short/risk-rate/)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Tinkoff.InvestApi.V1.Quotation Dshort {
      get { return dshort_; }
      set {
        dshort_ = value;
      }
    }

    /// <summary>Field number for the "dlong_min" field.</summary>
    public const int DlongMinFieldNumber = 11;
    private global::Tinkoff.InvestApi.V1.Quotation dlongMin_;
    /// <summary>
    ///Ставка риска начальной маржи в лонг. Подробнее: [ставка риска в лонг](https://help.tinkoff.ru/margin-trade/long/risk-rate/)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Tinkoff.InvestApi.V1.Quotation DlongMin {
      get { return dlongMin_; }
      set {
        dlongMin_ = value;
      }
    }

    /// <summary>Field number for the "dshort_min" field.</summary>
    public const int DshortMinFieldNumber = 12;
    private global::Tinkoff.InvestApi.V1.Quotation dshortMin_;
    /// <summary>
    ///Ставка риска начальной маржи в шорт. Подробнее: [ставка риска в шорт](https://help.tinkoff.ru/margin-trade/short/risk-rate/)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Tinkoff.InvestApi.V1.Quotation DshortMin {
      get { return dshortMin_; }
      set {
        dshortMin_ = value;
      }
    }

    /// <summary>Field number for the "short_enabled_flag" field.</summary>
    public const int ShortEnabledFlagFieldNumber = 13;
    private bool shortEnabledFlag_;
    /// <summary>
    ///Признак доступности для операций в шорт.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool ShortEnabledFlag {
      get { return shortEnabledFlag_; }
      set {
        shortEnabledFlag_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 15;
    private string name_ = "";
    /// <summary>
    ///Название инструмента.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "exchange" field.</summary>
    public const int ExchangeFieldNumber = 16;
    private string exchange_ = "";
    /// <summary>
    ///Торговая площадка.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Exchange {
      get { return exchange_; }
      set {
        exchange_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "coupon_quantity_per_year" field.</summary>
    public const int CouponQuantityPerYearFieldNumber = 17;
    private int couponQuantityPerYear_;
    /// <summary>
    ///Количество выплат по купонам в год.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CouponQuantityPerYear {
      get { return couponQuantityPerYear_; }
      set {
        couponQuantityPerYear_ = value;
      }
    }

    /// <summary>Field number for the "maturity_date" field.</summary>
    public const int MaturityDateFieldNumber = 18;
    private global::Google.Protobuf.WellKnownTypes.Timestamp maturityDate_;
    /// <summary>
    ///Дата погашения облигации в часовом поясе UTC.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.WellKnownTypes.Timestamp MaturityDate {
      get { return maturityDate_; }
      set {
        maturityDate_ = value;
      }
    }

    /// <summary>Field number for the "nominal" field.</summary>
    public const int NominalFieldNumber = 19;
    private global::Tinkoff.InvestApi.V1.MoneyValue nominal_;
    /// <summary>
    ///Номинал облигации.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Tinkoff.InvestApi.V1.MoneyValue Nominal {
      get { return nominal_; }
      set {
        nominal_ = value;
      }
    }

    /// <summary>Field number for the "state_reg_date" field.</summary>
    public const int StateRegDateFieldNumber = 21;
    private global::Google.Protobuf.WellKnownTypes.Timestamp stateRegDate_;
    /// <summary>
    ///Дата выпуска облигации в часовом поясе UTC.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.WellKnownTypes.Timestamp StateRegDate {
      get { return stateRegDate_; }
      set {
        stateRegDate_ = value;
      }
    }

    /// <summary>Field number for the "placement_date" field.</summary>
    public const int PlacementDateFieldNumber = 22;
    private global::Google.Protobuf.WellKnownTypes.Timestamp placementDate_;
    /// <summary>
    ///Дата размещения в часовом поясе UTC.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.WellKnownTypes.Timestamp PlacementDate {
      get { return placementDate_; }
      set {
        placementDate_ = value;
      }
    }

    /// <summary>Field number for the "placement_price" field.</summary>
    public const int PlacementPriceFieldNumber = 23;
    private global::Tinkoff.InvestApi.V1.MoneyValue placementPrice_;
    /// <summary>
    ///Цена размещения.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Tinkoff.InvestApi.V1.MoneyValue PlacementPrice {
      get { return placementPrice_; }
      set {
        placementPrice_ = value;
      }
    }

    /// <summary>Field number for the "aci_value" field.</summary>
    public const int AciValueFieldNumber = 24;
    private global::Tinkoff.InvestApi.V1.MoneyValue aciValue_;
    /// <summary>
    ///Значение НКД (накопленного купонного дохода) на дату.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Tinkoff.InvestApi.V1.MoneyValue AciValue {
      get { return aciValue_; }
      set {
        aciValue_ = value;
      }
    }

    /// <summary>Field number for the "country_of_risk" field.</summary>
    public const int CountryOfRiskFieldNumber = 25;
    private string countryOfRisk_ = "";
    /// <summary>
    ///Код страны эмитента.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string CountryOfRisk {
      get { return countryOfRisk_; }
      set {
        countryOfRisk_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "country_of_risk_name" field.</summary>
    public const int CountryOfRiskNameFieldNumber = 26;
    private string countryOfRiskName_ = "";
    /// <summary>
    ///Наименование страны эмитента.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string CountryOfRiskName {
      get { return countryOfRiskName_; }
      set {
        countryOfRiskName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "sector" field.</summary>
    public const int SectorFieldNumber = 27;
    private string sector_ = "";
    /// <summary>
    ///Сектор экономики.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Sector {
      get { return sector_; }
      set {
        sector_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "issue_kind" field.</summary>
    public const int IssueKindFieldNumber = 28;
    private string issueKind_ = "";
    /// <summary>
    ///Форма выпуска. Возможные значения: &lt;/br>**documentary** — документарная; &lt;/br>**non_documentary** — бездокументарная.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string IssueKind {
      get { return issueKind_; }
      set {
        issueKind_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "issue_size" field.</summary>
    public const int IssueSizeFieldNumber = 29;
    private long issueSize_;
    /// <summary>
    ///Размер выпуска.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long IssueSize {
      get { return issueSize_; }
      set {
        issueSize_ = value;
      }
    }

    /// <summary>Field number for the "issue_size_plan" field.</summary>
    public const int IssueSizePlanFieldNumber = 30;
    private long issueSizePlan_;
    /// <summary>
    ///Плановый размер выпуска.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long IssueSizePlan {
      get { return issueSizePlan_; }
      set {
        issueSizePlan_ = value;
      }
    }

    /// <summary>Field number for the "trading_status" field.</summary>
    public const int TradingStatusFieldNumber = 31;
    private global::Tinkoff.InvestApi.V1.SecurityTradingStatus tradingStatus_ = global::Tinkoff.InvestApi.V1.SecurityTradingStatus.Unspecified;
    /// <summary>
    ///Текущий режим торгов инструмента.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Tinkoff.InvestApi.V1.SecurityTradingStatus TradingStatus {
      get { return tradingStatus_; }
      set {
        tradingStatus_ = value;
      }
    }

    /// <summary>Field number for the "otc_flag" field.</summary>
    public const int OtcFlagFieldNumber = 32;
    private bool otcFlag_;
    /// <summary>
    ///Признак внебиржевой ценной бумаги.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool OtcFlag {
      get { return otcFlag_; }
      set {
        otcFlag_ = value;
      }
    }

    /// <summary>Field number for the "buy_available_flag" field.</summary>
    public const int BuyAvailableFlagFieldNumber = 33;
    private bool buyAvailableFlag_;
    /// <summary>
    ///Признак доступности для покупки.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool BuyAvailableFlag {
      get { return buyAvailableFlag_; }
      set {
        buyAvailableFlag_ = value;
      }
    }

    /// <summary>Field number for the "sell_available_flag" field.</summary>
    public const int SellAvailableFlagFieldNumber = 34;
    private bool sellAvailableFlag_;
    /// <summary>
    ///Признак доступности для продажи.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool SellAvailableFlag {
      get { return sellAvailableFlag_; }
      set {
        sellAvailableFlag_ = value;
      }
    }

    /// <summary>Field number for the "floating_coupon_flag" field.</summary>
    public const int FloatingCouponFlagFieldNumber = 35;
    private bool floatingCouponFlag_;
    /// <summary>
    ///Признак облигации с плавающим купоном.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool FloatingCouponFlag {
      get { return floatingCouponFlag_; }
      set {
        floatingCouponFlag_ = value;
      }
    }

    /// <summary>Field number for the "perpetual_flag" field.</summary>
    public const int PerpetualFlagFieldNumber = 36;
    private bool perpetualFlag_;
    /// <summary>
    ///Признак бессрочной облигации.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool PerpetualFlag {
      get { return perpetualFlag_; }
      set {
        perpetualFlag_ = value;
      }
    }

    /// <summary>Field number for the "amortization_flag" field.</summary>
    public const int AmortizationFlagFieldNumber = 37;
    private bool amortizationFlag_;
    /// <summary>
    ///Признак облигации с амортизацией долга.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool AmortizationFlag {
      get { return amortizationFlag_; }
      set {
        amortizationFlag_ = value;
      }
    }

    /// <summary>Field number for the "min_price_increment" field.</summary>
    public const int MinPriceIncrementFieldNumber = 38;
    private global::Tinkoff.InvestApi.V1.Quotation minPriceIncrement_;
    /// <summary>
    ///Шаг цены.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Tinkoff.InvestApi.V1.Quotation MinPriceIncrement {
      get { return minPriceIncrement_; }
      set {
        minPriceIncrement_ = value;
      }
    }

    /// <summary>Field number for the "api_trade_available_flag" field.</summary>
    public const int ApiTradeAvailableFlagFieldNumber = 39;
    private bool apiTradeAvailableFlag_;
    /// <summary>
    ///Признак доступности торгов через API.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool ApiTradeAvailableFlag {
      get { return apiTradeAvailableFlag_; }
      set {
        apiTradeAvailableFlag_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as Bond);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(Bond other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Figi != other.Figi) return false;
      if (Ticker != other.Ticker) return false;
      if (ClassCode != other.ClassCode) return false;
      if (Isin != other.Isin) return false;
      if (Lot != other.Lot) return false;
      if (Currency != other.Currency) return false;
      if (!object.Equals(Klong, other.Klong)) return false;
      if (!object.Equals(Kshort, other.Kshort)) return false;
      if (!object.Equals(Dlong, other.Dlong)) return false;
      if (!object.Equals(Dshort, other.Dshort)) return false;
      if (!object.Equals(DlongMin, other.DlongMin)) return false;
      if (!object.Equals(DshortMin, other.DshortMin)) return false;
      if (ShortEnabledFlag != other.ShortEnabledFlag) return false;
      if (Name != other.Name) return false;
      if (Exchange != other.Exchange) return false;
      if (CouponQuantityPerYear != other.CouponQuantityPerYear) return false;
      if (!object.Equals(MaturityDate, other.MaturityDate)) return false;
      if (!object.Equals(Nominal, other.Nominal)) return false;
      if (!object.Equals(StateRegDate, other.StateRegDate)) return false;
      if (!object.Equals(PlacementDate, other.PlacementDate)) return false;
      if (!object.Equals(PlacementPrice, other.PlacementPrice)) return false;
      if (!object.Equals(AciValue, other.AciValue)) return false;
      if (CountryOfRisk != other.CountryOfRisk) return false;
      if (CountryOfRiskName != other.CountryOfRiskName) return false;
      if (Sector != other.Sector) return false;
      if (IssueKind != other.IssueKind) return false;
      if (IssueSize != other.IssueSize) return false;
      if (IssueSizePlan != other.IssueSizePlan) return false;
      if (TradingStatus != other.TradingStatus) return false;
      if (OtcFlag != other.OtcFlag) return false;
      if (BuyAvailableFlag != other.BuyAvailableFlag) return false;
      if (SellAvailableFlag != other.SellAvailableFlag) return false;
      if (FloatingCouponFlag != other.FloatingCouponFlag) return false;
      if (PerpetualFlag != other.PerpetualFlag) return false;
      if (AmortizationFlag != other.AmortizationFlag) return false;
      if (!object.Equals(MinPriceIncrement, other.MinPriceIncrement)) return false;
      if (ApiTradeAvailableFlag != other.ApiTradeAvailableFlag) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (Figi.Length != 0) hash ^= Figi.GetHashCode();
      if (Ticker.Length != 0) hash ^= Ticker.GetHashCode();
      if (ClassCode.Length != 0) hash ^= ClassCode.GetHashCode();
      if (Isin.Length != 0) hash ^= Isin.GetHashCode();
      if (Lot != 0) hash ^= Lot.GetHashCode();
      if (Currency.Length != 0) hash ^= Currency.GetHashCode();
      if (klong_ != null) hash ^= Klong.GetHashCode();
      if (kshort_ != null) hash ^= Kshort.GetHashCode();
      if (dlong_ != null) hash ^= Dlong.GetHashCode();
      if (dshort_ != null) hash ^= Dshort.GetHashCode();
      if (dlongMin_ != null) hash ^= DlongMin.GetHashCode();
      if (dshortMin_ != null) hash ^= DshortMin.GetHashCode();
      if (ShortEnabledFlag != false) hash ^= ShortEnabledFlag.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Exchange.Length != 0) hash ^= Exchange.GetHashCode();
      if (CouponQuantityPerYear != 0) hash ^= CouponQuantityPerYear.GetHashCode();
      if (maturityDate_ != null) hash ^= MaturityDate.GetHashCode();
      if (nominal_ != null) hash ^= Nominal.GetHashCode();
      if (stateRegDate_ != null) hash ^= StateRegDate.GetHashCode();
      if (placementDate_ != null) hash ^= PlacementDate.GetHashCode();
      if (placementPrice_ != null) hash ^= PlacementPrice.GetHashCode();
      if (aciValue_ != null) hash ^= AciValue.GetHashCode();
      if (CountryOfRisk.Length != 0) hash ^= CountryOfRisk.GetHashCode();
      if (CountryOfRiskName.Length != 0) hash ^= CountryOfRiskName.GetHashCode();
      if (Sector.Length != 0) hash ^= Sector.GetHashCode();
      if (IssueKind.Length != 0) hash ^= IssueKind.GetHashCode();
      if (IssueSize != 0L) hash ^= IssueSize.GetHashCode();
      if (IssueSizePlan != 0L) hash ^= IssueSizePlan.GetHashCode();
      if (TradingStatus != global::Tinkoff.InvestApi.V1.SecurityTradingStatus.Unspecified) hash ^= TradingStatus.GetHashCode();
      if (OtcFlag != false) hash ^= OtcFlag.GetHashCode();
      if (BuyAvailableFlag != false) hash ^= BuyAvailableFlag.GetHashCode();
      if (SellAvailableFlag != false) hash ^= SellAvailableFlag.GetHashCode();
      if (FloatingCouponFlag != false) hash ^= FloatingCouponFlag.GetHashCode();
      if (PerpetualFlag != false) hash ^= PerpetualFlag.GetHashCode();
      if (AmortizationFlag != false) hash ^= AmortizationFlag.GetHashCode();
      if (minPriceIncrement_ != null) hash ^= MinPriceIncrement.GetHashCode();
      if (ApiTradeAvailableFlag != false) hash ^= ApiTradeAvailableFlag.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Figi.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Figi);
      }
      if (Ticker.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Ticker);
      }
      if (ClassCode.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(ClassCode);
      }
      if (Isin.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Isin);
      }
      if (Lot != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Lot);
      }
      if (Currency.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Currency);
      }
      if (klong_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(Klong);
      }
      if (kshort_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(Kshort);
      }
      if (dlong_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(Dlong);
      }
      if (dshort_ != null) {
        output.WriteRawTag(82);
        output.WriteMessage(Dshort);
      }
      if (dlongMin_ != null) {
        output.WriteRawTag(90);
        output.WriteMessage(DlongMin);
      }
      if (dshortMin_ != null) {
        output.WriteRawTag(98);
        output.WriteMessage(DshortMin);
      }
      if (ShortEnabledFlag != false) {
        output.WriteRawTag(104);
        output.WriteBool(ShortEnabledFlag);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(122);
        output.WriteString(Name);
      }
      if (Exchange.Length != 0) {
        output.WriteRawTag(130, 1);
        output.WriteString(Exchange);
      }
      if (CouponQuantityPerYear != 0) {
        output.WriteRawTag(136, 1);
        output.WriteInt32(CouponQuantityPerYear);
      }
      if (maturityDate_ != null) {
        output.WriteRawTag(146, 1);
        output.WriteMessage(MaturityDate);
      }
      if (nominal_ != null) {
        output.WriteRawTag(154, 1);
        output.WriteMessage(Nominal);
      }
      if (stateRegDate_ != null) {
        output.WriteRawTag(170, 1);
        output.WriteMessage(StateRegDate);
      }
      if (placementDate_ != null) {
        output.WriteRawTag(178, 1);
        output.WriteMessage(PlacementDate);
      }
      if (placementPrice_ != null) {
        output.WriteRawTag(186, 1);
        output.WriteMessage(PlacementPrice);
      }
      if (aciValue_ != null) {
        output.WriteRawTag(194, 1);
        output.WriteMessage(AciValue);
      }
      if (CountryOfRisk.Length != 0) {
        output.WriteRawTag(202, 1);
        output.WriteString(CountryOfRisk);
      }
      if (CountryOfRiskName.Length != 0) {
        output.WriteRawTag(210, 1);
        output.WriteString(CountryOfRiskName);
      }
      if (Sector.Length != 0) {
        output.WriteRawTag(218, 1);
        output.WriteString(Sector);
      }
      if (IssueKind.Length != 0) {
        output.WriteRawTag(226, 1);
        output.WriteString(IssueKind);
      }
      if (IssueSize != 0L) {
        output.WriteRawTag(232, 1);
        output.WriteInt64(IssueSize);
      }
      if (IssueSizePlan != 0L) {
        output.WriteRawTag(240, 1);
        output.WriteInt64(IssueSizePlan);
      }
      if (TradingStatus != global::Tinkoff.InvestApi.V1.SecurityTradingStatus.Unspecified) {
        output.WriteRawTag(248, 1);
        output.WriteEnum((int) TradingStatus);
      }
      if (OtcFlag != false) {
        output.WriteRawTag(128, 2);
        output.WriteBool(OtcFlag);
      }
      if (BuyAvailableFlag != false) {
        output.WriteRawTag(136, 2);
        output.WriteBool(BuyAvailableFlag);
      }
      if (SellAvailableFlag != false) {
        output.WriteRawTag(144, 2);
        output.WriteBool(SellAvailableFlag);
      }
      if (FloatingCouponFlag != false) {
        output.WriteRawTag(152, 2);
        output.WriteBool(FloatingCouponFlag);
      }
      if (PerpetualFlag != false) {
        output.WriteRawTag(160, 2);
        output.WriteBool(PerpetualFlag);
      }
      if (AmortizationFlag != false) {
        output.WriteRawTag(168, 2);
        output.WriteBool(AmortizationFlag);
      }
      if (minPriceIncrement_ != null) {
        output.WriteRawTag(178, 2);
        output.WriteMessage(MinPriceIncrement);
      }
      if (ApiTradeAvailableFlag != false) {
        output.WriteRawTag(184, 2);
        output.WriteBool(ApiTradeAvailableFlag);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Figi.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Figi);
      }
      if (Ticker.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Ticker);
      }
      if (ClassCode.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(ClassCode);
      }
      if (Isin.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Isin);
      }
      if (Lot != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Lot);
      }
      if (Currency.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Currency);
      }
      if (klong_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(Klong);
      }
      if (kshort_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(Kshort);
      }
      if (dlong_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(Dlong);
      }
      if (dshort_ != null) {
        output.WriteRawTag(82);
        output.WriteMessage(Dshort);
      }
      if (dlongMin_ != null) {
        output.WriteRawTag(90);
        output.WriteMessage(DlongMin);
      }
      if (dshortMin_ != null) {
        output.WriteRawTag(98);
        output.WriteMessage(DshortMin);
      }
      if (ShortEnabledFlag != false) {
        output.WriteRawTag(104);
        output.WriteBool(ShortEnabledFlag);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(122);
        output.WriteString(Name);
      }
      if (Exchange.Length != 0) {
        output.WriteRawTag(130, 1);
        output.WriteString(Exchange);
      }
      if (CouponQuantityPerYear != 0) {
        output.WriteRawTag(136, 1);
        output.WriteInt32(CouponQuantityPerYear);
      }
      if (maturityDate_ != null) {
        output.WriteRawTag(146, 1);
        output.WriteMessage(MaturityDate);
      }
      if (nominal_ != null) {
        output.WriteRawTag(154, 1);
        output.WriteMessage(Nominal);
      }
      if (stateRegDate_ != null) {
        output.WriteRawTag(170, 1);
        output.WriteMessage(StateRegDate);
      }
      if (placementDate_ != null) {
        output.WriteRawTag(178, 1);
        output.WriteMessage(PlacementDate);
      }
      if (placementPrice_ != null) {
        output.WriteRawTag(186, 1);
        output.WriteMessage(PlacementPrice);
      }
      if (aciValue_ != null) {
        output.WriteRawTag(194, 1);
        output.WriteMessage(AciValue);
      }
      if (CountryOfRisk.Length != 0) {
        output.WriteRawTag(202, 1);
        output.WriteString(CountryOfRisk);
      }
      if (CountryOfRiskName.Length != 0) {
        output.WriteRawTag(210, 1);
        output.WriteString(CountryOfRiskName);
      }
      if (Sector.Length != 0) {
        output.WriteRawTag(218, 1);
        output.WriteString(Sector);
      }
      if (IssueKind.Length != 0) {
        output.WriteRawTag(226, 1);
        output.WriteString(IssueKind);
      }
      if (IssueSize != 0L) {
        output.WriteRawTag(232, 1);
        output.WriteInt64(IssueSize);
      }
      if (IssueSizePlan != 0L) {
        output.WriteRawTag(240, 1);
        output.WriteInt64(IssueSizePlan);
      }
      if (TradingStatus != global::Tinkoff.InvestApi.V1.SecurityTradingStatus.Unspecified) {
        output.WriteRawTag(248, 1);
        output.WriteEnum((int) TradingStatus);
      }
      if (OtcFlag != false) {
        output.WriteRawTag(128, 2);
        output.WriteBool(OtcFlag);
      }
      if (BuyAvailableFlag != false) {
        output.WriteRawTag(136, 2);
        output.WriteBool(BuyAvailableFlag);
      }
      if (SellAvailableFlag != false) {
        output.WriteRawTag(144, 2);
        output.WriteBool(SellAvailableFlag);
      }
      if (FloatingCouponFlag != false) {
        output.WriteRawTag(152, 2);
        output.WriteBool(FloatingCouponFlag);
      }
      if (PerpetualFlag != false) {
        output.WriteRawTag(160, 2);
        output.WriteBool(PerpetualFlag);
      }
      if (AmortizationFlag != false) {
        output.WriteRawTag(168, 2);
        output.WriteBool(AmortizationFlag);
      }
      if (minPriceIncrement_ != null) {
        output.WriteRawTag(178, 2);
        output.WriteMessage(MinPriceIncrement);
      }
      if (ApiTradeAvailableFlag != false) {
        output.WriteRawTag(184, 2);
        output.WriteBool(ApiTradeAvailableFlag);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (Figi.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Figi);
      }
      if (Ticker.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Ticker);
      }
      if (ClassCode.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ClassCode);
      }
      if (Isin.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Isin);
      }
      if (Lot != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Lot);
      }
      if (Currency.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Currency);
      }
      if (klong_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Klong);
      }
      if (kshort_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Kshort);
      }
      if (dlong_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Dlong);
      }
      if (dshort_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Dshort);
      }
      if (dlongMin_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DlongMin);
      }
      if (dshortMin_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DshortMin);
      }
      if (ShortEnabledFlag != false) {
        size += 1 + 1;
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Exchange.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Exchange);
      }
      if (CouponQuantityPerYear != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(CouponQuantityPerYear);
      }
      if (maturityDate_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(MaturityDate);
      }
      if (nominal_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Nominal);
      }
      if (stateRegDate_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(StateRegDate);
      }
      if (placementDate_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(PlacementDate);
      }
      if (placementPrice_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(PlacementPrice);
      }
      if (aciValue_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(AciValue);
      }
      if (CountryOfRisk.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(CountryOfRisk);
      }
      if (CountryOfRiskName.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(CountryOfRiskName);
      }
      if (Sector.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Sector);
      }
      if (IssueKind.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(IssueKind);
      }
      if (IssueSize != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(IssueSize);
      }
      if (IssueSizePlan != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(IssueSizePlan);
      }
      if (TradingStatus != global::Tinkoff.InvestApi.V1.SecurityTradingStatus.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) TradingStatus);
      }
      if (OtcFlag != false) {
        size += 2 + 1;
      }
      if (BuyAvailableFlag != false) {
        size += 2 + 1;
      }
      if (SellAvailableFlag != false) {
        size += 2 + 1;
      }
      if (FloatingCouponFlag != false) {
        size += 2 + 1;
      }
      if (PerpetualFlag != false) {
        size += 2 + 1;
      }
      if (AmortizationFlag != false) {
        size += 2 + 1;
      }
      if (minPriceIncrement_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(MinPriceIncrement);
      }
      if (ApiTradeAvailableFlag != false) {
        size += 2 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(Bond other) {
      if (other == null) {
        return;
      }
      if (other.Figi.Length != 0) {
        Figi = other.Figi;
      }
      if (other.Ticker.Length != 0) {
        Ticker = other.Ticker;
      }
      if (other.ClassCode.Length != 0) {
        ClassCode = other.ClassCode;
      }
      if (other.Isin.Length != 0) {
        Isin = other.Isin;
      }
      if (other.Lot != 0) {
        Lot = other.Lot;
      }
      if (other.Currency.Length != 0) {
        Currency = other.Currency;
      }
      if (other.klong_ != null) {
        if (klong_ == null) {
          Klong = new global::Tinkoff.InvestApi.V1.Quotation();
        }
        Klong.MergeFrom(other.Klong);
      }
      if (other.kshort_ != null) {
        if (kshort_ == null) {
          Kshort = new global::Tinkoff.InvestApi.V1.Quotation();
        }
        Kshort.MergeFrom(other.Kshort);
      }
      if (other.dlong_ != null) {
        if (dlong_ == null) {
          Dlong = new global::Tinkoff.InvestApi.V1.Quotation();
        }
        Dlong.MergeFrom(other.Dlong);
      }
      if (other.dshort_ != null) {
        if (dshort_ == null) {
          Dshort = new global::Tinkoff.InvestApi.V1.Quotation();
        }
        Dshort.MergeFrom(other.Dshort);
      }
      if (other.dlongMin_ != null) {
        if (dlongMin_ == null) {
          DlongMin = new global::Tinkoff.InvestApi.V1.Quotation();
        }
        DlongMin.MergeFrom(other.DlongMin);
      }
      if (other.dshortMin_ != null) {
        if (dshortMin_ == null) {
          DshortMin = new global::Tinkoff.InvestApi.V1.Quotation();
        }
        DshortMin.MergeFrom(other.DshortMin);
      }
      if (other.ShortEnabledFlag != false) {
        ShortEnabledFlag = other.ShortEnabledFlag;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Exchange.Length != 0) {
        Exchange = other.Exchange;
      }
      if (other.CouponQuantityPerYear != 0) {
        CouponQuantityPerYear = other.CouponQuantityPerYear;
      }
      if (other.maturityDate_ != null) {
        if (maturityDate_ == null) {
          MaturityDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        MaturityDate.MergeFrom(other.MaturityDate);
      }
      if (other.nominal_ != null) {
        if (nominal_ == null) {
          Nominal = new global::Tinkoff.InvestApi.V1.MoneyValue();
        }
        Nominal.MergeFrom(other.Nominal);
      }
      if (other.stateRegDate_ != null) {
        if (stateRegDate_ == null) {
          StateRegDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        StateRegDate.MergeFrom(other.StateRegDate);
      }
      if (other.placementDate_ != null) {
        if (placementDate_ == null) {
          PlacementDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        PlacementDate.MergeFrom(other.PlacementDate);
      }
      if (other.placementPrice_ != null) {
        if (placementPrice_ == null) {
          PlacementPrice = new global::Tinkoff.InvestApi.V1.MoneyValue();
        }
        PlacementPrice.MergeFrom(other.PlacementPrice);
      }
      if (other.aciValue_ != null) {
        if (aciValue_ == null) {
          AciValue = new global::Tinkoff.InvestApi.V1.MoneyValue();
        }
        AciValue.MergeFrom(other.AciValue);
      }
      if (other.CountryOfRisk.Length != 0) {
        CountryOfRisk = other.CountryOfRisk;
      }
      if (other.CountryOfRiskName.Length != 0) {
        CountryOfRiskName = other.CountryOfRiskName;
      }
      if (other.Sector.Length != 0) {
        Sector = other.Sector;
      }
      if (other.IssueKind.Length != 0) {
        IssueKind = other.IssueKind;
      }
      if (other.IssueSize != 0L) {
        IssueSize = other.IssueSize;
      }
      if (other.IssueSizePlan != 0L) {
        IssueSizePlan = other.IssueSizePlan;
      }
      if (other.TradingStatus != global::Tinkoff.InvestApi.V1.SecurityTradingStatus.Unspecified) {
        TradingStatus = other.TradingStatus;
      }
      if (other.OtcFlag != false) {
        OtcFlag = other.OtcFlag;
      }
      if (other.BuyAvailableFlag != false) {
        BuyAvailableFlag = other.BuyAvailableFlag;
      }
      if (other.SellAvailableFlag != false) {
        SellAvailableFlag = other.SellAvailableFlag;
      }
      if (other.FloatingCouponFlag != false) {
        FloatingCouponFlag = other.FloatingCouponFlag;
      }
      if (other.PerpetualFlag != false) {
        PerpetualFlag = other.PerpetualFlag;
      }
      if (other.AmortizationFlag != false) {
        AmortizationFlag = other.AmortizationFlag;
      }
      if (other.minPriceIncrement_ != null) {
        if (minPriceIncrement_ == null) {
          MinPriceIncrement = new global::Tinkoff.InvestApi.V1.Quotation();
        }
        MinPriceIncrement.MergeFrom(other.MinPriceIncrement);
      }
      if (other.ApiTradeAvailableFlag != false) {
        ApiTradeAvailableFlag = other.ApiTradeAvailableFlag;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Figi = input.ReadString();
            break;
          }
          case 18: {
            Ticker = input.ReadString();
            break;
          }
          case 26: {
            ClassCode = input.ReadString();
            break;
          }
          case 34: {
            Isin = input.ReadString();
            break;
          }
          case 40: {
            Lot = input.ReadInt32();
            break;
          }
          case 50: {
            Currency = input.ReadString();
            break;
          }
          case 58: {
            if (klong_ == null) {
              Klong = new global::Tinkoff.InvestApi.V1.Quotation();
            }
            input.ReadMessage(Klong);
            break;
          }
          case 66: {
            if (kshort_ == null) {
              Kshort = new global::Tinkoff.InvestApi.V1.Quotation();
            }
            input.ReadMessage(Kshort);
            break;
          }
          case 74: {
            if (dlong_ == null) {
              Dlong = new global::Tinkoff.InvestApi.V1.Quotation();
            }
            input.ReadMessage(Dlong);
            break;
          }
          case 82: {
            if (dshort_ == null) {
              Dshort = new global::Tinkoff.InvestApi.V1.Quotation();
            }
            input.ReadMessage(Dshort);
            break;
          }
          case 90: {
            if (dlongMin_ == null) {
              DlongMin = new global::Tinkoff.InvestApi.V1.Quotation();
            }
            input.ReadMessage(DlongMin);
            break;
          }
          case 98: {
            if (dshortMin_ == null) {
              DshortMin = new global::Tinkoff.InvestApi.V1.Quotation();
            }
            input.ReadMessage(DshortMin);
            break;
          }
          case 104: {
            ShortEnabledFlag = input.ReadBool();
            break;
          }
          case 122: {
            Name = input.ReadString();
            break;
          }
          case 130: {
            Exchange = input.ReadString();
            break;
          }
          case 136: {
            CouponQuantityPerYear = input.ReadInt32();
            break;
          }
          case 146: {
            if (maturityDate_ == null) {
              MaturityDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(MaturityDate);
            break;
          }
          case 154: {
            if (nominal_ == null) {
              Nominal = new global::Tinkoff.InvestApi.V1.MoneyValue();
            }
            input.ReadMessage(Nominal);
            break;
          }
          case 170: {
            if (stateRegDate_ == null) {
              StateRegDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(StateRegDate);
            break;
          }
          case 178: {
            if (placementDate_ == null) {
              PlacementDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(PlacementDate);
            break;
          }
          case 186: {
            if (placementPrice_ == null) {
              PlacementPrice = new global::Tinkoff.InvestApi.V1.MoneyValue();
            }
            input.ReadMessage(PlacementPrice);
            break;
          }
          case 194: {
            if (aciValue_ == null) {
              AciValue = new global::Tinkoff.InvestApi.V1.MoneyValue();
            }
            input.ReadMessage(AciValue);
            break;
          }
          case 202: {
            CountryOfRisk = input.ReadString();
            break;
          }
          case 210: {
            CountryOfRiskName = input.ReadString();
            break;
          }
          case 218: {
            Sector = input.ReadString();
            break;
          }
          case 226: {
            IssueKind = input.ReadString();
            break;
          }
          case 232: {
            IssueSize = input.ReadInt64();
            break;
          }
          case 240: {
            IssueSizePlan = input.ReadInt64();
            break;
          }
          case 248: {
            TradingStatus = (global::Tinkoff.InvestApi.V1.SecurityTradingStatus) input.ReadEnum();
            break;
          }
          case 256: {
            OtcFlag = input.ReadBool();
            break;
          }
          case 264: {
            BuyAvailableFlag = input.ReadBool();
            break;
          }
          case 272: {
            SellAvailableFlag = input.ReadBool();
            break;
          }
          case 280: {
            FloatingCouponFlag = input.ReadBool();
            break;
          }
          case 288: {
            PerpetualFlag = input.ReadBool();
            break;
          }
          case 296: {
            AmortizationFlag = input.ReadBool();
            break;
          }
          case 306: {
            if (minPriceIncrement_ == null) {
              MinPriceIncrement = new global::Tinkoff.InvestApi.V1.Quotation();
            }
            input.ReadMessage(MinPriceIncrement);
            break;
          }
          case 312: {
            ApiTradeAvailableFlag = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Figi = input.ReadString();
            break;
          }
          case 18: {
            Ticker = input.ReadString();
            break;
          }
          case 26: {
            ClassCode = input.ReadString();
            break;
          }
          case 34: {
            Isin = input.ReadString();
            break;
          }
          case 40: {
            Lot = input.ReadInt32();
            break;
          }
          case 50: {
            Currency = input.ReadString();
            break;
          }
          case 58: {
            if (klong_ == null) {
              Klong = new global::Tinkoff.InvestApi.V1.Quotation();
            }
            input.ReadMessage(Klong);
            break;
          }
          case 66: {
            if (kshort_ == null) {
              Kshort = new global::Tinkoff.InvestApi.V1.Quotation();
            }
            input.ReadMessage(Kshort);
            break;
          }
          case 74: {
            if (dlong_ == null) {
              Dlong = new global::Tinkoff.InvestApi.V1.Quotation();
            }
            input.ReadMessage(Dlong);
            break;
          }
          case 82: {
            if (dshort_ == null) {
              Dshort = new global::Tinkoff.InvestApi.V1.Quotation();
            }
            input.ReadMessage(Dshort);
            break;
          }
          case 90: {
            if (dlongMin_ == null) {
              DlongMin = new global::Tinkoff.InvestApi.V1.Quotation();
            }
            input.ReadMessage(DlongMin);
            break;
          }
          case 98: {
            if (dshortMin_ == null) {
              DshortMin = new global::Tinkoff.InvestApi.V1.Quotation();
            }
            input.ReadMessage(DshortMin);
            break;
          }
          case 104: {
            ShortEnabledFlag = input.ReadBool();
            break;
          }
          case 122: {
            Name = input.ReadString();
            break;
          }
          case 130: {
            Exchange = input.ReadString();
            break;
          }
          case 136: {
            CouponQuantityPerYear = input.ReadInt32();
            break;
          }
          case 146: {
            if (maturityDate_ == null) {
              MaturityDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(MaturityDate);
            break;
          }
          case 154: {
            if (nominal_ == null) {
              Nominal = new global::Tinkoff.InvestApi.V1.MoneyValue();
            }
            input.ReadMessage(Nominal);
            break;
          }
          case 170: {
            if (stateRegDate_ == null) {
              StateRegDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(StateRegDate);
            break;
          }
          case 178: {
            if (placementDate_ == null) {
              PlacementDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(PlacementDate);
            break;
          }
          case 186: {
            if (placementPrice_ == null) {
              PlacementPrice = new global::Tinkoff.InvestApi.V1.MoneyValue();
            }
            input.ReadMessage(PlacementPrice);
            break;
          }
          case 194: {
            if (aciValue_ == null) {
              AciValue = new global::Tinkoff.InvestApi.V1.MoneyValue();
            }
            input.ReadMessage(AciValue);
            break;
          }
          case 202: {
            CountryOfRisk = input.ReadString();
            break;
          }
          case 210: {
            CountryOfRiskName = input.ReadString();
            break;
          }
          case 218: {
            Sector = input.ReadString();
            break;
          }
          case 226: {
            IssueKind = input.ReadString();
            break;
          }
          case 232: {
            IssueSize = input.ReadInt64();
            break;
          }
          case 240: {
            IssueSizePlan = input.ReadInt64();
            break;
          }
          case 248: {
            TradingStatus = (global::Tinkoff.InvestApi.V1.SecurityTradingStatus) input.ReadEnum();
            break;
          }
          case 256: {
            OtcFlag = input.ReadBool();
            break;
          }
          case 264: {
            BuyAvailableFlag = input.ReadBool();
            break;
          }
          case 272: {
            SellAvailableFlag = input.ReadBool();
            break;
          }
          case 280: {
            FloatingCouponFlag = input.ReadBool();
            break;
          }
          case 288: {
            PerpetualFlag = input.ReadBool();
            break;
          }
          case 296: {
            AmortizationFlag = input.ReadBool();
            break;
          }
          case 306: {
            if (minPriceIncrement_ == null) {
              MinPriceIncrement = new global::Tinkoff.InvestApi.V1.Quotation();
            }
            input.ReadMessage(MinPriceIncrement);
            break;
          }
          case 312: {
            ApiTradeAvailableFlag = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///Объект передачи информации о валюте.
  /// </summary>
  public sealed partial class Currency : pb::IMessage<Currency>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Currency> _parser = new pb::MessageParser<Currency>(() => new Currency());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<Currency> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tinkoff.InvestApi.V1.InstrumentsReflection.Descriptor.MessageTypes[17]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Currency() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Currency(Currency other) : this() {
      figi_ = other.figi_;
      ticker_ = other.ticker_;
      classCode_ = other.classCode_;
      isin_ = other.isin_;
      lot_ = other.lot_;
      currency_ = other.currency_;
      klong_ = other.klong_ != null ? other.klong_.Clone() : null;
      kshort_ = other.kshort_ != null ? other.kshort_.Clone() : null;
      dlong_ = other.dlong_ != null ? other.dlong_.Clone() : null;
      dshort_ = other.dshort_ != null ? other.dshort_.Clone() : null;
      dlongMin_ = other.dlongMin_ != null ? other.dlongMin_.Clone() : null;
      dshortMin_ = other.dshortMin_ != null ? other.dshortMin_.Clone() : null;
      shortEnabledFlag_ = other.shortEnabledFlag_;
      name_ = other.name_;
      exchange_ = other.exchange_;
      nominal_ = other.nominal_ != null ? other.nominal_.Clone() : null;
      countryOfRisk_ = other.countryOfRisk_;
      countryOfRiskName_ = other.countryOfRiskName_;
      tradingStatus_ = other.tradingStatus_;
      otcFlag_ = other.otcFlag_;
      buyAvailableFlag_ = other.buyAvailableFlag_;
      sellAvailableFlag_ = other.sellAvailableFlag_;
      isoCurrencyName_ = other.isoCurrencyName_;
      minPriceIncrement_ = other.minPriceIncrement_ != null ? other.minPriceIncrement_.Clone() : null;
      apiTradeAvailableFlag_ = other.apiTradeAvailableFlag_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Currency Clone() {
      return new Currency(this);
    }

    /// <summary>Field number for the "figi" field.</summary>
    public const int FigiFieldNumber = 1;
    private string figi_ = "";
    /// <summary>
    ///Figi-идентификатор инструмента.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Figi {
      get { return figi_; }
      set {
        figi_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ticker" field.</summary>
    public const int TickerFieldNumber = 2;
    private string ticker_ = "";
    /// <summary>
    ///Тикер инструмента.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Ticker {
      get { return ticker_; }
      set {
        ticker_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "class_code" field.</summary>
    public const int ClassCodeFieldNumber = 3;
    private string classCode_ = "";
    /// <summary>
    ///Класс-код (секция торгов).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string ClassCode {
      get { return classCode_; }
      set {
        classCode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "isin" field.</summary>
    public const int IsinFieldNumber = 4;
    private string isin_ = "";
    /// <summary>
    ///Isin-идентификатор инструмента.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Isin {
      get { return isin_; }
      set {
        isin_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "lot" field.</summary>
    public const int LotFieldNumber = 5;
    private int lot_;
    /// <summary>
    ///Лотность инструмента. Возможно совершение операций только на количества ценной бумаги, кратные параметру *lot*. Подробнее: [лот](https://tinkoff.github.io/investAPI/glossary#lot)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Lot {
      get { return lot_; }
      set {
        lot_ = value;
      }
    }

    /// <summary>Field number for the "currency" field.</summary>
    public const int Currency_FieldNumber = 6;
    private string currency_ = "";
    /// <summary>
    ///Валюта расчётов.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Currency_ {
      get { return currency_; }
      set {
        currency_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "klong" field.</summary>
    public const int KlongFieldNumber = 7;
    private global::Tinkoff.InvestApi.V1.Quotation klong_;
    /// <summary>
    ///Коэффициент ставки риска длинной позиции по инструменту.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Tinkoff.InvestApi.V1.Quotation Klong {
      get { return klong_; }
      set {
        klong_ = value;
      }
    }

    /// <summary>Field number for the "kshort" field.</summary>
    public const int KshortFieldNumber = 8;
    private global::Tinkoff.InvestApi.V1.Quotation kshort_;
    /// <summary>
    ///Коэффициент ставки риска короткой позиции по инструменту.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Tinkoff.InvestApi.V1.Quotation Kshort {
      get { return kshort_; }
      set {
        kshort_ = value;
      }
    }

    /// <summary>Field number for the "dlong" field.</summary>
    public const int DlongFieldNumber = 9;
    private global::Tinkoff.InvestApi.V1.Quotation dlong_;
    /// <summary>
    ///Ставка риска минимальной маржи в лонг. Подробнее: [ставка риска в лонг](https://help.tinkoff.ru/margin-trade/long/risk-rate/)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Tinkoff.InvestApi.V1.Quotation Dlong {
      get { return dlong_; }
      set {
        dlong_ = value;
      }
    }

    /// <summary>Field number for the "dshort" field.</summary>
    public const int DshortFieldNumber = 10;
    private global::Tinkoff.InvestApi.V1.Quotation dshort_;
    /// <summary>
    ///Ставка риска минимальной маржи в шорт. Подробнее: [ставка риска в шорт](https://help.tinkoff.ru/margin-trade/short/risk-rate/)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Tinkoff.InvestApi.V1.Quotation Dshort {
      get { return dshort_; }
      set {
        dshort_ = value;
      }
    }

    /// <summary>Field number for the "dlong_min" field.</summary>
    public const int DlongMinFieldNumber = 11;
    private global::Tinkoff.InvestApi.V1.Quotation dlongMin_;
    /// <summary>
    ///Ставка риска начальной маржи в лонг. Подробнее: [ставка риска в лонг](https://help.tinkoff.ru/margin-trade/long/risk-rate/)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Tinkoff.InvestApi.V1.Quotation DlongMin {
      get { return dlongMin_; }
      set {
        dlongMin_ = value;
      }
    }

    /// <summary>Field number for the "dshort_min" field.</summary>
    public const int DshortMinFieldNumber = 12;
    private global::Tinkoff.InvestApi.V1.Quotation dshortMin_;
    /// <summary>
    ///Ставка риска начальной маржи в шорт. Подробнее: [ставка риска в шорт](https://help.tinkoff.ru/margin-trade/short/risk-rate/)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Tinkoff.InvestApi.V1.Quotation DshortMin {
      get { return dshortMin_; }
      set {
        dshortMin_ = value;
      }
    }

    /// <summary>Field number for the "short_enabled_flag" field.</summary>
    public const int ShortEnabledFlagFieldNumber = 13;
    private bool shortEnabledFlag_;
    /// <summary>
    ///Признак доступности для операций в шорт.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool ShortEnabledFlag {
      get { return shortEnabledFlag_; }
      set {
        shortEnabledFlag_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 15;
    private string name_ = "";
    /// <summary>
    ///Название инструмента.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "exchange" field.</summary>
    public const int ExchangeFieldNumber = 16;
    private string exchange_ = "";
    /// <summary>
    ///Торговая площадка.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Exchange {
      get { return exchange_; }
      set {
        exchange_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "nominal" field.</summary>
    public const int NominalFieldNumber = 17;
    private global::Tinkoff.InvestApi.V1.MoneyValue nominal_;
    /// <summary>
    ///Номинал.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Tinkoff.InvestApi.V1.MoneyValue Nominal {
      get { return nominal_; }
      set {
        nominal_ = value;
      }
    }

    /// <summary>Field number for the "country_of_risk" field.</summary>
    public const int CountryOfRiskFieldNumber = 18;
    private string countryOfRisk_ = "";
    /// <summary>
    ///Код страны эмитента.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string CountryOfRisk {
      get { return countryOfRisk_; }
      set {
        countryOfRisk_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "country_of_risk_name" field.</summary>
    public const int CountryOfRiskNameFieldNumber = 19;
    private string countryOfRiskName_ = "";
    /// <summary>
    ///Наименование страны эмитента.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string CountryOfRiskName {
      get { return countryOfRiskName_; }
      set {
        countryOfRiskName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "trading_status" field.</summary>
    public const int TradingStatusFieldNumber = 20;
    private global::Tinkoff.InvestApi.V1.SecurityTradingStatus tradingStatus_ = global::Tinkoff.InvestApi.V1.SecurityTradingStatus.Unspecified;
    /// <summary>
    ///Текущий режим торгов инструмента.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Tinkoff.InvestApi.V1.SecurityTradingStatus TradingStatus {
      get { return tradingStatus_; }
      set {
        tradingStatus_ = value;
      }
    }

    /// <summary>Field number for the "otc_flag" field.</summary>
    public const int OtcFlagFieldNumber = 21;
    private bool otcFlag_;
    /// <summary>
    ///Признак внебиржевой ценной бумаги.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool OtcFlag {
      get { return otcFlag_; }
      set {
        otcFlag_ = value;
      }
    }

    /// <summary>Field number for the "buy_available_flag" field.</summary>
    public const int BuyAvailableFlagFieldNumber = 22;
    private bool buyAvailableFlag_;
    /// <summary>
    ///Признак доступности для покупки.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool BuyAvailableFlag {
      get { return buyAvailableFlag_; }
      set {
        buyAvailableFlag_ = value;
      }
    }

    /// <summary>Field number for the "sell_available_flag" field.</summary>
    public const int SellAvailableFlagFieldNumber = 23;
    private bool sellAvailableFlag_;
    /// <summary>
    ///Признак доступности для продажи.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool SellAvailableFlag {
      get { return sellAvailableFlag_; }
      set {
        sellAvailableFlag_ = value;
      }
    }

    /// <summary>Field number for the "iso_currency_name" field.</summary>
    public const int IsoCurrencyNameFieldNumber = 24;
    private string isoCurrencyName_ = "";
    /// <summary>
    ///Строковый ISO-код валюты.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string IsoCurrencyName {
      get { return isoCurrencyName_; }
      set {
        isoCurrencyName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "min_price_increment" field.</summary>
    public const int MinPriceIncrementFieldNumber = 25;
    private global::Tinkoff.InvestApi.V1.Quotation minPriceIncrement_;
    /// <summary>
    ///Шаг цены.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Tinkoff.InvestApi.V1.Quotation MinPriceIncrement {
      get { return minPriceIncrement_; }
      set {
        minPriceIncrement_ = value;
      }
    }

    /// <summary>Field number for the "api_trade_available_flag" field.</summary>
    public const int ApiTradeAvailableFlagFieldNumber = 26;
    private bool apiTradeAvailableFlag_;
    /// <summary>
    ///Признак доступности торгов через API.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool ApiTradeAvailableFlag {
      get { return apiTradeAvailableFlag_; }
      set {
        apiTradeAvailableFlag_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as Currency);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(Currency other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Figi != other.Figi) return false;
      if (Ticker != other.Ticker) return false;
      if (ClassCode != other.ClassCode) return false;
      if (Isin != other.Isin) return false;
      if (Lot != other.Lot) return false;
      if (Currency_ != other.Currency_) return false;
      if (!object.Equals(Klong, other.Klong)) return false;
      if (!object.Equals(Kshort, other.Kshort)) return false;
      if (!object.Equals(Dlong, other.Dlong)) return false;
      if (!object.Equals(Dshort, other.Dshort)) return false;
      if (!object.Equals(DlongMin, other.DlongMin)) return false;
      if (!object.Equals(DshortMin, other.DshortMin)) return false;
      if (ShortEnabledFlag != other.ShortEnabledFlag) return false;
      if (Name != other.Name) return false;
      if (Exchange != other.Exchange) return false;
      if (!object.Equals(Nominal, other.Nominal)) return false;
      if (CountryOfRisk != other.CountryOfRisk) return false;
      if (CountryOfRiskName != other.CountryOfRiskName) return false;
      if (TradingStatus != other.TradingStatus) return false;
      if (OtcFlag != other.OtcFlag) return false;
      if (BuyAvailableFlag != other.BuyAvailableFlag) return false;
      if (SellAvailableFlag != other.SellAvailableFlag) return false;
      if (IsoCurrencyName != other.IsoCurrencyName) return false;
      if (!object.Equals(MinPriceIncrement, other.MinPriceIncrement)) return false;
      if (ApiTradeAvailableFlag != other.ApiTradeAvailableFlag) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (Figi.Length != 0) hash ^= Figi.GetHashCode();
      if (Ticker.Length != 0) hash ^= Ticker.GetHashCode();
      if (ClassCode.Length != 0) hash ^= ClassCode.GetHashCode();
      if (Isin.Length != 0) hash ^= Isin.GetHashCode();
      if (Lot != 0) hash ^= Lot.GetHashCode();
      if (Currency_.Length != 0) hash ^= Currency_.GetHashCode();
      if (klong_ != null) hash ^= Klong.GetHashCode();
      if (kshort_ != null) hash ^= Kshort.GetHashCode();
      if (dlong_ != null) hash ^= Dlong.GetHashCode();
      if (dshort_ != null) hash ^= Dshort.GetHashCode();
      if (dlongMin_ != null) hash ^= DlongMin.GetHashCode();
      if (dshortMin_ != null) hash ^= DshortMin.GetHashCode();
      if (ShortEnabledFlag != false) hash ^= ShortEnabledFlag.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Exchange.Length != 0) hash ^= Exchange.GetHashCode();
      if (nominal_ != null) hash ^= Nominal.GetHashCode();
      if (CountryOfRisk.Length != 0) hash ^= CountryOfRisk.GetHashCode();
      if (CountryOfRiskName.Length != 0) hash ^= CountryOfRiskName.GetHashCode();
      if (TradingStatus != global::Tinkoff.InvestApi.V1.SecurityTradingStatus.Unspecified) hash ^= TradingStatus.GetHashCode();
      if (OtcFlag != false) hash ^= OtcFlag.GetHashCode();
      if (BuyAvailableFlag != false) hash ^= BuyAvailableFlag.GetHashCode();
      if (SellAvailableFlag != false) hash ^= SellAvailableFlag.GetHashCode();
      if (IsoCurrencyName.Length != 0) hash ^= IsoCurrencyName.GetHashCode();
      if (minPriceIncrement_ != null) hash ^= MinPriceIncrement.GetHashCode();
      if (ApiTradeAvailableFlag != false) hash ^= ApiTradeAvailableFlag.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Figi.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Figi);
      }
      if (Ticker.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Ticker);
      }
      if (ClassCode.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(ClassCode);
      }
      if (Isin.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Isin);
      }
      if (Lot != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Lot);
      }
      if (Currency_.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Currency_);
      }
      if (klong_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(Klong);
      }
      if (kshort_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(Kshort);
      }
      if (dlong_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(Dlong);
      }
      if (dshort_ != null) {
        output.WriteRawTag(82);
        output.WriteMessage(Dshort);
      }
      if (dlongMin_ != null) {
        output.WriteRawTag(90);
        output.WriteMessage(DlongMin);
      }
      if (dshortMin_ != null) {
        output.WriteRawTag(98);
        output.WriteMessage(DshortMin);
      }
      if (ShortEnabledFlag != false) {
        output.WriteRawTag(104);
        output.WriteBool(ShortEnabledFlag);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(122);
        output.WriteString(Name);
      }
      if (Exchange.Length != 0) {
        output.WriteRawTag(130, 1);
        output.WriteString(Exchange);
      }
      if (nominal_ != null) {
        output.WriteRawTag(138, 1);
        output.WriteMessage(Nominal);
      }
      if (CountryOfRisk.Length != 0) {
        output.WriteRawTag(146, 1);
        output.WriteString(CountryOfRisk);
      }
      if (CountryOfRiskName.Length != 0) {
        output.WriteRawTag(154, 1);
        output.WriteString(CountryOfRiskName);
      }
      if (TradingStatus != global::Tinkoff.InvestApi.V1.SecurityTradingStatus.Unspecified) {
        output.WriteRawTag(160, 1);
        output.WriteEnum((int) TradingStatus);
      }
      if (OtcFlag != false) {
        output.WriteRawTag(168, 1);
        output.WriteBool(OtcFlag);
      }
      if (BuyAvailableFlag != false) {
        output.WriteRawTag(176, 1);
        output.WriteBool(BuyAvailableFlag);
      }
      if (SellAvailableFlag != false) {
        output.WriteRawTag(184, 1);
        output.WriteBool(SellAvailableFlag);
      }
      if (IsoCurrencyName.Length != 0) {
        output.WriteRawTag(194, 1);
        output.WriteString(IsoCurrencyName);
      }
      if (minPriceIncrement_ != null) {
        output.WriteRawTag(202, 1);
        output.WriteMessage(MinPriceIncrement);
      }
      if (ApiTradeAvailableFlag != false) {
        output.WriteRawTag(208, 1);
        output.WriteBool(ApiTradeAvailableFlag);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Figi.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Figi);
      }
      if (Ticker.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Ticker);
      }
      if (ClassCode.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(ClassCode);
      }
      if (Isin.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Isin);
      }
      if (Lot != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Lot);
      }
      if (Currency_.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Currency_);
      }
      if (klong_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(Klong);
      }
      if (kshort_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(Kshort);
      }
      if (dlong_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(Dlong);
      }
      if (dshort_ != null) {
        output.WriteRawTag(82);
        output.WriteMessage(Dshort);
      }
      if (dlongMin_ != null) {
        output.WriteRawTag(90);
        output.WriteMessage(DlongMin);
      }
      if (dshortMin_ != null) {
        output.WriteRawTag(98);
        output.WriteMessage(DshortMin);
      }
      if (ShortEnabledFlag != false) {
        output.WriteRawTag(104);
        output.WriteBool(ShortEnabledFlag);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(122);
        output.WriteString(Name);
      }
      if (Exchange.Length != 0) {
        output.WriteRawTag(130, 1);
        output.WriteString(Exchange);
      }
      if (nominal_ != null) {
        output.WriteRawTag(138, 1);
        output.WriteMessage(Nominal);
      }
      if (CountryOfRisk.Length != 0) {
        output.WriteRawTag(146, 1);
        output.WriteString(CountryOfRisk);
      }
      if (CountryOfRiskName.Length != 0) {
        output.WriteRawTag(154, 1);
        output.WriteString(CountryOfRiskName);
      }
      if (TradingStatus != global::Tinkoff.InvestApi.V1.SecurityTradingStatus.Unspecified) {
        output.WriteRawTag(160, 1);
        output.WriteEnum((int) TradingStatus);
      }
      if (OtcFlag != false) {
        output.WriteRawTag(168, 1);
        output.WriteBool(OtcFlag);
      }
      if (BuyAvailableFlag != false) {
        output.WriteRawTag(176, 1);
        output.WriteBool(BuyAvailableFlag);
      }
      if (SellAvailableFlag != false) {
        output.WriteRawTag(184, 1);
        output.WriteBool(SellAvailableFlag);
      }
      if (IsoCurrencyName.Length != 0) {
        output.WriteRawTag(194, 1);
        output.WriteString(IsoCurrencyName);
      }
      if (minPriceIncrement_ != null) {
        output.WriteRawTag(202, 1);
        output.WriteMessage(MinPriceIncrement);
      }
      if (ApiTradeAvailableFlag != false) {
        output.WriteRawTag(208, 1);
        output.WriteBool(ApiTradeAvailableFlag);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (Figi.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Figi);
      }
      if (Ticker.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Ticker);
      }
      if (ClassCode.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ClassCode);
      }
      if (Isin.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Isin);
      }
      if (Lot != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Lot);
      }
      if (Currency_.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Currency_);
      }
      if (klong_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Klong);
      }
      if (kshort_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Kshort);
      }
      if (dlong_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Dlong);
      }
      if (dshort_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Dshort);
      }
      if (dlongMin_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DlongMin);
      }
      if (dshortMin_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DshortMin);
      }
      if (ShortEnabledFlag != false) {
        size += 1 + 1;
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Exchange.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Exchange);
      }
      if (nominal_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Nominal);
      }
      if (CountryOfRisk.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(CountryOfRisk);
      }
      if (CountryOfRiskName.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(CountryOfRiskName);
      }
      if (TradingStatus != global::Tinkoff.InvestApi.V1.SecurityTradingStatus.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) TradingStatus);
      }
      if (OtcFlag != false) {
        size += 2 + 1;
      }
      if (BuyAvailableFlag != false) {
        size += 2 + 1;
      }
      if (SellAvailableFlag != false) {
        size += 2 + 1;
      }
      if (IsoCurrencyName.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(IsoCurrencyName);
      }
      if (minPriceIncrement_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(MinPriceIncrement);
      }
      if (ApiTradeAvailableFlag != false) {
        size += 2 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(Currency other) {
      if (other == null) {
        return;
      }
      if (other.Figi.Length != 0) {
        Figi = other.Figi;
      }
      if (other.Ticker.Length != 0) {
        Ticker = other.Ticker;
      }
      if (other.ClassCode.Length != 0) {
        ClassCode = other.ClassCode;
      }
      if (other.Isin.Length != 0) {
        Isin = other.Isin;
      }
      if (other.Lot != 0) {
        Lot = other.Lot;
      }
      if (other.Currency_.Length != 0) {
        Currency_ = other.Currency_;
      }
      if (other.klong_ != null) {
        if (klong_ == null) {
          Klong = new global::Tinkoff.InvestApi.V1.Quotation();
        }
        Klong.MergeFrom(other.Klong);
      }
      if (other.kshort_ != null) {
        if (kshort_ == null) {
          Kshort = new global::Tinkoff.InvestApi.V1.Quotation();
        }
        Kshort.MergeFrom(other.Kshort);
      }
      if (other.dlong_ != null) {
        if (dlong_ == null) {
          Dlong = new global::Tinkoff.InvestApi.V1.Quotation();
        }
        Dlong.MergeFrom(other.Dlong);
      }
      if (other.dshort_ != null) {
        if (dshort_ == null) {
          Dshort = new global::Tinkoff.InvestApi.V1.Quotation();
        }
        Dshort.MergeFrom(other.Dshort);
      }
      if (other.dlongMin_ != null) {
        if (dlongMin_ == null) {
          DlongMin = new global::Tinkoff.InvestApi.V1.Quotation();
        }
        DlongMin.MergeFrom(other.DlongMin);
      }
      if (other.dshortMin_ != null) {
        if (dshortMin_ == null) {
          DshortMin = new global::Tinkoff.InvestApi.V1.Quotation();
        }
        DshortMin.MergeFrom(other.DshortMin);
      }
      if (other.ShortEnabledFlag != false) {
        ShortEnabledFlag = other.ShortEnabledFlag;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Exchange.Length != 0) {
        Exchange = other.Exchange;
      }
      if (other.nominal_ != null) {
        if (nominal_ == null) {
          Nominal = new global::Tinkoff.InvestApi.V1.MoneyValue();
        }
        Nominal.MergeFrom(other.Nominal);
      }
      if (other.CountryOfRisk.Length != 0) {
        CountryOfRisk = other.CountryOfRisk;
      }
      if (other.CountryOfRiskName.Length != 0) {
        CountryOfRiskName = other.CountryOfRiskName;
      }
      if (other.TradingStatus != global::Tinkoff.InvestApi.V1.SecurityTradingStatus.Unspecified) {
        TradingStatus = other.TradingStatus;
      }
      if (other.OtcFlag != false) {
        OtcFlag = other.OtcFlag;
      }
      if (other.BuyAvailableFlag != false) {
        BuyAvailableFlag = other.BuyAvailableFlag;
      }
      if (other.SellAvailableFlag != false) {
        SellAvailableFlag = other.SellAvailableFlag;
      }
      if (other.IsoCurrencyName.Length != 0) {
        IsoCurrencyName = other.IsoCurrencyName;
      }
      if (other.minPriceIncrement_ != null) {
        if (minPriceIncrement_ == null) {
          MinPriceIncrement = new global::Tinkoff.InvestApi.V1.Quotation();
        }
        MinPriceIncrement.MergeFrom(other.MinPriceIncrement);
      }
      if (other.ApiTradeAvailableFlag != false) {
        ApiTradeAvailableFlag = other.ApiTradeAvailableFlag;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Figi = input.ReadString();
            break;
          }
          case 18: {
            Ticker = input.ReadString();
            break;
          }
          case 26: {
            ClassCode = input.ReadString();
            break;
          }
          case 34: {
            Isin = input.ReadString();
            break;
          }
          case 40: {
            Lot = input.ReadInt32();
            break;
          }
          case 50: {
            Currency_ = input.ReadString();
            break;
          }
          case 58: {
            if (klong_ == null) {
              Klong = new global::Tinkoff.InvestApi.V1.Quotation();
            }
            input.ReadMessage(Klong);
            break;
          }
          case 66: {
            if (kshort_ == null) {
              Kshort = new global::Tinkoff.InvestApi.V1.Quotation();
            }
            input.ReadMessage(Kshort);
            break;
          }
          case 74: {
            if (dlong_ == null) {
              Dlong = new global::Tinkoff.InvestApi.V1.Quotation();
            }
            input.ReadMessage(Dlong);
            break;
          }
          case 82: {
            if (dshort_ == null) {
              Dshort = new global::Tinkoff.InvestApi.V1.Quotation();
            }
            input.ReadMessage(Dshort);
            break;
          }
          case 90: {
            if (dlongMin_ == null) {
              DlongMin = new global::Tinkoff.InvestApi.V1.Quotation();
            }
            input.ReadMessage(DlongMin);
            break;
          }
          case 98: {
            if (dshortMin_ == null) {
              DshortMin = new global::Tinkoff.InvestApi.V1.Quotation();
            }
            input.ReadMessage(DshortMin);
            break;
          }
          case 104: {
            ShortEnabledFlag = input.ReadBool();
            break;
          }
          case 122: {
            Name = input.ReadString();
            break;
          }
          case 130: {
            Exchange = input.ReadString();
            break;
          }
          case 138: {
            if (nominal_ == null) {
              Nominal = new global::Tinkoff.InvestApi.V1.MoneyValue();
            }
            input.ReadMessage(Nominal);
            break;
          }
          case 146: {
            CountryOfRisk = input.ReadString();
            break;
          }
          case 154: {
            CountryOfRiskName = input.ReadString();
            break;
          }
          case 160: {
            TradingStatus = (global::Tinkoff.InvestApi.V1.SecurityTradingStatus) input.ReadEnum();
            break;
          }
          case 168: {
            OtcFlag = input.ReadBool();
            break;
          }
          case 176: {
            BuyAvailableFlag = input.ReadBool();
            break;
          }
          case 184: {
            SellAvailableFlag = input.ReadBool();
            break;
          }
          case 194: {
            IsoCurrencyName = input.ReadString();
            break;
          }
          case 202: {
            if (minPriceIncrement_ == null) {
              MinPriceIncrement = new global::Tinkoff.InvestApi.V1.Quotation();
            }
            input.ReadMessage(MinPriceIncrement);
            break;
          }
          case 208: {
            ApiTradeAvailableFlag = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Figi = input.ReadString();
            break;
          }
          case 18: {
            Ticker = input.ReadString();
            break;
          }
          case 26: {
            ClassCode = input.ReadString();
            break;
          }
          case 34: {
            Isin = input.ReadString();
            break;
          }
          case 40: {
            Lot = input.ReadInt32();
            break;
          }
          case 50: {
            Currency_ = input.ReadString();
            break;
          }
          case 58: {
            if (klong_ == null) {
              Klong = new global::Tinkoff.InvestApi.V1.Quotation();
            }
            input.ReadMessage(Klong);
            break;
          }
          case 66: {
            if (kshort_ == null) {
              Kshort = new global::Tinkoff.InvestApi.V1.Quotation();
            }
            input.ReadMessage(Kshort);
            break;
          }
          case 74: {
            if (dlong_ == null) {
              Dlong = new global::Tinkoff.InvestApi.V1.Quotation();
            }
            input.ReadMessage(Dlong);
            break;
          }
          case 82: {
            if (dshort_ == null) {
              Dshort = new global::Tinkoff.InvestApi.V1.Quotation();
            }
            input.ReadMessage(Dshort);
            break;
          }
          case 90: {
            if (dlongMin_ == null) {
              DlongMin = new global::Tinkoff.InvestApi.V1.Quotation();
            }
            input.ReadMessage(DlongMin);
            break;
          }
          case 98: {
            if (dshortMin_ == null) {
              DshortMin = new global::Tinkoff.InvestApi.V1.Quotation();
            }
            input.ReadMessage(DshortMin);
            break;
          }
          case 104: {
            ShortEnabledFlag = input.ReadBool();
            break;
          }
          case 122: {
            Name = input.ReadString();
            break;
          }
          case 130: {
            Exchange = input.ReadString();
            break;
          }
          case 138: {
            if (nominal_ == null) {
              Nominal = new global::Tinkoff.InvestApi.V1.MoneyValue();
            }
            input.ReadMessage(Nominal);
            break;
          }
          case 146: {
            CountryOfRisk = input.ReadString();
            break;
          }
          case 154: {
            CountryOfRiskName = input.ReadString();
            break;
          }
          case 160: {
            TradingStatus = (global::Tinkoff.InvestApi.V1.SecurityTradingStatus) input.ReadEnum();
            break;
          }
          case 168: {
            OtcFlag = input.ReadBool();
            break;
          }
          case 176: {
            BuyAvailableFlag = input.ReadBool();
            break;
          }
          case 184: {
            SellAvailableFlag = input.ReadBool();
            break;
          }
          case 194: {
            IsoCurrencyName = input.ReadString();
            break;
          }
          case 202: {
            if (minPriceIncrement_ == null) {
              MinPriceIncrement = new global::Tinkoff.InvestApi.V1.Quotation();
            }
            input.ReadMessage(MinPriceIncrement);
            break;
          }
          case 208: {
            ApiTradeAvailableFlag = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///Объект передачи информации об инвестиционном фонде.
  /// </summary>
  public sealed partial class Etf : pb::IMessage<Etf>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Etf> _parser = new pb::MessageParser<Etf>(() => new Etf());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<Etf> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tinkoff.InvestApi.V1.InstrumentsReflection.Descriptor.MessageTypes[18]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Etf() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Etf(Etf other) : this() {
      figi_ = other.figi_;
      ticker_ = other.ticker_;
      classCode_ = other.classCode_;
      isin_ = other.isin_;
      lot_ = other.lot_;
      currency_ = other.currency_;
      klong_ = other.klong_ != null ? other.klong_.Clone() : null;
      kshort_ = other.kshort_ != null ? other.kshort_.Clone() : null;
      dlong_ = other.dlong_ != null ? other.dlong_.Clone() : null;
      dshort_ = other.dshort_ != null ? other.dshort_.Clone() : null;
      dlongMin_ = other.dlongMin_ != null ? other.dlongMin_.Clone() : null;
      dshortMin_ = other.dshortMin_ != null ? other.dshortMin_.Clone() : null;
      shortEnabledFlag_ = other.shortEnabledFlag_;
      name_ = other.name_;
      exchange_ = other.exchange_;
      fixedCommission_ = other.fixedCommission_ != null ? other.fixedCommission_.Clone() : null;
      focusType_ = other.focusType_;
      releasedDate_ = other.releasedDate_ != null ? other.releasedDate_.Clone() : null;
      numShares_ = other.numShares_ != null ? other.numShares_.Clone() : null;
      countryOfRisk_ = other.countryOfRisk_;
      countryOfRiskName_ = other.countryOfRiskName_;
      sector_ = other.sector_;
      rebalancingFreq_ = other.rebalancingFreq_;
      tradingStatus_ = other.tradingStatus_;
      otcFlag_ = other.otcFlag_;
      buyAvailableFlag_ = other.buyAvailableFlag_;
      sellAvailableFlag_ = other.sellAvailableFlag_;
      minPriceIncrement_ = other.minPriceIncrement_ != null ? other.minPriceIncrement_.Clone() : null;
      apiTradeAvailableFlag_ = other.apiTradeAvailableFlag_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Etf Clone() {
      return new Etf(this);
    }

    /// <summary>Field number for the "figi" field.</summary>
    public const int FigiFieldNumber = 1;
    private string figi_ = "";
    /// <summary>
    ///Figi-идентификатор инструмента.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Figi {
      get { return figi_; }
      set {
        figi_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ticker" field.</summary>
    public const int TickerFieldNumber = 2;
    private string ticker_ = "";
    /// <summary>
    ///Тикер инструмента.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Ticker {
      get { return ticker_; }
      set {
        ticker_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "class_code" field.</summary>
    public const int ClassCodeFieldNumber = 3;
    private string classCode_ = "";
    /// <summary>
    ///Класс-код (секция торгов).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string ClassCode {
      get { return classCode_; }
      set {
        classCode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "isin" field.</summary>
    public const int IsinFieldNumber = 4;
    private string isin_ = "";
    /// <summary>
    ///Isin-идентификатор инструмента.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Isin {
      get { return isin_; }
      set {
        isin_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "lot" field.</summary>
    public const int LotFieldNumber = 5;
    private int lot_;
    /// <summary>
    ///Лотность инструмента. Возможно совершение операций только на количества ценной бумаги, кратные параметру *lot*. Подробнее: [лот](https://tinkoff.github.io/investAPI/glossary#lot)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Lot {
      get { return lot_; }
      set {
        lot_ = value;
      }
    }

    /// <summary>Field number for the "currency" field.</summary>
    public const int CurrencyFieldNumber = 6;
    private string currency_ = "";
    /// <summary>
    ///Валюта расчётов.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Currency {
      get { return currency_; }
      set {
        currency_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "klong" field.</summary>
    public const int KlongFieldNumber = 7;
    private global::Tinkoff.InvestApi.V1.Quotation klong_;
    /// <summary>
    ///Коэффициент ставки риска длинной позиции по инструменту.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Tinkoff.InvestApi.V1.Quotation Klong {
      get { return klong_; }
      set {
        klong_ = value;
      }
    }

    /// <summary>Field number for the "kshort" field.</summary>
    public const int KshortFieldNumber = 8;
    private global::Tinkoff.InvestApi.V1.Quotation kshort_;
    /// <summary>
    ///Коэффициент ставки риска короткой позиции по инструменту.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Tinkoff.InvestApi.V1.Quotation Kshort {
      get { return kshort_; }
      set {
        kshort_ = value;
      }
    }

    /// <summary>Field number for the "dlong" field.</summary>
    public const int DlongFieldNumber = 9;
    private global::Tinkoff.InvestApi.V1.Quotation dlong_;
    /// <summary>
    ///Ставка риска минимальной маржи в лонг. Подробнее: [ставка риска в лонг](https://help.tinkoff.ru/margin-trade/long/risk-rate/)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Tinkoff.InvestApi.V1.Quotation Dlong {
      get { return dlong_; }
      set {
        dlong_ = value;
      }
    }

    /// <summary>Field number for the "dshort" field.</summary>
    public const int DshortFieldNumber = 10;
    private global::Tinkoff.InvestApi.V1.Quotation dshort_;
    /// <summary>
    ///Ставка риска минимальной маржи в шорт. Подробнее: [ставка риска в шорт](https://help.tinkoff.ru/margin-trade/short/risk-rate/)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Tinkoff.InvestApi.V1.Quotation Dshort {
      get { return dshort_; }
      set {
        dshort_ = value;
      }
    }

    /// <summary>Field number for the "dlong_min" field.</summary>
    public const int DlongMinFieldNumber = 11;
    private global::Tinkoff.InvestApi.V1.Quotation dlongMin_;
    /// <summary>
    ///Ставка риска начальной маржи в лонг. Подробнее: [ставка риска в лонг](https://help.tinkoff.ru/margin-trade/long/risk-rate/)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Tinkoff.InvestApi.V1.Quotation DlongMin {
      get { return dlongMin_; }
      set {
        dlongMin_ = value;
      }
    }

    /// <summary>Field number for the "dshort_min" field.</summary>
    public const int DshortMinFieldNumber = 12;
    private global::Tinkoff.InvestApi.V1.Quotation dshortMin_;
    /// <summary>
    ///Ставка риска начальной маржи в шорт. Подробнее: [ставка риска в шорт](https://help.tinkoff.ru/margin-trade/short/risk-rate/)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Tinkoff.InvestApi.V1.Quotation DshortMin {
      get { return dshortMin_; }
      set {
        dshortMin_ = value;
      }
    }

    /// <summary>Field number for the "short_enabled_flag" field.</summary>
    public const int ShortEnabledFlagFieldNumber = 13;
    private bool shortEnabledFlag_;
    /// <summary>
    ///Признак доступности для операций в шорт.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool ShortEnabledFlag {
      get { return shortEnabledFlag_; }
      set {
        shortEnabledFlag_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 15;
    private string name_ = "";
    /// <summary>
    ///Название инструмента.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "exchange" field.</summary>
    public const int ExchangeFieldNumber = 16;
    private string exchange_ = "";
    /// <summary>
    ///Торговая площадка.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Exchange {
      get { return exchange_; }
      set {
        exchange_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "fixed_commission" field.</summary>
    public const int FixedCommissionFieldNumber = 17;
    private global::Tinkoff.InvestApi.V1.Quotation fixedCommission_;
    /// <summary>
    ///Размер фиксированной комиссии фонда.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Tinkoff.InvestApi.V1.Quotation FixedCommission {
      get { return fixedCommission_; }
      set {
        fixedCommission_ = value;
      }
    }

    /// <summary>Field number for the "focus_type" field.</summary>
    public const int FocusTypeFieldNumber = 18;
    private string focusType_ = "";
    /// <summary>
    ///Возможные значения: &lt;/br>**equity** — акции;&lt;/br>**fixed_income** — облигации;&lt;/br>**mixed_allocation** — смешанный;&lt;/br>**money_market** — денежный рынок;&lt;/br>**real_estate** — недвижимость;&lt;/br>**commodity** — товары;&lt;/br>**specialty** — специальный;&lt;/br>**private_equity** — private equity;&lt;/br>**alternative_investment** — альтернативные инвестиции.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string FocusType {
      get { return focusType_; }
      set {
        focusType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "released_date" field.</summary>
    public const int ReleasedDateFieldNumber = 19;
    private global::Google.Protobuf.WellKnownTypes.Timestamp releasedDate_;
    /// <summary>
    ///Дата выпуска в часовом поясе UTC.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.WellKnownTypes.Timestamp ReleasedDate {
      get { return releasedDate_; }
      set {
        releasedDate_ = value;
      }
    }

    /// <summary>Field number for the "num_shares" field.</summary>
    public const int NumSharesFieldNumber = 20;
    private global::Tinkoff.InvestApi.V1.Quotation numShares_;
    /// <summary>
    ///Количество акций фонда в обращении.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Tinkoff.InvestApi.V1.Quotation NumShares {
      get { return numShares_; }
      set {
        numShares_ = value;
      }
    }

    /// <summary>Field number for the "country_of_risk" field.</summary>
    public const int CountryOfRiskFieldNumber = 21;
    private string countryOfRisk_ = "";
    /// <summary>
    ///Код страны эмитента.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string CountryOfRisk {
      get { return countryOfRisk_; }
      set {
        countryOfRisk_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "country_of_risk_name" field.</summary>
    public const int CountryOfRiskNameFieldNumber = 22;
    private string countryOfRiskName_ = "";
    /// <summary>
    ///Наименование страны эмитента.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string CountryOfRiskName {
      get { return countryOfRiskName_; }
      set {
        countryOfRiskName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "sector" field.</summary>
    public const int SectorFieldNumber = 23;
    private string sector_ = "";
    /// <summary>
    ///Сектор экономики.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Sector {
      get { return sector_; }
      set {
        sector_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "rebalancing_freq" field.</summary>
    public const int RebalancingFreqFieldNumber = 24;
    private string rebalancingFreq_ = "";
    /// <summary>
    ///Частота ребалансировки.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string RebalancingFreq {
      get { return rebalancingFreq_; }
      set {
        rebalancingFreq_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "trading_status" field.</summary>
    public const int TradingStatusFieldNumber = 25;
    private global::Tinkoff.InvestApi.V1.SecurityTradingStatus tradingStatus_ = global::Tinkoff.InvestApi.V1.SecurityTradingStatus.Unspecified;
    /// <summary>
    ///Текущий режим торгов инструмента.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Tinkoff.InvestApi.V1.SecurityTradingStatus TradingStatus {
      get { return tradingStatus_; }
      set {
        tradingStatus_ = value;
      }
    }

    /// <summary>Field number for the "otc_flag" field.</summary>
    public const int OtcFlagFieldNumber = 26;
    private bool otcFlag_;
    /// <summary>
    ///Признак внебиржевой ценной бумаги.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool OtcFlag {
      get { return otcFlag_; }
      set {
        otcFlag_ = value;
      }
    }

    /// <summary>Field number for the "buy_available_flag" field.</summary>
    public const int BuyAvailableFlagFieldNumber = 27;
    private bool buyAvailableFlag_;
    /// <summary>
    ///Признак доступности для покупки.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool BuyAvailableFlag {
      get { return buyAvailableFlag_; }
      set {
        buyAvailableFlag_ = value;
      }
    }

    /// <summary>Field number for the "sell_available_flag" field.</summary>
    public const int SellAvailableFlagFieldNumber = 28;
    private bool sellAvailableFlag_;
    /// <summary>
    ///Признак доступности для продажи.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool SellAvailableFlag {
      get { return sellAvailableFlag_; }
      set {
        sellAvailableFlag_ = value;
      }
    }

    /// <summary>Field number for the "min_price_increment" field.</summary>
    public const int MinPriceIncrementFieldNumber = 29;
    private global::Tinkoff.InvestApi.V1.Quotation minPriceIncrement_;
    /// <summary>
    ///Шаг цены.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Tinkoff.InvestApi.V1.Quotation MinPriceIncrement {
      get { return minPriceIncrement_; }
      set {
        minPriceIncrement_ = value;
      }
    }

    /// <summary>Field number for the "api_trade_available_flag" field.</summary>
    public const int ApiTradeAvailableFlagFieldNumber = 30;
    private bool apiTradeAvailableFlag_;
    /// <summary>
    ///Признак доступности торгов через API.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool ApiTradeAvailableFlag {
      get { return apiTradeAvailableFlag_; }
      set {
        apiTradeAvailableFlag_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as Etf);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(Etf other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Figi != other.Figi) return false;
      if (Ticker != other.Ticker) return false;
      if (ClassCode != other.ClassCode) return false;
      if (Isin != other.Isin) return false;
      if (Lot != other.Lot) return false;
      if (Currency != other.Currency) return false;
      if (!object.Equals(Klong, other.Klong)) return false;
      if (!object.Equals(Kshort, other.Kshort)) return false;
      if (!object.Equals(Dlong, other.Dlong)) return false;
      if (!object.Equals(Dshort, other.Dshort)) return false;
      if (!object.Equals(DlongMin, other.DlongMin)) return false;
      if (!object.Equals(DshortMin, other.DshortMin)) return false;
      if (ShortEnabledFlag != other.ShortEnabledFlag) return false;
      if (Name != other.Name) return false;
      if (Exchange != other.Exchange) return false;
      if (!object.Equals(FixedCommission, other.FixedCommission)) return false;
      if (FocusType != other.FocusType) return false;
      if (!object.Equals(ReleasedDate, other.ReleasedDate)) return false;
      if (!object.Equals(NumShares, other.NumShares)) return false;
      if (CountryOfRisk != other.CountryOfRisk) return false;
      if (CountryOfRiskName != other.CountryOfRiskName) return false;
      if (Sector != other.Sector) return false;
      if (RebalancingFreq != other.RebalancingFreq) return false;
      if (TradingStatus != other.TradingStatus) return false;
      if (OtcFlag != other.OtcFlag) return false;
      if (BuyAvailableFlag != other.BuyAvailableFlag) return false;
      if (SellAvailableFlag != other.SellAvailableFlag) return false;
      if (!object.Equals(MinPriceIncrement, other.MinPriceIncrement)) return false;
      if (ApiTradeAvailableFlag != other.ApiTradeAvailableFlag) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (Figi.Length != 0) hash ^= Figi.GetHashCode();
      if (Ticker.Length != 0) hash ^= Ticker.GetHashCode();
      if (ClassCode.Length != 0) hash ^= ClassCode.GetHashCode();
      if (Isin.Length != 0) hash ^= Isin.GetHashCode();
      if (Lot != 0) hash ^= Lot.GetHashCode();
      if (Currency.Length != 0) hash ^= Currency.GetHashCode();
      if (klong_ != null) hash ^= Klong.GetHashCode();
      if (kshort_ != null) hash ^= Kshort.GetHashCode();
      if (dlong_ != null) hash ^= Dlong.GetHashCode();
      if (dshort_ != null) hash ^= Dshort.GetHashCode();
      if (dlongMin_ != null) hash ^= DlongMin.GetHashCode();
      if (dshortMin_ != null) hash ^= DshortMin.GetHashCode();
      if (ShortEnabledFlag != false) hash ^= ShortEnabledFlag.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Exchange.Length != 0) hash ^= Exchange.GetHashCode();
      if (fixedCommission_ != null) hash ^= FixedCommission.GetHashCode();
      if (FocusType.Length != 0) hash ^= FocusType.GetHashCode();
      if (releasedDate_ != null) hash ^= ReleasedDate.GetHashCode();
      if (numShares_ != null) hash ^= NumShares.GetHashCode();
      if (CountryOfRisk.Length != 0) hash ^= CountryOfRisk.GetHashCode();
      if (CountryOfRiskName.Length != 0) hash ^= CountryOfRiskName.GetHashCode();
      if (Sector.Length != 0) hash ^= Sector.GetHashCode();
      if (RebalancingFreq.Length != 0) hash ^= RebalancingFreq.GetHashCode();
      if (TradingStatus != global::Tinkoff.InvestApi.V1.SecurityTradingStatus.Unspecified) hash ^= TradingStatus.GetHashCode();
      if (OtcFlag != false) hash ^= OtcFlag.GetHashCode();
      if (BuyAvailableFlag != false) hash ^= BuyAvailableFlag.GetHashCode();
      if (SellAvailableFlag != false) hash ^= SellAvailableFlag.GetHashCode();
      if (minPriceIncrement_ != null) hash ^= MinPriceIncrement.GetHashCode();
      if (ApiTradeAvailableFlag != false) hash ^= ApiTradeAvailableFlag.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Figi.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Figi);
      }
      if (Ticker.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Ticker);
      }
      if (ClassCode.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(ClassCode);
      }
      if (Isin.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Isin);
      }
      if (Lot != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Lot);
      }
      if (Currency.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Currency);
      }
      if (klong_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(Klong);
      }
      if (kshort_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(Kshort);
      }
      if (dlong_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(Dlong);
      }
      if (dshort_ != null) {
        output.WriteRawTag(82);
        output.WriteMessage(Dshort);
      }
      if (dlongMin_ != null) {
        output.WriteRawTag(90);
        output.WriteMessage(DlongMin);
      }
      if (dshortMin_ != null) {
        output.WriteRawTag(98);
        output.WriteMessage(DshortMin);
      }
      if (ShortEnabledFlag != false) {
        output.WriteRawTag(104);
        output.WriteBool(ShortEnabledFlag);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(122);
        output.WriteString(Name);
      }
      if (Exchange.Length != 0) {
        output.WriteRawTag(130, 1);
        output.WriteString(Exchange);
      }
      if (fixedCommission_ != null) {
        output.WriteRawTag(138, 1);
        output.WriteMessage(FixedCommission);
      }
      if (FocusType.Length != 0) {
        output.WriteRawTag(146, 1);
        output.WriteString(FocusType);
      }
      if (releasedDate_ != null) {
        output.WriteRawTag(154, 1);
        output.WriteMessage(ReleasedDate);
      }
      if (numShares_ != null) {
        output.WriteRawTag(162, 1);
        output.WriteMessage(NumShares);
      }
      if (CountryOfRisk.Length != 0) {
        output.WriteRawTag(170, 1);
        output.WriteString(CountryOfRisk);
      }
      if (CountryOfRiskName.Length != 0) {
        output.WriteRawTag(178, 1);
        output.WriteString(CountryOfRiskName);
      }
      if (Sector.Length != 0) {
        output.WriteRawTag(186, 1);
        output.WriteString(Sector);
      }
      if (RebalancingFreq.Length != 0) {
        output.WriteRawTag(194, 1);
        output.WriteString(RebalancingFreq);
      }
      if (TradingStatus != global::Tinkoff.InvestApi.V1.SecurityTradingStatus.Unspecified) {
        output.WriteRawTag(200, 1);
        output.WriteEnum((int) TradingStatus);
      }
      if (OtcFlag != false) {
        output.WriteRawTag(208, 1);
        output.WriteBool(OtcFlag);
      }
      if (BuyAvailableFlag != false) {
        output.WriteRawTag(216, 1);
        output.WriteBool(BuyAvailableFlag);
      }
      if (SellAvailableFlag != false) {
        output.WriteRawTag(224, 1);
        output.WriteBool(SellAvailableFlag);
      }
      if (minPriceIncrement_ != null) {
        output.WriteRawTag(234, 1);
        output.WriteMessage(MinPriceIncrement);
      }
      if (ApiTradeAvailableFlag != false) {
        output.WriteRawTag(240, 1);
        output.WriteBool(ApiTradeAvailableFlag);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Figi.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Figi);
      }
      if (Ticker.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Ticker);
      }
      if (ClassCode.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(ClassCode);
      }
      if (Isin.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Isin);
      }
      if (Lot != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Lot);
      }
      if (Currency.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Currency);
      }
      if (klong_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(Klong);
      }
      if (kshort_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(Kshort);
      }
      if (dlong_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(Dlong);
      }
      if (dshort_ != null) {
        output.WriteRawTag(82);
        output.WriteMessage(Dshort);
      }
      if (dlongMin_ != null) {
        output.WriteRawTag(90);
        output.WriteMessage(DlongMin);
      }
      if (dshortMin_ != null) {
        output.WriteRawTag(98);
        output.WriteMessage(DshortMin);
      }
      if (ShortEnabledFlag != false) {
        output.WriteRawTag(104);
        output.WriteBool(ShortEnabledFlag);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(122);
        output.WriteString(Name);
      }
      if (Exchange.Length != 0) {
        output.WriteRawTag(130, 1);
        output.WriteString(Exchange);
      }
      if (fixedCommission_ != null) {
        output.WriteRawTag(138, 1);
        output.WriteMessage(FixedCommission);
      }
      if (FocusType.Length != 0) {
        output.WriteRawTag(146, 1);
        output.WriteString(FocusType);
      }
      if (releasedDate_ != null) {
        output.WriteRawTag(154, 1);
        output.WriteMessage(ReleasedDate);
      }
      if (numShares_ != null) {
        output.WriteRawTag(162, 1);
        output.WriteMessage(NumShares);
      }
      if (CountryOfRisk.Length != 0) {
        output.WriteRawTag(170, 1);
        output.WriteString(CountryOfRisk);
      }
      if (CountryOfRiskName.Length != 0) {
        output.WriteRawTag(178, 1);
        output.WriteString(CountryOfRiskName);
      }
      if (Sector.Length != 0) {
        output.WriteRawTag(186, 1);
        output.WriteString(Sector);
      }
      if (RebalancingFreq.Length != 0) {
        output.WriteRawTag(194, 1);
        output.WriteString(RebalancingFreq);
      }
      if (TradingStatus != global::Tinkoff.InvestApi.V1.SecurityTradingStatus.Unspecified) {
        output.WriteRawTag(200, 1);
        output.WriteEnum((int) TradingStatus);
      }
      if (OtcFlag != false) {
        output.WriteRawTag(208, 1);
        output.WriteBool(OtcFlag);
      }
      if (BuyAvailableFlag != false) {
        output.WriteRawTag(216, 1);
        output.WriteBool(BuyAvailableFlag);
      }
      if (SellAvailableFlag != false) {
        output.WriteRawTag(224, 1);
        output.WriteBool(SellAvailableFlag);
      }
      if (minPriceIncrement_ != null) {
        output.WriteRawTag(234, 1);
        output.WriteMessage(MinPriceIncrement);
      }
      if (ApiTradeAvailableFlag != false) {
        output.WriteRawTag(240, 1);
        output.WriteBool(ApiTradeAvailableFlag);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (Figi.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Figi);
      }
      if (Ticker.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Ticker);
      }
      if (ClassCode.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ClassCode);
      }
      if (Isin.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Isin);
      }
      if (Lot != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Lot);
      }
      if (Currency.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Currency);
      }
      if (klong_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Klong);
      }
      if (kshort_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Kshort);
      }
      if (dlong_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Dlong);
      }
      if (dshort_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Dshort);
      }
      if (dlongMin_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DlongMin);
      }
      if (dshortMin_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DshortMin);
      }
      if (ShortEnabledFlag != false) {
        size += 1 + 1;
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Exchange.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Exchange);
      }
      if (fixedCommission_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(FixedCommission);
      }
      if (FocusType.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(FocusType);
      }
      if (releasedDate_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(ReleasedDate);
      }
      if (numShares_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(NumShares);
      }
      if (CountryOfRisk.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(CountryOfRisk);
      }
      if (CountryOfRiskName.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(CountryOfRiskName);
      }
      if (Sector.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Sector);
      }
      if (RebalancingFreq.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(RebalancingFreq);
      }
      if (TradingStatus != global::Tinkoff.InvestApi.V1.SecurityTradingStatus.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) TradingStatus);
      }
      if (OtcFlag != false) {
        size += 2 + 1;
      }
      if (BuyAvailableFlag != false) {
        size += 2 + 1;
      }
      if (SellAvailableFlag != false) {
        size += 2 + 1;
      }
      if (minPriceIncrement_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(MinPriceIncrement);
      }
      if (ApiTradeAvailableFlag != false) {
        size += 2 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(Etf other) {
      if (other == null) {
        return;
      }
      if (other.Figi.Length != 0) {
        Figi = other.Figi;
      }
      if (other.Ticker.Length != 0) {
        Ticker = other.Ticker;
      }
      if (other.ClassCode.Length != 0) {
        ClassCode = other.ClassCode;
      }
      if (other.Isin.Length != 0) {
        Isin = other.Isin;
      }
      if (other.Lot != 0) {
        Lot = other.Lot;
      }
      if (other.Currency.Length != 0) {
        Currency = other.Currency;
      }
      if (other.klong_ != null) {
        if (klong_ == null) {
          Klong = new global::Tinkoff.InvestApi.V1.Quotation();
        }
        Klong.MergeFrom(other.Klong);
      }
      if (other.kshort_ != null) {
        if (kshort_ == null) {
          Kshort = new global::Tinkoff.InvestApi.V1.Quotation();
        }
        Kshort.MergeFrom(other.Kshort);
      }
      if (other.dlong_ != null) {
        if (dlong_ == null) {
          Dlong = new global::Tinkoff.InvestApi.V1.Quotation();
        }
        Dlong.MergeFrom(other.Dlong);
      }
      if (other.dshort_ != null) {
        if (dshort_ == null) {
          Dshort = new global::Tinkoff.InvestApi.V1.Quotation();
        }
        Dshort.MergeFrom(other.Dshort);
      }
      if (other.dlongMin_ != null) {
        if (dlongMin_ == null) {
          DlongMin = new global::Tinkoff.InvestApi.V1.Quotation();
        }
        DlongMin.MergeFrom(other.DlongMin);
      }
      if (other.dshortMin_ != null) {
        if (dshortMin_ == null) {
          DshortMin = new global::Tinkoff.InvestApi.V1.Quotation();
        }
        DshortMin.MergeFrom(other.DshortMin);
      }
      if (other.ShortEnabledFlag != false) {
        ShortEnabledFlag = other.ShortEnabledFlag;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Exchange.Length != 0) {
        Exchange = other.Exchange;
      }
      if (other.fixedCommission_ != null) {
        if (fixedCommission_ == null) {
          FixedCommission = new global::Tinkoff.InvestApi.V1.Quotation();
        }
        FixedCommission.MergeFrom(other.FixedCommission);
      }
      if (other.FocusType.Length != 0) {
        FocusType = other.FocusType;
      }
      if (other.releasedDate_ != null) {
        if (releasedDate_ == null) {
          ReleasedDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        ReleasedDate.MergeFrom(other.ReleasedDate);
      }
      if (other.numShares_ != null) {
        if (numShares_ == null) {
          NumShares = new global::Tinkoff.InvestApi.V1.Quotation();
        }
        NumShares.MergeFrom(other.NumShares);
      }
      if (other.CountryOfRisk.Length != 0) {
        CountryOfRisk = other.CountryOfRisk;
      }
      if (other.CountryOfRiskName.Length != 0) {
        CountryOfRiskName = other.CountryOfRiskName;
      }
      if (other.Sector.Length != 0) {
        Sector = other.Sector;
      }
      if (other.RebalancingFreq.Length != 0) {
        RebalancingFreq = other.RebalancingFreq;
      }
      if (other.TradingStatus != global::Tinkoff.InvestApi.V1.SecurityTradingStatus.Unspecified) {
        TradingStatus = other.TradingStatus;
      }
      if (other.OtcFlag != false) {
        OtcFlag = other.OtcFlag;
      }
      if (other.BuyAvailableFlag != false) {
        BuyAvailableFlag = other.BuyAvailableFlag;
      }
      if (other.SellAvailableFlag != false) {
        SellAvailableFlag = other.SellAvailableFlag;
      }
      if (other.minPriceIncrement_ != null) {
        if (minPriceIncrement_ == null) {
          MinPriceIncrement = new global::Tinkoff.InvestApi.V1.Quotation();
        }
        MinPriceIncrement.MergeFrom(other.MinPriceIncrement);
      }
      if (other.ApiTradeAvailableFlag != false) {
        ApiTradeAvailableFlag = other.ApiTradeAvailableFlag;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Figi = input.ReadString();
            break;
          }
          case 18: {
            Ticker = input.ReadString();
            break;
          }
          case 26: {
            ClassCode = input.ReadString();
            break;
          }
          case 34: {
            Isin = input.ReadString();
            break;
          }
          case 40: {
            Lot = input.ReadInt32();
            break;
          }
          case 50: {
            Currency = input.ReadString();
            break;
          }
          case 58: {
            if (klong_ == null) {
              Klong = new global::Tinkoff.InvestApi.V1.Quotation();
            }
            input.ReadMessage(Klong);
            break;
          }
          case 66: {
            if (kshort_ == null) {
              Kshort = new global::Tinkoff.InvestApi.V1.Quotation();
            }
            input.ReadMessage(Kshort);
            break;
          }
          case 74: {
            if (dlong_ == null) {
              Dlong = new global::Tinkoff.InvestApi.V1.Quotation();
            }
            input.ReadMessage(Dlong);
            break;
          }
          case 82: {
            if (dshort_ == null) {
              Dshort = new global::Tinkoff.InvestApi.V1.Quotation();
            }
            input.ReadMessage(Dshort);
            break;
          }
          case 90: {
            if (dlongMin_ == null) {
              DlongMin = new global::Tinkoff.InvestApi.V1.Quotation();
            }
            input.ReadMessage(DlongMin);
            break;
          }
          case 98: {
            if (dshortMin_ == null) {
              DshortMin = new global::Tinkoff.InvestApi.V1.Quotation();
            }
            input.ReadMessage(DshortMin);
            break;
          }
          case 104: {
            ShortEnabledFlag = input.ReadBool();
            break;
          }
          case 122: {
            Name = input.ReadString();
            break;
          }
          case 130: {
            Exchange = input.ReadString();
            break;
          }
          case 138: {
            if (fixedCommission_ == null) {
              FixedCommission = new global::Tinkoff.InvestApi.V1.Quotation();
            }
            input.ReadMessage(FixedCommission);
            break;
          }
          case 146: {
            FocusType = input.ReadString();
            break;
          }
          case 154: {
            if (releasedDate_ == null) {
              ReleasedDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(ReleasedDate);
            break;
          }
          case 162: {
            if (numShares_ == null) {
              NumShares = new global::Tinkoff.InvestApi.V1.Quotation();
            }
            input.ReadMessage(NumShares);
            break;
          }
          case 170: {
            CountryOfRisk = input.ReadString();
            break;
          }
          case 178: {
            CountryOfRiskName = input.ReadString();
            break;
          }
          case 186: {
            Sector = input.ReadString();
            break;
          }
          case 194: {
            RebalancingFreq = input.ReadString();
            break;
          }
          case 200: {
            TradingStatus = (global::Tinkoff.InvestApi.V1.SecurityTradingStatus) input.ReadEnum();
            break;
          }
          case 208: {
            OtcFlag = input.ReadBool();
            break;
          }
          case 216: {
            BuyAvailableFlag = input.ReadBool();
            break;
          }
          case 224: {
            SellAvailableFlag = input.ReadBool();
            break;
          }
          case 234: {
            if (minPriceIncrement_ == null) {
              MinPriceIncrement = new global::Tinkoff.InvestApi.V1.Quotation();
            }
            input.ReadMessage(MinPriceIncrement);
            break;
          }
          case 240: {
            ApiTradeAvailableFlag = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Figi = input.ReadString();
            break;
          }
          case 18: {
            Ticker = input.ReadString();
            break;
          }
          case 26: {
            ClassCode = input.ReadString();
            break;
          }
          case 34: {
            Isin = input.ReadString();
            break;
          }
          case 40: {
            Lot = input.ReadInt32();
            break;
          }
          case 50: {
            Currency = input.ReadString();
            break;
          }
          case 58: {
            if (klong_ == null) {
              Klong = new global::Tinkoff.InvestApi.V1.Quotation();
            }
            input.ReadMessage(Klong);
            break;
          }
          case 66: {
            if (kshort_ == null) {
              Kshort = new global::Tinkoff.InvestApi.V1.Quotation();
            }
            input.ReadMessage(Kshort);
            break;
          }
          case 74: {
            if (dlong_ == null) {
              Dlong = new global::Tinkoff.InvestApi.V1.Quotation();
            }
            input.ReadMessage(Dlong);
            break;
          }
          case 82: {
            if (dshort_ == null) {
              Dshort = new global::Tinkoff.InvestApi.V1.Quotation();
            }
            input.ReadMessage(Dshort);
            break;
          }
          case 90: {
            if (dlongMin_ == null) {
              DlongMin = new global::Tinkoff.InvestApi.V1.Quotation();
            }
            input.ReadMessage(DlongMin);
            break;
          }
          case 98: {
            if (dshortMin_ == null) {
              DshortMin = new global::Tinkoff.InvestApi.V1.Quotation();
            }
            input.ReadMessage(DshortMin);
            break;
          }
          case 104: {
            ShortEnabledFlag = input.ReadBool();
            break;
          }
          case 122: {
            Name = input.ReadString();
            break;
          }
          case 130: {
            Exchange = input.ReadString();
            break;
          }
          case 138: {
            if (fixedCommission_ == null) {
              FixedCommission = new global::Tinkoff.InvestApi.V1.Quotation();
            }
            input.ReadMessage(FixedCommission);
            break;
          }
          case 146: {
            FocusType = input.ReadString();
            break;
          }
          case 154: {
            if (releasedDate_ == null) {
              ReleasedDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(ReleasedDate);
            break;
          }
          case 162: {
            if (numShares_ == null) {
              NumShares = new global::Tinkoff.InvestApi.V1.Quotation();
            }
            input.ReadMessage(NumShares);
            break;
          }
          case 170: {
            CountryOfRisk = input.ReadString();
            break;
          }
          case 178: {
            CountryOfRiskName = input.ReadString();
            break;
          }
          case 186: {
            Sector = input.ReadString();
            break;
          }
          case 194: {
            RebalancingFreq = input.ReadString();
            break;
          }
          case 200: {
            TradingStatus = (global::Tinkoff.InvestApi.V1.SecurityTradingStatus) input.ReadEnum();
            break;
          }
          case 208: {
            OtcFlag = input.ReadBool();
            break;
          }
          case 216: {
            BuyAvailableFlag = input.ReadBool();
            break;
          }
          case 224: {
            SellAvailableFlag = input.ReadBool();
            break;
          }
          case 234: {
            if (minPriceIncrement_ == null) {
              MinPriceIncrement = new global::Tinkoff.InvestApi.V1.Quotation();
            }
            input.ReadMessage(MinPriceIncrement);
            break;
          }
          case 240: {
            ApiTradeAvailableFlag = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///Объект передачи информации о фьючерсе.
  /// </summary>
  public sealed partial class Future : pb::IMessage<Future>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Future> _parser = new pb::MessageParser<Future>(() => new Future());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<Future> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tinkoff.InvestApi.V1.InstrumentsReflection.Descriptor.MessageTypes[19]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Future() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Future(Future other) : this() {
      figi_ = other.figi_;
      ticker_ = other.ticker_;
      classCode_ = other.classCode_;
      lot_ = other.lot_;
      currency_ = other.currency_;
      klong_ = other.klong_ != null ? other.klong_.Clone() : null;
      kshort_ = other.kshort_ != null ? other.kshort_.Clone() : null;
      dlong_ = other.dlong_ != null ? other.dlong_.Clone() : null;
      dshort_ = other.dshort_ != null ? other.dshort_.Clone() : null;
      dlongMin_ = other.dlongMin_ != null ? other.dlongMin_.Clone() : null;
      dshortMin_ = other.dshortMin_ != null ? other.dshortMin_.Clone() : null;
      shortEnabledFlag_ = other.shortEnabledFlag_;
      name_ = other.name_;
      exchange_ = other.exchange_;
      firstTradeDate_ = other.firstTradeDate_ != null ? other.firstTradeDate_.Clone() : null;
      lastTradeDate_ = other.lastTradeDate_ != null ? other.lastTradeDate_.Clone() : null;
      futuresType_ = other.futuresType_;
      assetType_ = other.assetType_;
      basicAsset_ = other.basicAsset_;
      basicAssetSize_ = other.basicAssetSize_ != null ? other.basicAssetSize_.Clone() : null;
      countryOfRisk_ = other.countryOfRisk_;
      countryOfRiskName_ = other.countryOfRiskName_;
      sector_ = other.sector_;
      expirationDate_ = other.expirationDate_ != null ? other.expirationDate_.Clone() : null;
      tradingStatus_ = other.tradingStatus_;
      otcFlag_ = other.otcFlag_;
      buyAvailableFlag_ = other.buyAvailableFlag_;
      sellAvailableFlag_ = other.sellAvailableFlag_;
      minPriceIncrement_ = other.minPriceIncrement_ != null ? other.minPriceIncrement_.Clone() : null;
      apiTradeAvailableFlag_ = other.apiTradeAvailableFlag_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Future Clone() {
      return new Future(this);
    }

    /// <summary>Field number for the "figi" field.</summary>
    public const int FigiFieldNumber = 1;
    private string figi_ = "";
    /// <summary>
    ///Figi-идентификатор инструмента.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Figi {
      get { return figi_; }
      set {
        figi_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ticker" field.</summary>
    public const int TickerFieldNumber = 2;
    private string ticker_ = "";
    /// <summary>
    ///Тикер инструмента.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Ticker {
      get { return ticker_; }
      set {
        ticker_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "class_code" field.</summary>
    public const int ClassCodeFieldNumber = 3;
    private string classCode_ = "";
    /// <summary>
    ///Класс-код (секция торгов).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string ClassCode {
      get { return classCode_; }
      set {
        classCode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "lot" field.</summary>
    public const int LotFieldNumber = 4;
    private int lot_;
    /// <summary>
    ///Лотность инструмента. Возможно совершение операций только на количества ценной бумаги, кратные параметру *lot*. Подробнее: [лот](https://tinkoff.github.io/investAPI/glossary#lot)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Lot {
      get { return lot_; }
      set {
        lot_ = value;
      }
    }

    /// <summary>Field number for the "currency" field.</summary>
    public const int CurrencyFieldNumber = 5;
    private string currency_ = "";
    /// <summary>
    ///Валюта расчётов.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Currency {
      get { return currency_; }
      set {
        currency_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "klong" field.</summary>
    public const int KlongFieldNumber = 6;
    private global::Tinkoff.InvestApi.V1.Quotation klong_;
    /// <summary>
    ///Коэффициент ставки риска длинной позиции по клиенту.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Tinkoff.InvestApi.V1.Quotation Klong {
      get { return klong_; }
      set {
        klong_ = value;
      }
    }

    /// <summary>Field number for the "kshort" field.</summary>
    public const int KshortFieldNumber = 7;
    private global::Tinkoff.InvestApi.V1.Quotation kshort_;
    /// <summary>
    ///Коэффициент ставки риска короткой позиции по клиенту.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Tinkoff.InvestApi.V1.Quotation Kshort {
      get { return kshort_; }
      set {
        kshort_ = value;
      }
    }

    /// <summary>Field number for the "dlong" field.</summary>
    public const int DlongFieldNumber = 8;
    private global::Tinkoff.InvestApi.V1.Quotation dlong_;
    /// <summary>
    ///Ставка риска минимальной маржи в лонг. Подробнее: [ставка риска в лонг](https://help.tinkoff.ru/margin-trade/long/risk-rate/)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Tinkoff.InvestApi.V1.Quotation Dlong {
      get { return dlong_; }
      set {
        dlong_ = value;
      }
    }

    /// <summary>Field number for the "dshort" field.</summary>
    public const int DshortFieldNumber = 9;
    private global::Tinkoff.InvestApi.V1.Quotation dshort_;
    /// <summary>
    ///Ставка риска минимальной маржи в шорт. Подробнее: [ставка риска в шорт](https://help.tinkoff.ru/margin-trade/short/risk-rate/)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Tinkoff.InvestApi.V1.Quotation Dshort {
      get { return dshort_; }
      set {
        dshort_ = value;
      }
    }

    /// <summary>Field number for the "dlong_min" field.</summary>
    public const int DlongMinFieldNumber = 10;
    private global::Tinkoff.InvestApi.V1.Quotation dlongMin_;
    /// <summary>
    ///Ставка риска начальной маржи в лонг. Подробнее: [ставка риска в лонг](https://help.tinkoff.ru/margin-trade/long/risk-rate/)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Tinkoff.InvestApi.V1.Quotation DlongMin {
      get { return dlongMin_; }
      set {
        dlongMin_ = value;
      }
    }

    /// <summary>Field number for the "dshort_min" field.</summary>
    public const int DshortMinFieldNumber = 11;
    private global::Tinkoff.InvestApi.V1.Quotation dshortMin_;
    /// <summary>
    ///Ставка риска начальной маржи в шорт. Подробнее: [ставка риска в шорт](https://help.tinkoff.ru/margin-trade/short/risk-rate/)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Tinkoff.InvestApi.V1.Quotation DshortMin {
      get { return dshortMin_; }
      set {
        dshortMin_ = value;
      }
    }

    /// <summary>Field number for the "short_enabled_flag" field.</summary>
    public const int ShortEnabledFlagFieldNumber = 12;
    private bool shortEnabledFlag_;
    /// <summary>
    ///Признак доступности для операций шорт.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool ShortEnabledFlag {
      get { return shortEnabledFlag_; }
      set {
        shortEnabledFlag_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 13;
    private string name_ = "";
    /// <summary>
    ///Название инструмента.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "exchange" field.</summary>
    public const int ExchangeFieldNumber = 14;
    private string exchange_ = "";
    /// <summary>
    ///Торговая площадка.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Exchange {
      get { return exchange_; }
      set {
        exchange_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "first_trade_date" field.</summary>
    public const int FirstTradeDateFieldNumber = 15;
    private global::Google.Protobuf.WellKnownTypes.Timestamp firstTradeDate_;
    /// <summary>
    ///Дата начала обращения контракта в часовом поясе UTC.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.WellKnownTypes.Timestamp FirstTradeDate {
      get { return firstTradeDate_; }
      set {
        firstTradeDate_ = value;
      }
    }

    /// <summary>Field number for the "last_trade_date" field.</summary>
    public const int LastTradeDateFieldNumber = 16;
    private global::Google.Protobuf.WellKnownTypes.Timestamp lastTradeDate_;
    /// <summary>
    ///Дата в часовом поясе UTC, до которой возможно проведение операций с фьючерсом.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.WellKnownTypes.Timestamp LastTradeDate {
      get { return lastTradeDate_; }
      set {
        lastTradeDate_ = value;
      }
    }

    /// <summary>Field number for the "futures_type" field.</summary>
    public const int FuturesTypeFieldNumber = 17;
    private string futuresType_ = "";
    /// <summary>
    ///Тип фьючерса. Возможные значения: &lt;/br>**physical_delivery** — физические поставки; &lt;/br>**cash_settlement** — денежный эквивалент.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string FuturesType {
      get { return futuresType_; }
      set {
        futuresType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "asset_type" field.</summary>
    public const int AssetTypeFieldNumber = 18;
    private string assetType_ = "";
    /// <summary>
    ///Тип актива. Возможные значения: &lt;/br>**commodity** — товар; &lt;/br>**currency** — валюта; &lt;/br>**security** — ценная бумага; &lt;/br>**index** — индекс.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string AssetType {
      get { return assetType_; }
      set {
        assetType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "basic_asset" field.</summary>
    public const int BasicAssetFieldNumber = 19;
    private string basicAsset_ = "";
    /// <summary>
    ///Основной актив.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string BasicAsset {
      get { return basicAsset_; }
      set {
        basicAsset_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "basic_asset_size" field.</summary>
    public const int BasicAssetSizeFieldNumber = 20;
    private global::Tinkoff.InvestApi.V1.Quotation basicAssetSize_;
    /// <summary>
    ///Размер основного актива.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Tinkoff.InvestApi.V1.Quotation BasicAssetSize {
      get { return basicAssetSize_; }
      set {
        basicAssetSize_ = value;
      }
    }

    /// <summary>Field number for the "country_of_risk" field.</summary>
    public const int CountryOfRiskFieldNumber = 21;
    private string countryOfRisk_ = "";
    /// <summary>
    ///Код страны эмитента.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string CountryOfRisk {
      get { return countryOfRisk_; }
      set {
        countryOfRisk_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "country_of_risk_name" field.</summary>
    public const int CountryOfRiskNameFieldNumber = 22;
    private string countryOfRiskName_ = "";
    /// <summary>
    ///Наименование страны эмитента.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string CountryOfRiskName {
      get { return countryOfRiskName_; }
      set {
        countryOfRiskName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "sector" field.</summary>
    public const int SectorFieldNumber = 23;
    private string sector_ = "";
    /// <summary>
    ///Сектор экономики.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Sector {
      get { return sector_; }
      set {
        sector_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "expiration_date" field.</summary>
    public const int ExpirationDateFieldNumber = 24;
    private global::Google.Protobuf.WellKnownTypes.Timestamp expirationDate_;
    /// <summary>
    ///Дата истечения срока.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.WellKnownTypes.Timestamp ExpirationDate {
      get { return expirationDate_; }
      set {
        expirationDate_ = value;
      }
    }

    /// <summary>Field number for the "trading_status" field.</summary>
    public const int TradingStatusFieldNumber = 25;
    private global::Tinkoff.InvestApi.V1.SecurityTradingStatus tradingStatus_ = global::Tinkoff.InvestApi.V1.SecurityTradingStatus.Unspecified;
    /// <summary>
    ///Текущий режим торгов инструмента.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Tinkoff.InvestApi.V1.SecurityTradingStatus TradingStatus {
      get { return tradingStatus_; }
      set {
        tradingStatus_ = value;
      }
    }

    /// <summary>Field number for the "otc_flag" field.</summary>
    public const int OtcFlagFieldNumber = 26;
    private bool otcFlag_;
    /// <summary>
    ///Признак внебиржевой ценной бумаги.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool OtcFlag {
      get { return otcFlag_; }
      set {
        otcFlag_ = value;
      }
    }

    /// <summary>Field number for the "buy_available_flag" field.</summary>
    public const int BuyAvailableFlagFieldNumber = 27;
    private bool buyAvailableFlag_;
    /// <summary>
    ///Признак доступности для покупки.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool BuyAvailableFlag {
      get { return buyAvailableFlag_; }
      set {
        buyAvailableFlag_ = value;
      }
    }

    /// <summary>Field number for the "sell_available_flag" field.</summary>
    public const int SellAvailableFlagFieldNumber = 28;
    private bool sellAvailableFlag_;
    /// <summary>
    ///Признак доступности для продажи.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool SellAvailableFlag {
      get { return sellAvailableFlag_; }
      set {
        sellAvailableFlag_ = value;
      }
    }

    /// <summary>Field number for the "min_price_increment" field.</summary>
    public const int MinPriceIncrementFieldNumber = 29;
    private global::Tinkoff.InvestApi.V1.Quotation minPriceIncrement_;
    /// <summary>
    ///Шаг цены.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Tinkoff.InvestApi.V1.Quotation MinPriceIncrement {
      get { return minPriceIncrement_; }
      set {
        minPriceIncrement_ = value;
      }
    }

    /// <summary>Field number for the "api_trade_available_flag" field.</summary>
    public const int ApiTradeAvailableFlagFieldNumber = 30;
    private bool apiTradeAvailableFlag_;
    /// <summary>
    ///Признак доступности торгов через API.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool ApiTradeAvailableFlag {
      get { return apiTradeAvailableFlag_; }
      set {
        apiTradeAvailableFlag_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as Future);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(Future other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Figi != other.Figi) return false;
      if (Ticker != other.Ticker) return false;
      if (ClassCode != other.ClassCode) return false;
      if (Lot != other.Lot) return false;
      if (Currency != other.Currency) return false;
      if (!object.Equals(Klong, other.Klong)) return false;
      if (!object.Equals(Kshort, other.Kshort)) return false;
      if (!object.Equals(Dlong, other.Dlong)) return false;
      if (!object.Equals(Dshort, other.Dshort)) return false;
      if (!object.Equals(DlongMin, other.DlongMin)) return false;
      if (!object.Equals(DshortMin, other.DshortMin)) return false;
      if (ShortEnabledFlag != other.ShortEnabledFlag) return false;
      if (Name != other.Name) return false;
      if (Exchange != other.Exchange) return false;
      if (!object.Equals(FirstTradeDate, other.FirstTradeDate)) return false;
      if (!object.Equals(LastTradeDate, other.LastTradeDate)) return false;
      if (FuturesType != other.FuturesType) return false;
      if (AssetType != other.AssetType) return false;
      if (BasicAsset != other.BasicAsset) return false;
      if (!object.Equals(BasicAssetSize, other.BasicAssetSize)) return false;
      if (CountryOfRisk != other.CountryOfRisk) return false;
      if (CountryOfRiskName != other.CountryOfRiskName) return false;
      if (Sector != other.Sector) return false;
      if (!object.Equals(ExpirationDate, other.ExpirationDate)) return false;
      if (TradingStatus != other.TradingStatus) return false;
      if (OtcFlag != other.OtcFlag) return false;
      if (BuyAvailableFlag != other.BuyAvailableFlag) return false;
      if (SellAvailableFlag != other.SellAvailableFlag) return false;
      if (!object.Equals(MinPriceIncrement, other.MinPriceIncrement)) return false;
      if (ApiTradeAvailableFlag != other.ApiTradeAvailableFlag) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (Figi.Length != 0) hash ^= Figi.GetHashCode();
      if (Ticker.Length != 0) hash ^= Ticker.GetHashCode();
      if (ClassCode.Length != 0) hash ^= ClassCode.GetHashCode();
      if (Lot != 0) hash ^= Lot.GetHashCode();
      if (Currency.Length != 0) hash ^= Currency.GetHashCode();
      if (klong_ != null) hash ^= Klong.GetHashCode();
      if (kshort_ != null) hash ^= Kshort.GetHashCode();
      if (dlong_ != null) hash ^= Dlong.GetHashCode();
      if (dshort_ != null) hash ^= Dshort.GetHashCode();
      if (dlongMin_ != null) hash ^= DlongMin.GetHashCode();
      if (dshortMin_ != null) hash ^= DshortMin.GetHashCode();
      if (ShortEnabledFlag != false) hash ^= ShortEnabledFlag.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Exchange.Length != 0) hash ^= Exchange.GetHashCode();
      if (firstTradeDate_ != null) hash ^= FirstTradeDate.GetHashCode();
      if (lastTradeDate_ != null) hash ^= LastTradeDate.GetHashCode();
      if (FuturesType.Length != 0) hash ^= FuturesType.GetHashCode();
      if (AssetType.Length != 0) hash ^= AssetType.GetHashCode();
      if (BasicAsset.Length != 0) hash ^= BasicAsset.GetHashCode();
      if (basicAssetSize_ != null) hash ^= BasicAssetSize.GetHashCode();
      if (CountryOfRisk.Length != 0) hash ^= CountryOfRisk.GetHashCode();
      if (CountryOfRiskName.Length != 0) hash ^= CountryOfRiskName.GetHashCode();
      if (Sector.Length != 0) hash ^= Sector.GetHashCode();
      if (expirationDate_ != null) hash ^= ExpirationDate.GetHashCode();
      if (TradingStatus != global::Tinkoff.InvestApi.V1.SecurityTradingStatus.Unspecified) hash ^= TradingStatus.GetHashCode();
      if (OtcFlag != false) hash ^= OtcFlag.GetHashCode();
      if (BuyAvailableFlag != false) hash ^= BuyAvailableFlag.GetHashCode();
      if (SellAvailableFlag != false) hash ^= SellAvailableFlag.GetHashCode();
      if (minPriceIncrement_ != null) hash ^= MinPriceIncrement.GetHashCode();
      if (ApiTradeAvailableFlag != false) hash ^= ApiTradeAvailableFlag.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Figi.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Figi);
      }
      if (Ticker.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Ticker);
      }
      if (ClassCode.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(ClassCode);
      }
      if (Lot != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Lot);
      }
      if (Currency.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Currency);
      }
      if (klong_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(Klong);
      }
      if (kshort_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(Kshort);
      }
      if (dlong_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(Dlong);
      }
      if (dshort_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(Dshort);
      }
      if (dlongMin_ != null) {
        output.WriteRawTag(82);
        output.WriteMessage(DlongMin);
      }
      if (dshortMin_ != null) {
        output.WriteRawTag(90);
        output.WriteMessage(DshortMin);
      }
      if (ShortEnabledFlag != false) {
        output.WriteRawTag(96);
        output.WriteBool(ShortEnabledFlag);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(106);
        output.WriteString(Name);
      }
      if (Exchange.Length != 0) {
        output.WriteRawTag(114);
        output.WriteString(Exchange);
      }
      if (firstTradeDate_ != null) {
        output.WriteRawTag(122);
        output.WriteMessage(FirstTradeDate);
      }
      if (lastTradeDate_ != null) {
        output.WriteRawTag(130, 1);
        output.WriteMessage(LastTradeDate);
      }
      if (FuturesType.Length != 0) {
        output.WriteRawTag(138, 1);
        output.WriteString(FuturesType);
      }
      if (AssetType.Length != 0) {
        output.WriteRawTag(146, 1);
        output.WriteString(AssetType);
      }
      if (BasicAsset.Length != 0) {
        output.WriteRawTag(154, 1);
        output.WriteString(BasicAsset);
      }
      if (basicAssetSize_ != null) {
        output.WriteRawTag(162, 1);
        output.WriteMessage(BasicAssetSize);
      }
      if (CountryOfRisk.Length != 0) {
        output.WriteRawTag(170, 1);
        output.WriteString(CountryOfRisk);
      }
      if (CountryOfRiskName.Length != 0) {
        output.WriteRawTag(178, 1);
        output.WriteString(CountryOfRiskName);
      }
      if (Sector.Length != 0) {
        output.WriteRawTag(186, 1);
        output.WriteString(Sector);
      }
      if (expirationDate_ != null) {
        output.WriteRawTag(194, 1);
        output.WriteMessage(ExpirationDate);
      }
      if (TradingStatus != global::Tinkoff.InvestApi.V1.SecurityTradingStatus.Unspecified) {
        output.WriteRawTag(200, 1);
        output.WriteEnum((int) TradingStatus);
      }
      if (OtcFlag != false) {
        output.WriteRawTag(208, 1);
        output.WriteBool(OtcFlag);
      }
      if (BuyAvailableFlag != false) {
        output.WriteRawTag(216, 1);
        output.WriteBool(BuyAvailableFlag);
      }
      if (SellAvailableFlag != false) {
        output.WriteRawTag(224, 1);
        output.WriteBool(SellAvailableFlag);
      }
      if (minPriceIncrement_ != null) {
        output.WriteRawTag(234, 1);
        output.WriteMessage(MinPriceIncrement);
      }
      if (ApiTradeAvailableFlag != false) {
        output.WriteRawTag(240, 1);
        output.WriteBool(ApiTradeAvailableFlag);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Figi.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Figi);
      }
      if (Ticker.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Ticker);
      }
      if (ClassCode.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(ClassCode);
      }
      if (Lot != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Lot);
      }
      if (Currency.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Currency);
      }
      if (klong_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(Klong);
      }
      if (kshort_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(Kshort);
      }
      if (dlong_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(Dlong);
      }
      if (dshort_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(Dshort);
      }
      if (dlongMin_ != null) {
        output.WriteRawTag(82);
        output.WriteMessage(DlongMin);
      }
      if (dshortMin_ != null) {
        output.WriteRawTag(90);
        output.WriteMessage(DshortMin);
      }
      if (ShortEnabledFlag != false) {
        output.WriteRawTag(96);
        output.WriteBool(ShortEnabledFlag);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(106);
        output.WriteString(Name);
      }
      if (Exchange.Length != 0) {
        output.WriteRawTag(114);
        output.WriteString(Exchange);
      }
      if (firstTradeDate_ != null) {
        output.WriteRawTag(122);
        output.WriteMessage(FirstTradeDate);
      }
      if (lastTradeDate_ != null) {
        output.WriteRawTag(130, 1);
        output.WriteMessage(LastTradeDate);
      }
      if (FuturesType.Length != 0) {
        output.WriteRawTag(138, 1);
        output.WriteString(FuturesType);
      }
      if (AssetType.Length != 0) {
        output.WriteRawTag(146, 1);
        output.WriteString(AssetType);
      }
      if (BasicAsset.Length != 0) {
        output.WriteRawTag(154, 1);
        output.WriteString(BasicAsset);
      }
      if (basicAssetSize_ != null) {
        output.WriteRawTag(162, 1);
        output.WriteMessage(BasicAssetSize);
      }
      if (CountryOfRisk.Length != 0) {
        output.WriteRawTag(170, 1);
        output.WriteString(CountryOfRisk);
      }
      if (CountryOfRiskName.Length != 0) {
        output.WriteRawTag(178, 1);
        output.WriteString(CountryOfRiskName);
      }
      if (Sector.Length != 0) {
        output.WriteRawTag(186, 1);
        output.WriteString(Sector);
      }
      if (expirationDate_ != null) {
        output.WriteRawTag(194, 1);
        output.WriteMessage(ExpirationDate);
      }
      if (TradingStatus != global::Tinkoff.InvestApi.V1.SecurityTradingStatus.Unspecified) {
        output.WriteRawTag(200, 1);
        output.WriteEnum((int) TradingStatus);
      }
      if (OtcFlag != false) {
        output.WriteRawTag(208, 1);
        output.WriteBool(OtcFlag);
      }
      if (BuyAvailableFlag != false) {
        output.WriteRawTag(216, 1);
        output.WriteBool(BuyAvailableFlag);
      }
      if (SellAvailableFlag != false) {
        output.WriteRawTag(224, 1);
        output.WriteBool(SellAvailableFlag);
      }
      if (minPriceIncrement_ != null) {
        output.WriteRawTag(234, 1);
        output.WriteMessage(MinPriceIncrement);
      }
      if (ApiTradeAvailableFlag != false) {
        output.WriteRawTag(240, 1);
        output.WriteBool(ApiTradeAvailableFlag);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (Figi.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Figi);
      }
      if (Ticker.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Ticker);
      }
      if (ClassCode.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ClassCode);
      }
      if (Lot != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Lot);
      }
      if (Currency.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Currency);
      }
      if (klong_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Klong);
      }
      if (kshort_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Kshort);
      }
      if (dlong_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Dlong);
      }
      if (dshort_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Dshort);
      }
      if (dlongMin_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DlongMin);
      }
      if (dshortMin_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DshortMin);
      }
      if (ShortEnabledFlag != false) {
        size += 1 + 1;
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Exchange.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Exchange);
      }
      if (firstTradeDate_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(FirstTradeDate);
      }
      if (lastTradeDate_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(LastTradeDate);
      }
      if (FuturesType.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(FuturesType);
      }
      if (AssetType.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(AssetType);
      }
      if (BasicAsset.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(BasicAsset);
      }
      if (basicAssetSize_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(BasicAssetSize);
      }
      if (CountryOfRisk.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(CountryOfRisk);
      }
      if (CountryOfRiskName.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(CountryOfRiskName);
      }
      if (Sector.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Sector);
      }
      if (expirationDate_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(ExpirationDate);
      }
      if (TradingStatus != global::Tinkoff.InvestApi.V1.SecurityTradingStatus.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) TradingStatus);
      }
      if (OtcFlag != false) {
        size += 2 + 1;
      }
      if (BuyAvailableFlag != false) {
        size += 2 + 1;
      }
      if (SellAvailableFlag != false) {
        size += 2 + 1;
      }
      if (minPriceIncrement_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(MinPriceIncrement);
      }
      if (ApiTradeAvailableFlag != false) {
        size += 2 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(Future other) {
      if (other == null) {
        return;
      }
      if (other.Figi.Length != 0) {
        Figi = other.Figi;
      }
      if (other.Ticker.Length != 0) {
        Ticker = other.Ticker;
      }
      if (other.ClassCode.Length != 0) {
        ClassCode = other.ClassCode;
      }
      if (other.Lot != 0) {
        Lot = other.Lot;
      }
      if (other.Currency.Length != 0) {
        Currency = other.Currency;
      }
      if (other.klong_ != null) {
        if (klong_ == null) {
          Klong = new global::Tinkoff.InvestApi.V1.Quotation();
        }
        Klong.MergeFrom(other.Klong);
      }
      if (other.kshort_ != null) {
        if (kshort_ == null) {
          Kshort = new global::Tinkoff.InvestApi.V1.Quotation();
        }
        Kshort.MergeFrom(other.Kshort);
      }
      if (other.dlong_ != null) {
        if (dlong_ == null) {
          Dlong = new global::Tinkoff.InvestApi.V1.Quotation();
        }
        Dlong.MergeFrom(other.Dlong);
      }
      if (other.dshort_ != null) {
        if (dshort_ == null) {
          Dshort = new global::Tinkoff.InvestApi.V1.Quotation();
        }
        Dshort.MergeFrom(other.Dshort);
      }
      if (other.dlongMin_ != null) {
        if (dlongMin_ == null) {
          DlongMin = new global::Tinkoff.InvestApi.V1.Quotation();
        }
        DlongMin.MergeFrom(other.DlongMin);
      }
      if (other.dshortMin_ != null) {
        if (dshortMin_ == null) {
          DshortMin = new global::Tinkoff.InvestApi.V1.Quotation();
        }
        DshortMin.MergeFrom(other.DshortMin);
      }
      if (other.ShortEnabledFlag != false) {
        ShortEnabledFlag = other.ShortEnabledFlag;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Exchange.Length != 0) {
        Exchange = other.Exchange;
      }
      if (other.firstTradeDate_ != null) {
        if (firstTradeDate_ == null) {
          FirstTradeDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        FirstTradeDate.MergeFrom(other.FirstTradeDate);
      }
      if (other.lastTradeDate_ != null) {
        if (lastTradeDate_ == null) {
          LastTradeDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        LastTradeDate.MergeFrom(other.LastTradeDate);
      }
      if (other.FuturesType.Length != 0) {
        FuturesType = other.FuturesType;
      }
      if (other.AssetType.Length != 0) {
        AssetType = other.AssetType;
      }
      if (other.BasicAsset.Length != 0) {
        BasicAsset = other.BasicAsset;
      }
      if (other.basicAssetSize_ != null) {
        if (basicAssetSize_ == null) {
          BasicAssetSize = new global::Tinkoff.InvestApi.V1.Quotation();
        }
        BasicAssetSize.MergeFrom(other.BasicAssetSize);
      }
      if (other.CountryOfRisk.Length != 0) {
        CountryOfRisk = other.CountryOfRisk;
      }
      if (other.CountryOfRiskName.Length != 0) {
        CountryOfRiskName = other.CountryOfRiskName;
      }
      if (other.Sector.Length != 0) {
        Sector = other.Sector;
      }
      if (other.expirationDate_ != null) {
        if (expirationDate_ == null) {
          ExpirationDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        ExpirationDate.MergeFrom(other.ExpirationDate);
      }
      if (other.TradingStatus != global::Tinkoff.InvestApi.V1.SecurityTradingStatus.Unspecified) {
        TradingStatus = other.TradingStatus;
      }
      if (other.OtcFlag != false) {
        OtcFlag = other.OtcFlag;
      }
      if (other.BuyAvailableFlag != false) {
        BuyAvailableFlag = other.BuyAvailableFlag;
      }
      if (other.SellAvailableFlag != false) {
        SellAvailableFlag = other.SellAvailableFlag;
      }
      if (other.minPriceIncrement_ != null) {
        if (minPriceIncrement_ == null) {
          MinPriceIncrement = new global::Tinkoff.InvestApi.V1.Quotation();
        }
        MinPriceIncrement.MergeFrom(other.MinPriceIncrement);
      }
      if (other.ApiTradeAvailableFlag != false) {
        ApiTradeAvailableFlag = other.ApiTradeAvailableFlag;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Figi = input.ReadString();
            break;
          }
          case 18: {
            Ticker = input.ReadString();
            break;
          }
          case 26: {
            ClassCode = input.ReadString();
            break;
          }
          case 32: {
            Lot = input.ReadInt32();
            break;
          }
          case 42: {
            Currency = input.ReadString();
            break;
          }
          case 50: {
            if (klong_ == null) {
              Klong = new global::Tinkoff.InvestApi.V1.Quotation();
            }
            input.ReadMessage(Klong);
            break;
          }
          case 58: {
            if (kshort_ == null) {
              Kshort = new global::Tinkoff.InvestApi.V1.Quotation();
            }
            input.ReadMessage(Kshort);
            break;
          }
          case 66: {
            if (dlong_ == null) {
              Dlong = new global::Tinkoff.InvestApi.V1.Quotation();
            }
            input.ReadMessage(Dlong);
            break;
          }
          case 74: {
            if (dshort_ == null) {
              Dshort = new global::Tinkoff.InvestApi.V1.Quotation();
            }
            input.ReadMessage(Dshort);
            break;
          }
          case 82: {
            if (dlongMin_ == null) {
              DlongMin = new global::Tinkoff.InvestApi.V1.Quotation();
            }
            input.ReadMessage(DlongMin);
            break;
          }
          case 90: {
            if (dshortMin_ == null) {
              DshortMin = new global::Tinkoff.InvestApi.V1.Quotation();
            }
            input.ReadMessage(DshortMin);
            break;
          }
          case 96: {
            ShortEnabledFlag = input.ReadBool();
            break;
          }
          case 106: {
            Name = input.ReadString();
            break;
          }
          case 114: {
            Exchange = input.ReadString();
            break;
          }
          case 122: {
            if (firstTradeDate_ == null) {
              FirstTradeDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(FirstTradeDate);
            break;
          }
          case 130: {
            if (lastTradeDate_ == null) {
              LastTradeDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(LastTradeDate);
            break;
          }
          case 138: {
            FuturesType = input.ReadString();
            break;
          }
          case 146: {
            AssetType = input.ReadString();
            break;
          }
          case 154: {
            BasicAsset = input.ReadString();
            break;
          }
          case 162: {
            if (basicAssetSize_ == null) {
              BasicAssetSize = new global::Tinkoff.InvestApi.V1.Quotation();
            }
            input.ReadMessage(BasicAssetSize);
            break;
          }
          case 170: {
            CountryOfRisk = input.ReadString();
            break;
          }
          case 178: {
            CountryOfRiskName = input.ReadString();
            break;
          }
          case 186: {
            Sector = input.ReadString();
            break;
          }
          case 194: {
            if (expirationDate_ == null) {
              ExpirationDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(ExpirationDate);
            break;
          }
          case 200: {
            TradingStatus = (global::Tinkoff.InvestApi.V1.SecurityTradingStatus) input.ReadEnum();
            break;
          }
          case 208: {
            OtcFlag = input.ReadBool();
            break;
          }
          case 216: {
            BuyAvailableFlag = input.ReadBool();
            break;
          }
          case 224: {
            SellAvailableFlag = input.ReadBool();
            break;
          }
          case 234: {
            if (minPriceIncrement_ == null) {
              MinPriceIncrement = new global::Tinkoff.InvestApi.V1.Quotation();
            }
            input.ReadMessage(MinPriceIncrement);
            break;
          }
          case 240: {
            ApiTradeAvailableFlag = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Figi = input.ReadString();
            break;
          }
          case 18: {
            Ticker = input.ReadString();
            break;
          }
          case 26: {
            ClassCode = input.ReadString();
            break;
          }
          case 32: {
            Lot = input.ReadInt32();
            break;
          }
          case 42: {
            Currency = input.ReadString();
            break;
          }
          case 50: {
            if (klong_ == null) {
              Klong = new global::Tinkoff.InvestApi.V1.Quotation();
            }
            input.ReadMessage(Klong);
            break;
          }
          case 58: {
            if (kshort_ == null) {
              Kshort = new global::Tinkoff.InvestApi.V1.Quotation();
            }
            input.ReadMessage(Kshort);
            break;
          }
          case 66: {
            if (dlong_ == null) {
              Dlong = new global::Tinkoff.InvestApi.V1.Quotation();
            }
            input.ReadMessage(Dlong);
            break;
          }
          case 74: {
            if (dshort_ == null) {
              Dshort = new global::Tinkoff.InvestApi.V1.Quotation();
            }
            input.ReadMessage(Dshort);
            break;
          }
          case 82: {
            if (dlongMin_ == null) {
              DlongMin = new global::Tinkoff.InvestApi.V1.Quotation();
            }
            input.ReadMessage(DlongMin);
            break;
          }
          case 90: {
            if (dshortMin_ == null) {
              DshortMin = new global::Tinkoff.InvestApi.V1.Quotation();
            }
            input.ReadMessage(DshortMin);
            break;
          }
          case 96: {
            ShortEnabledFlag = input.ReadBool();
            break;
          }
          case 106: {
            Name = input.ReadString();
            break;
          }
          case 114: {
            Exchange = input.ReadString();
            break;
          }
          case 122: {
            if (firstTradeDate_ == null) {
              FirstTradeDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(FirstTradeDate);
            break;
          }
          case 130: {
            if (lastTradeDate_ == null) {
              LastTradeDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(LastTradeDate);
            break;
          }
          case 138: {
            FuturesType = input.ReadString();
            break;
          }
          case 146: {
            AssetType = input.ReadString();
            break;
          }
          case 154: {
            BasicAsset = input.ReadString();
            break;
          }
          case 162: {
            if (basicAssetSize_ == null) {
              BasicAssetSize = new global::Tinkoff.InvestApi.V1.Quotation();
            }
            input.ReadMessage(BasicAssetSize);
            break;
          }
          case 170: {
            CountryOfRisk = input.ReadString();
            break;
          }
          case 178: {
            CountryOfRiskName = input.ReadString();
            break;
          }
          case 186: {
            Sector = input.ReadString();
            break;
          }
          case 194: {
            if (expirationDate_ == null) {
              ExpirationDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(ExpirationDate);
            break;
          }
          case 200: {
            TradingStatus = (global::Tinkoff.InvestApi.V1.SecurityTradingStatus) input.ReadEnum();
            break;
          }
          case 208: {
            OtcFlag = input.ReadBool();
            break;
          }
          case 216: {
            BuyAvailableFlag = input.ReadBool();
            break;
          }
          case 224: {
            SellAvailableFlag = input.ReadBool();
            break;
          }
          case 234: {
            if (minPriceIncrement_ == null) {
              MinPriceIncrement = new global::Tinkoff.InvestApi.V1.Quotation();
            }
            input.ReadMessage(MinPriceIncrement);
            break;
          }
          case 240: {
            ApiTradeAvailableFlag = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///Объект передачи информации об акции.
  /// </summary>
  public sealed partial class Share : pb::IMessage<Share>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Share> _parser = new pb::MessageParser<Share>(() => new Share());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<Share> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tinkoff.InvestApi.V1.InstrumentsReflection.Descriptor.MessageTypes[20]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Share() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Share(Share other) : this() {
      figi_ = other.figi_;
      ticker_ = other.ticker_;
      classCode_ = other.classCode_;
      isin_ = other.isin_;
      lot_ = other.lot_;
      currency_ = other.currency_;
      klong_ = other.klong_ != null ? other.klong_.Clone() : null;
      kshort_ = other.kshort_ != null ? other.kshort_.Clone() : null;
      dlong_ = other.dlong_ != null ? other.dlong_.Clone() : null;
      dshort_ = other.dshort_ != null ? other.dshort_.Clone() : null;
      dlongMin_ = other.dlongMin_ != null ? other.dlongMin_.Clone() : null;
      dshortMin_ = other.dshortMin_ != null ? other.dshortMin_.Clone() : null;
      shortEnabledFlag_ = other.shortEnabledFlag_;
      name_ = other.name_;
      exchange_ = other.exchange_;
      ipoDate_ = other.ipoDate_ != null ? other.ipoDate_.Clone() : null;
      issueSize_ = other.issueSize_;
      countryOfRisk_ = other.countryOfRisk_;
      countryOfRiskName_ = other.countryOfRiskName_;
      sector_ = other.sector_;
      issueSizePlan_ = other.issueSizePlan_;
      nominal_ = other.nominal_ != null ? other.nominal_.Clone() : null;
      tradingStatus_ = other.tradingStatus_;
      otcFlag_ = other.otcFlag_;
      buyAvailableFlag_ = other.buyAvailableFlag_;
      sellAvailableFlag_ = other.sellAvailableFlag_;
      divYieldFlag_ = other.divYieldFlag_;
      shareType_ = other.shareType_;
      minPriceIncrement_ = other.minPriceIncrement_ != null ? other.minPriceIncrement_.Clone() : null;
      apiTradeAvailableFlag_ = other.apiTradeAvailableFlag_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Share Clone() {
      return new Share(this);
    }

    /// <summary>Field number for the "figi" field.</summary>
    public const int FigiFieldNumber = 1;
    private string figi_ = "";
    /// <summary>
    ///Figi-идентификатор инструмента.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Figi {
      get { return figi_; }
      set {
        figi_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ticker" field.</summary>
    public const int TickerFieldNumber = 2;
    private string ticker_ = "";
    /// <summary>
    ///Тикер инструмента.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Ticker {
      get { return ticker_; }
      set {
        ticker_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "class_code" field.</summary>
    public const int ClassCodeFieldNumber = 3;
    private string classCode_ = "";
    /// <summary>
    ///Класс-код (секция торгов).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string ClassCode {
      get { return classCode_; }
      set {
        classCode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "isin" field.</summary>
    public const int IsinFieldNumber = 4;
    private string isin_ = "";
    /// <summary>
    ///Isin-идентификатор инструмента.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Isin {
      get { return isin_; }
      set {
        isin_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "lot" field.</summary>
    public const int LotFieldNumber = 5;
    private int lot_;
    /// <summary>
    ///Лотность инструмента. Возможно совершение операций только на количества ценной бумаги, кратные параметру *lot*. Подробнее: [лот](https://tinkoff.github.io/investAPI/glossary#lot)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Lot {
      get { return lot_; }
      set {
        lot_ = value;
      }
    }

    /// <summary>Field number for the "currency" field.</summary>
    public const int CurrencyFieldNumber = 6;
    private string currency_ = "";
    /// <summary>
    ///Валюта расчётов.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Currency {
      get { return currency_; }
      set {
        currency_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "klong" field.</summary>
    public const int KlongFieldNumber = 7;
    private global::Tinkoff.InvestApi.V1.Quotation klong_;
    /// <summary>
    ///Коэффициент ставки риска длинной позиции по инструменту.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Tinkoff.InvestApi.V1.Quotation Klong {
      get { return klong_; }
      set {
        klong_ = value;
      }
    }

    /// <summary>Field number for the "kshort" field.</summary>
    public const int KshortFieldNumber = 8;
    private global::Tinkoff.InvestApi.V1.Quotation kshort_;
    /// <summary>
    ///Коэффициент ставки риска короткой позиции по инструменту.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Tinkoff.InvestApi.V1.Quotation Kshort {
      get { return kshort_; }
      set {
        kshort_ = value;
      }
    }

    /// <summary>Field number for the "dlong" field.</summary>
    public const int DlongFieldNumber = 9;
    private global::Tinkoff.InvestApi.V1.Quotation dlong_;
    /// <summary>
    ///Ставка риска минимальной маржи в лонг. Подробнее: [ставка риска в лонг](https://help.tinkoff.ru/margin-trade/long/risk-rate/)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Tinkoff.InvestApi.V1.Quotation Dlong {
      get { return dlong_; }
      set {
        dlong_ = value;
      }
    }

    /// <summary>Field number for the "dshort" field.</summary>
    public const int DshortFieldNumber = 10;
    private global::Tinkoff.InvestApi.V1.Quotation dshort_;
    /// <summary>
    ///Ставка риска минимальной маржи в шорт. Подробнее: [ставка риска в шорт](https://help.tinkoff.ru/margin-trade/short/risk-rate/)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Tinkoff.InvestApi.V1.Quotation Dshort {
      get { return dshort_; }
      set {
        dshort_ = value;
      }
    }

    /// <summary>Field number for the "dlong_min" field.</summary>
    public const int DlongMinFieldNumber = 11;
    private global::Tinkoff.InvestApi.V1.Quotation dlongMin_;
    /// <summary>
    ///Ставка риска начальной маржи в лонг. Подробнее: [ставка риска в лонг](https://help.tinkoff.ru/margin-trade/long/risk-rate/)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Tinkoff.InvestApi.V1.Quotation DlongMin {
      get { return dlongMin_; }
      set {
        dlongMin_ = value;
      }
    }

    /// <summary>Field number for the "dshort_min" field.</summary>
    public const int DshortMinFieldNumber = 12;
    private global::Tinkoff.InvestApi.V1.Quotation dshortMin_;
    /// <summary>
    ///Ставка риска начальной маржи в шорт. Подробнее: [ставка риска в шорт](https://help.tinkoff.ru/margin-trade/short/risk-rate/)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Tinkoff.InvestApi.V1.Quotation DshortMin {
      get { return dshortMin_; }
      set {
        dshortMin_ = value;
      }
    }

    /// <summary>Field number for the "short_enabled_flag" field.</summary>
    public const int ShortEnabledFlagFieldNumber = 13;
    private bool shortEnabledFlag_;
    /// <summary>
    ///Признак доступности для операций в шорт.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool ShortEnabledFlag {
      get { return shortEnabledFlag_; }
      set {
        shortEnabledFlag_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 15;
    private string name_ = "";
    /// <summary>
    ///Название инструмента.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "exchange" field.</summary>
    public const int ExchangeFieldNumber = 16;
    private string exchange_ = "";
    /// <summary>
    ///Торговая площадка.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Exchange {
      get { return exchange_; }
      set {
        exchange_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ipo_date" field.</summary>
    public const int IpoDateFieldNumber = 17;
    private global::Google.Protobuf.WellKnownTypes.Timestamp ipoDate_;
    /// <summary>
    ///Дата IPO акции в часовом поясе UTC.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.WellKnownTypes.Timestamp IpoDate {
      get { return ipoDate_; }
      set {
        ipoDate_ = value;
      }
    }

    /// <summary>Field number for the "issue_size" field.</summary>
    public const int IssueSizeFieldNumber = 18;
    private long issueSize_;
    /// <summary>
    ///Размер выпуска.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long IssueSize {
      get { return issueSize_; }
      set {
        issueSize_ = value;
      }
    }

    /// <summary>Field number for the "country_of_risk" field.</summary>
    public const int CountryOfRiskFieldNumber = 19;
    private string countryOfRisk_ = "";
    /// <summary>
    ///Код страны эмитента.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string CountryOfRisk {
      get { return countryOfRisk_; }
      set {
        countryOfRisk_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "country_of_risk_name" field.</summary>
    public const int CountryOfRiskNameFieldNumber = 20;
    private string countryOfRiskName_ = "";
    /// <summary>
    ///Наименование страны эмитента.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string CountryOfRiskName {
      get { return countryOfRiskName_; }
      set {
        countryOfRiskName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "sector" field.</summary>
    public const int SectorFieldNumber = 21;
    private string sector_ = "";
    /// <summary>
    ///Сектор экономики.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Sector {
      get { return sector_; }
      set {
        sector_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "issue_size_plan" field.</summary>
    public const int IssueSizePlanFieldNumber = 22;
    private long issueSizePlan_;
    /// <summary>
    ///Плановый размер выпуска.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long IssueSizePlan {
      get { return issueSizePlan_; }
      set {
        issueSizePlan_ = value;
      }
    }

    /// <summary>Field number for the "nominal" field.</summary>
    public const int NominalFieldNumber = 23;
    private global::Tinkoff.InvestApi.V1.MoneyValue nominal_;
    /// <summary>
    ///Номинал.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Tinkoff.InvestApi.V1.MoneyValue Nominal {
      get { return nominal_; }
      set {
        nominal_ = value;
      }
    }

    /// <summary>Field number for the "trading_status" field.</summary>
    public const int TradingStatusFieldNumber = 25;
    private global::Tinkoff.InvestApi.V1.SecurityTradingStatus tradingStatus_ = global::Tinkoff.InvestApi.V1.SecurityTradingStatus.Unspecified;
    /// <summary>
    ///Текущий режим торгов инструмента.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Tinkoff.InvestApi.V1.SecurityTradingStatus TradingStatus {
      get { return tradingStatus_; }
      set {
        tradingStatus_ = value;
      }
    }

    /// <summary>Field number for the "otc_flag" field.</summary>
    public const int OtcFlagFieldNumber = 26;
    private bool otcFlag_;
    /// <summary>
    ///Признак внебиржевой ценной бумаги.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool OtcFlag {
      get { return otcFlag_; }
      set {
        otcFlag_ = value;
      }
    }

    /// <summary>Field number for the "buy_available_flag" field.</summary>
    public const int BuyAvailableFlagFieldNumber = 27;
    private bool buyAvailableFlag_;
    /// <summary>
    ///Признак доступности для покупки.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool BuyAvailableFlag {
      get { return buyAvailableFlag_; }
      set {
        buyAvailableFlag_ = value;
      }
    }

    /// <summary>Field number for the "sell_available_flag" field.</summary>
    public const int SellAvailableFlagFieldNumber = 28;
    private bool sellAvailableFlag_;
    /// <summary>
    ///Признак доступности для продажи.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool SellAvailableFlag {
      get { return sellAvailableFlag_; }
      set {
        sellAvailableFlag_ = value;
      }
    }

    /// <summary>Field number for the "div_yield_flag" field.</summary>
    public const int DivYieldFlagFieldNumber = 29;
    private bool divYieldFlag_;
    /// <summary>
    ///Признак наличия дивидендной доходности.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool DivYieldFlag {
      get { return divYieldFlag_; }
      set {
        divYieldFlag_ = value;
      }
    }

    /// <summary>Field number for the "share_type" field.</summary>
    public const int ShareTypeFieldNumber = 30;
    private global::Tinkoff.InvestApi.V1.ShareType shareType_ = global::Tinkoff.InvestApi.V1.ShareType.Unspecified;
    /// <summary>
    ///Тип акции. Возможные значения: [ShareType](https://tinkoff.github.io/investAPI/instruments#sharetype)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Tinkoff.InvestApi.V1.ShareType ShareType {
      get { return shareType_; }
      set {
        shareType_ = value;
      }
    }

    /// <summary>Field number for the "min_price_increment" field.</summary>
    public const int MinPriceIncrementFieldNumber = 31;
    private global::Tinkoff.InvestApi.V1.Quotation minPriceIncrement_;
    /// <summary>
    ///Шаг цены.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Tinkoff.InvestApi.V1.Quotation MinPriceIncrement {
      get { return minPriceIncrement_; }
      set {
        minPriceIncrement_ = value;
      }
    }

    /// <summary>Field number for the "api_trade_available_flag" field.</summary>
    public const int ApiTradeAvailableFlagFieldNumber = 32;
    private bool apiTradeAvailableFlag_;
    /// <summary>
    ///Признак доступности торгов через API.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool ApiTradeAvailableFlag {
      get { return apiTradeAvailableFlag_; }
      set {
        apiTradeAvailableFlag_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as Share);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(Share other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Figi != other.Figi) return false;
      if (Ticker != other.Ticker) return false;
      if (ClassCode != other.ClassCode) return false;
      if (Isin != other.Isin) return false;
      if (Lot != other.Lot) return false;
      if (Currency != other.Currency) return false;
      if (!object.Equals(Klong, other.Klong)) return false;
      if (!object.Equals(Kshort, other.Kshort)) return false;
      if (!object.Equals(Dlong, other.Dlong)) return false;
      if (!object.Equals(Dshort, other.Dshort)) return false;
      if (!object.Equals(DlongMin, other.DlongMin)) return false;
      if (!object.Equals(DshortMin, other.DshortMin)) return false;
      if (ShortEnabledFlag != other.ShortEnabledFlag) return false;
      if (Name != other.Name) return false;
      if (Exchange != other.Exchange) return false;
      if (!object.Equals(IpoDate, other.IpoDate)) return false;
      if (IssueSize != other.IssueSize) return false;
      if (CountryOfRisk != other.CountryOfRisk) return false;
      if (CountryOfRiskName != other.CountryOfRiskName) return false;
      if (Sector != other.Sector) return false;
      if (IssueSizePlan != other.IssueSizePlan) return false;
      if (!object.Equals(Nominal, other.Nominal)) return false;
      if (TradingStatus != other.TradingStatus) return false;
      if (OtcFlag != other.OtcFlag) return false;
      if (BuyAvailableFlag != other.BuyAvailableFlag) return false;
      if (SellAvailableFlag != other.SellAvailableFlag) return false;
      if (DivYieldFlag != other.DivYieldFlag) return false;
      if (ShareType != other.ShareType) return false;
      if (!object.Equals(MinPriceIncrement, other.MinPriceIncrement)) return false;
      if (ApiTradeAvailableFlag != other.ApiTradeAvailableFlag) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (Figi.Length != 0) hash ^= Figi.GetHashCode();
      if (Ticker.Length != 0) hash ^= Ticker.GetHashCode();
      if (ClassCode.Length != 0) hash ^= ClassCode.GetHashCode();
      if (Isin.Length != 0) hash ^= Isin.GetHashCode();
      if (Lot != 0) hash ^= Lot.GetHashCode();
      if (Currency.Length != 0) hash ^= Currency.GetHashCode();
      if (klong_ != null) hash ^= Klong.GetHashCode();
      if (kshort_ != null) hash ^= Kshort.GetHashCode();
      if (dlong_ != null) hash ^= Dlong.GetHashCode();
      if (dshort_ != null) hash ^= Dshort.GetHashCode();
      if (dlongMin_ != null) hash ^= DlongMin.GetHashCode();
      if (dshortMin_ != null) hash ^= DshortMin.GetHashCode();
      if (ShortEnabledFlag != false) hash ^= ShortEnabledFlag.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Exchange.Length != 0) hash ^= Exchange.GetHashCode();
      if (ipoDate_ != null) hash ^= IpoDate.GetHashCode();
      if (IssueSize != 0L) hash ^= IssueSize.GetHashCode();
      if (CountryOfRisk.Length != 0) hash ^= CountryOfRisk.GetHashCode();
      if (CountryOfRiskName.Length != 0) hash ^= CountryOfRiskName.GetHashCode();
      if (Sector.Length != 0) hash ^= Sector.GetHashCode();
      if (IssueSizePlan != 0L) hash ^= IssueSizePlan.GetHashCode();
      if (nominal_ != null) hash ^= Nominal.GetHashCode();
      if (TradingStatus != global::Tinkoff.InvestApi.V1.SecurityTradingStatus.Unspecified) hash ^= TradingStatus.GetHashCode();
      if (OtcFlag != false) hash ^= OtcFlag.GetHashCode();
      if (BuyAvailableFlag != false) hash ^= BuyAvailableFlag.GetHashCode();
      if (SellAvailableFlag != false) hash ^= SellAvailableFlag.GetHashCode();
      if (DivYieldFlag != false) hash ^= DivYieldFlag.GetHashCode();
      if (ShareType != global::Tinkoff.InvestApi.V1.ShareType.Unspecified) hash ^= ShareType.GetHashCode();
      if (minPriceIncrement_ != null) hash ^= MinPriceIncrement.GetHashCode();
      if (ApiTradeAvailableFlag != false) hash ^= ApiTradeAvailableFlag.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Figi.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Figi);
      }
      if (Ticker.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Ticker);
      }
      if (ClassCode.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(ClassCode);
      }
      if (Isin.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Isin);
      }
      if (Lot != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Lot);
      }
      if (Currency.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Currency);
      }
      if (klong_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(Klong);
      }
      if (kshort_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(Kshort);
      }
      if (dlong_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(Dlong);
      }
      if (dshort_ != null) {
        output.WriteRawTag(82);
        output.WriteMessage(Dshort);
      }
      if (dlongMin_ != null) {
        output.WriteRawTag(90);
        output.WriteMessage(DlongMin);
      }
      if (dshortMin_ != null) {
        output.WriteRawTag(98);
        output.WriteMessage(DshortMin);
      }
      if (ShortEnabledFlag != false) {
        output.WriteRawTag(104);
        output.WriteBool(ShortEnabledFlag);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(122);
        output.WriteString(Name);
      }
      if (Exchange.Length != 0) {
        output.WriteRawTag(130, 1);
        output.WriteString(Exchange);
      }
      if (ipoDate_ != null) {
        output.WriteRawTag(138, 1);
        output.WriteMessage(IpoDate);
      }
      if (IssueSize != 0L) {
        output.WriteRawTag(144, 1);
        output.WriteInt64(IssueSize);
      }
      if (CountryOfRisk.Length != 0) {
        output.WriteRawTag(154, 1);
        output.WriteString(CountryOfRisk);
      }
      if (CountryOfRiskName.Length != 0) {
        output.WriteRawTag(162, 1);
        output.WriteString(CountryOfRiskName);
      }
      if (Sector.Length != 0) {
        output.WriteRawTag(170, 1);
        output.WriteString(Sector);
      }
      if (IssueSizePlan != 0L) {
        output.WriteRawTag(176, 1);
        output.WriteInt64(IssueSizePlan);
      }
      if (nominal_ != null) {
        output.WriteRawTag(186, 1);
        output.WriteMessage(Nominal);
      }
      if (TradingStatus != global::Tinkoff.InvestApi.V1.SecurityTradingStatus.Unspecified) {
        output.WriteRawTag(200, 1);
        output.WriteEnum((int) TradingStatus);
      }
      if (OtcFlag != false) {
        output.WriteRawTag(208, 1);
        output.WriteBool(OtcFlag);
      }
      if (BuyAvailableFlag != false) {
        output.WriteRawTag(216, 1);
        output.WriteBool(BuyAvailableFlag);
      }
      if (SellAvailableFlag != false) {
        output.WriteRawTag(224, 1);
        output.WriteBool(SellAvailableFlag);
      }
      if (DivYieldFlag != false) {
        output.WriteRawTag(232, 1);
        output.WriteBool(DivYieldFlag);
      }
      if (ShareType != global::Tinkoff.InvestApi.V1.ShareType.Unspecified) {
        output.WriteRawTag(240, 1);
        output.WriteEnum((int) ShareType);
      }
      if (minPriceIncrement_ != null) {
        output.WriteRawTag(250, 1);
        output.WriteMessage(MinPriceIncrement);
      }
      if (ApiTradeAvailableFlag != false) {
        output.WriteRawTag(128, 2);
        output.WriteBool(ApiTradeAvailableFlag);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Figi.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Figi);
      }
      if (Ticker.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Ticker);
      }
      if (ClassCode.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(ClassCode);
      }
      if (Isin.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Isin);
      }
      if (Lot != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Lot);
      }
      if (Currency.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Currency);
      }
      if (klong_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(Klong);
      }
      if (kshort_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(Kshort);
      }
      if (dlong_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(Dlong);
      }
      if (dshort_ != null) {
        output.WriteRawTag(82);
        output.WriteMessage(Dshort);
      }
      if (dlongMin_ != null) {
        output.WriteRawTag(90);
        output.WriteMessage(DlongMin);
      }
      if (dshortMin_ != null) {
        output.WriteRawTag(98);
        output.WriteMessage(DshortMin);
      }
      if (ShortEnabledFlag != false) {
        output.WriteRawTag(104);
        output.WriteBool(ShortEnabledFlag);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(122);
        output.WriteString(Name);
      }
      if (Exchange.Length != 0) {
        output.WriteRawTag(130, 1);
        output.WriteString(Exchange);
      }
      if (ipoDate_ != null) {
        output.WriteRawTag(138, 1);
        output.WriteMessage(IpoDate);
      }
      if (IssueSize != 0L) {
        output.WriteRawTag(144, 1);
        output.WriteInt64(IssueSize);
      }
      if (CountryOfRisk.Length != 0) {
        output.WriteRawTag(154, 1);
        output.WriteString(CountryOfRisk);
      }
      if (CountryOfRiskName.Length != 0) {
        output.WriteRawTag(162, 1);
        output.WriteString(CountryOfRiskName);
      }
      if (Sector.Length != 0) {
        output.WriteRawTag(170, 1);
        output.WriteString(Sector);
      }
      if (IssueSizePlan != 0L) {
        output.WriteRawTag(176, 1);
        output.WriteInt64(IssueSizePlan);
      }
      if (nominal_ != null) {
        output.WriteRawTag(186, 1);
        output.WriteMessage(Nominal);
      }
      if (TradingStatus != global::Tinkoff.InvestApi.V1.SecurityTradingStatus.Unspecified) {
        output.WriteRawTag(200, 1);
        output.WriteEnum((int) TradingStatus);
      }
      if (OtcFlag != false) {
        output.WriteRawTag(208, 1);
        output.WriteBool(OtcFlag);
      }
      if (BuyAvailableFlag != false) {
        output.WriteRawTag(216, 1);
        output.WriteBool(BuyAvailableFlag);
      }
      if (SellAvailableFlag != false) {
        output.WriteRawTag(224, 1);
        output.WriteBool(SellAvailableFlag);
      }
      if (DivYieldFlag != false) {
        output.WriteRawTag(232, 1);
        output.WriteBool(DivYieldFlag);
      }
      if (ShareType != global::Tinkoff.InvestApi.V1.ShareType.Unspecified) {
        output.WriteRawTag(240, 1);
        output.WriteEnum((int) ShareType);
      }
      if (minPriceIncrement_ != null) {
        output.WriteRawTag(250, 1);
        output.WriteMessage(MinPriceIncrement);
      }
      if (ApiTradeAvailableFlag != false) {
        output.WriteRawTag(128, 2);
        output.WriteBool(ApiTradeAvailableFlag);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (Figi.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Figi);
      }
      if (Ticker.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Ticker);
      }
      if (ClassCode.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ClassCode);
      }
      if (Isin.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Isin);
      }
      if (Lot != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Lot);
      }
      if (Currency.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Currency);
      }
      if (klong_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Klong);
      }
      if (kshort_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Kshort);
      }
      if (dlong_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Dlong);
      }
      if (dshort_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Dshort);
      }
      if (dlongMin_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DlongMin);
      }
      if (dshortMin_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DshortMin);
      }
      if (ShortEnabledFlag != false) {
        size += 1 + 1;
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Exchange.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Exchange);
      }
      if (ipoDate_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(IpoDate);
      }
      if (IssueSize != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(IssueSize);
      }
      if (CountryOfRisk.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(CountryOfRisk);
      }
      if (CountryOfRiskName.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(CountryOfRiskName);
      }
      if (Sector.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Sector);
      }
      if (IssueSizePlan != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(IssueSizePlan);
      }
      if (nominal_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Nominal);
      }
      if (TradingStatus != global::Tinkoff.InvestApi.V1.SecurityTradingStatus.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) TradingStatus);
      }
      if (OtcFlag != false) {
        size += 2 + 1;
      }
      if (BuyAvailableFlag != false) {
        size += 2 + 1;
      }
      if (SellAvailableFlag != false) {
        size += 2 + 1;
      }
      if (DivYieldFlag != false) {
        size += 2 + 1;
      }
      if (ShareType != global::Tinkoff.InvestApi.V1.ShareType.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) ShareType);
      }
      if (minPriceIncrement_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(MinPriceIncrement);
      }
      if (ApiTradeAvailableFlag != false) {
        size += 2 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(Share other) {
      if (other == null) {
        return;
      }
      if (other.Figi.Length != 0) {
        Figi = other.Figi;
      }
      if (other.Ticker.Length != 0) {
        Ticker = other.Ticker;
      }
      if (other.ClassCode.Length != 0) {
        ClassCode = other.ClassCode;
      }
      if (other.Isin.Length != 0) {
        Isin = other.Isin;
      }
      if (other.Lot != 0) {
        Lot = other.Lot;
      }
      if (other.Currency.Length != 0) {
        Currency = other.Currency;
      }
      if (other.klong_ != null) {
        if (klong_ == null) {
          Klong = new global::Tinkoff.InvestApi.V1.Quotation();
        }
        Klong.MergeFrom(other.Klong);
      }
      if (other.kshort_ != null) {
        if (kshort_ == null) {
          Kshort = new global::Tinkoff.InvestApi.V1.Quotation();
        }
        Kshort.MergeFrom(other.Kshort);
      }
      if (other.dlong_ != null) {
        if (dlong_ == null) {
          Dlong = new global::Tinkoff.InvestApi.V1.Quotation();
        }
        Dlong.MergeFrom(other.Dlong);
      }
      if (other.dshort_ != null) {
        if (dshort_ == null) {
          Dshort = new global::Tinkoff.InvestApi.V1.Quotation();
        }
        Dshort.MergeFrom(other.Dshort);
      }
      if (other.dlongMin_ != null) {
        if (dlongMin_ == null) {
          DlongMin = new global::Tinkoff.InvestApi.V1.Quotation();
        }
        DlongMin.MergeFrom(other.DlongMin);
      }
      if (other.dshortMin_ != null) {
        if (dshortMin_ == null) {
          DshortMin = new global::Tinkoff.InvestApi.V1.Quotation();
        }
        DshortMin.MergeFrom(other.DshortMin);
      }
      if (other.ShortEnabledFlag != false) {
        ShortEnabledFlag = other.ShortEnabledFlag;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Exchange.Length != 0) {
        Exchange = other.Exchange;
      }
      if (other.ipoDate_ != null) {
        if (ipoDate_ == null) {
          IpoDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        IpoDate.MergeFrom(other.IpoDate);
      }
      if (other.IssueSize != 0L) {
        IssueSize = other.IssueSize;
      }
      if (other.CountryOfRisk.Length != 0) {
        CountryOfRisk = other.CountryOfRisk;
      }
      if (other.CountryOfRiskName.Length != 0) {
        CountryOfRiskName = other.CountryOfRiskName;
      }
      if (other.Sector.Length != 0) {
        Sector = other.Sector;
      }
      if (other.IssueSizePlan != 0L) {
        IssueSizePlan = other.IssueSizePlan;
      }
      if (other.nominal_ != null) {
        if (nominal_ == null) {
          Nominal = new global::Tinkoff.InvestApi.V1.MoneyValue();
        }
        Nominal.MergeFrom(other.Nominal);
      }
      if (other.TradingStatus != global::Tinkoff.InvestApi.V1.SecurityTradingStatus.Unspecified) {
        TradingStatus = other.TradingStatus;
      }
      if (other.OtcFlag != false) {
        OtcFlag = other.OtcFlag;
      }
      if (other.BuyAvailableFlag != false) {
        BuyAvailableFlag = other.BuyAvailableFlag;
      }
      if (other.SellAvailableFlag != false) {
        SellAvailableFlag = other.SellAvailableFlag;
      }
      if (other.DivYieldFlag != false) {
        DivYieldFlag = other.DivYieldFlag;
      }
      if (other.ShareType != global::Tinkoff.InvestApi.V1.ShareType.Unspecified) {
        ShareType = other.ShareType;
      }
      if (other.minPriceIncrement_ != null) {
        if (minPriceIncrement_ == null) {
          MinPriceIncrement = new global::Tinkoff.InvestApi.V1.Quotation();
        }
        MinPriceIncrement.MergeFrom(other.MinPriceIncrement);
      }
      if (other.ApiTradeAvailableFlag != false) {
        ApiTradeAvailableFlag = other.ApiTradeAvailableFlag;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Figi = input.ReadString();
            break;
          }
          case 18: {
            Ticker = input.ReadString();
            break;
          }
          case 26: {
            ClassCode = input.ReadString();
            break;
          }
          case 34: {
            Isin = input.ReadString();
            break;
          }
          case 40: {
            Lot = input.ReadInt32();
            break;
          }
          case 50: {
            Currency = input.ReadString();
            break;
          }
          case 58: {
            if (klong_ == null) {
              Klong = new global::Tinkoff.InvestApi.V1.Quotation();
            }
            input.ReadMessage(Klong);
            break;
          }
          case 66: {
            if (kshort_ == null) {
              Kshort = new global::Tinkoff.InvestApi.V1.Quotation();
            }
            input.ReadMessage(Kshort);
            break;
          }
          case 74: {
            if (dlong_ == null) {
              Dlong = new global::Tinkoff.InvestApi.V1.Quotation();
            }
            input.ReadMessage(Dlong);
            break;
          }
          case 82: {
            if (dshort_ == null) {
              Dshort = new global::Tinkoff.InvestApi.V1.Quotation();
            }
            input.ReadMessage(Dshort);
            break;
          }
          case 90: {
            if (dlongMin_ == null) {
              DlongMin = new global::Tinkoff.InvestApi.V1.Quotation();
            }
            input.ReadMessage(DlongMin);
            break;
          }
          case 98: {
            if (dshortMin_ == null) {
              DshortMin = new global::Tinkoff.InvestApi.V1.Quotation();
            }
            input.ReadMessage(DshortMin);
            break;
          }
          case 104: {
            ShortEnabledFlag = input.ReadBool();
            break;
          }
          case 122: {
            Name = input.ReadString();
            break;
          }
          case 130: {
            Exchange = input.ReadString();
            break;
          }
          case 138: {
            if (ipoDate_ == null) {
              IpoDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(IpoDate);
            break;
          }
          case 144: {
            IssueSize = input.ReadInt64();
            break;
          }
          case 154: {
            CountryOfRisk = input.ReadString();
            break;
          }
          case 162: {
            CountryOfRiskName = input.ReadString();
            break;
          }
          case 170: {
            Sector = input.ReadString();
            break;
          }
          case 176: {
            IssueSizePlan = input.ReadInt64();
            break;
          }
          case 186: {
            if (nominal_ == null) {
              Nominal = new global::Tinkoff.InvestApi.V1.MoneyValue();
            }
            input.ReadMessage(Nominal);
            break;
          }
          case 200: {
            TradingStatus = (global::Tinkoff.InvestApi.V1.SecurityTradingStatus) input.ReadEnum();
            break;
          }
          case 208: {
            OtcFlag = input.ReadBool();
            break;
          }
          case 216: {
            BuyAvailableFlag = input.ReadBool();
            break;
          }
          case 224: {
            SellAvailableFlag = input.ReadBool();
            break;
          }
          case 232: {
            DivYieldFlag = input.ReadBool();
            break;
          }
          case 240: {
            ShareType = (global::Tinkoff.InvestApi.V1.ShareType) input.ReadEnum();
            break;
          }
          case 250: {
            if (minPriceIncrement_ == null) {
              MinPriceIncrement = new global::Tinkoff.InvestApi.V1.Quotation();
            }
            input.ReadMessage(MinPriceIncrement);
            break;
          }
          case 256: {
            ApiTradeAvailableFlag = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Figi = input.ReadString();
            break;
          }
          case 18: {
            Ticker = input.ReadString();
            break;
          }
          case 26: {
            ClassCode = input.ReadString();
            break;
          }
          case 34: {
            Isin = input.ReadString();
            break;
          }
          case 40: {
            Lot = input.ReadInt32();
            break;
          }
          case 50: {
            Currency = input.ReadString();
            break;
          }
          case 58: {
            if (klong_ == null) {
              Klong = new global::Tinkoff.InvestApi.V1.Quotation();
            }
            input.ReadMessage(Klong);
            break;
          }
          case 66: {
            if (kshort_ == null) {
              Kshort = new global::Tinkoff.InvestApi.V1.Quotation();
            }
            input.ReadMessage(Kshort);
            break;
          }
          case 74: {
            if (dlong_ == null) {
              Dlong = new global::Tinkoff.InvestApi.V1.Quotation();
            }
            input.ReadMessage(Dlong);
            break;
          }
          case 82: {
            if (dshort_ == null) {
              Dshort = new global::Tinkoff.InvestApi.V1.Quotation();
            }
            input.ReadMessage(Dshort);
            break;
          }
          case 90: {
            if (dlongMin_ == null) {
              DlongMin = new global::Tinkoff.InvestApi.V1.Quotation();
            }
            input.ReadMessage(DlongMin);
            break;
          }
          case 98: {
            if (dshortMin_ == null) {
              DshortMin = new global::Tinkoff.InvestApi.V1.Quotation();
            }
            input.ReadMessage(DshortMin);
            break;
          }
          case 104: {
            ShortEnabledFlag = input.ReadBool();
            break;
          }
          case 122: {
            Name = input.ReadString();
            break;
          }
          case 130: {
            Exchange = input.ReadString();
            break;
          }
          case 138: {
            if (ipoDate_ == null) {
              IpoDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(IpoDate);
            break;
          }
          case 144: {
            IssueSize = input.ReadInt64();
            break;
          }
          case 154: {
            CountryOfRisk = input.ReadString();
            break;
          }
          case 162: {
            CountryOfRiskName = input.ReadString();
            break;
          }
          case 170: {
            Sector = input.ReadString();
            break;
          }
          case 176: {
            IssueSizePlan = input.ReadInt64();
            break;
          }
          case 186: {
            if (nominal_ == null) {
              Nominal = new global::Tinkoff.InvestApi.V1.MoneyValue();
            }
            input.ReadMessage(Nominal);
            break;
          }
          case 200: {
            TradingStatus = (global::Tinkoff.InvestApi.V1.SecurityTradingStatus) input.ReadEnum();
            break;
          }
          case 208: {
            OtcFlag = input.ReadBool();
            break;
          }
          case 216: {
            BuyAvailableFlag = input.ReadBool();
            break;
          }
          case 224: {
            SellAvailableFlag = input.ReadBool();
            break;
          }
          case 232: {
            DivYieldFlag = input.ReadBool();
            break;
          }
          case 240: {
            ShareType = (global::Tinkoff.InvestApi.V1.ShareType) input.ReadEnum();
            break;
          }
          case 250: {
            if (minPriceIncrement_ == null) {
              MinPriceIncrement = new global::Tinkoff.InvestApi.V1.Quotation();
            }
            input.ReadMessage(MinPriceIncrement);
            break;
          }
          case 256: {
            ApiTradeAvailableFlag = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///Запрос НКД по облигации
  /// </summary>
  public sealed partial class GetAccruedInterestsRequest : pb::IMessage<GetAccruedInterestsRequest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<GetAccruedInterestsRequest> _parser = new pb::MessageParser<GetAccruedInterestsRequest>(() => new GetAccruedInterestsRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<GetAccruedInterestsRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tinkoff.InvestApi.V1.InstrumentsReflection.Descriptor.MessageTypes[21]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public GetAccruedInterestsRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public GetAccruedInterestsRequest(GetAccruedInterestsRequest other) : this() {
      figi_ = other.figi_;
      from_ = other.from_ != null ? other.from_.Clone() : null;
      to_ = other.to_ != null ? other.to_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public GetAccruedInterestsRequest Clone() {
      return new GetAccruedInterestsRequest(this);
    }

    /// <summary>Field number for the "figi" field.</summary>
    public const int FigiFieldNumber = 1;
    private string figi_ = "";
    /// <summary>
    ///Figi-идентификатор инструмента.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Figi {
      get { return figi_; }
      set {
        figi_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "from" field.</summary>
    public const int FromFieldNumber = 2;
    private global::Google.Protobuf.WellKnownTypes.Timestamp from_;
    /// <summary>
    ///Начало запрашиваемого периода в часовом поясе UTC.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.WellKnownTypes.Timestamp From {
      get { return from_; }
      set {
        from_ = value;
      }
    }

    /// <summary>Field number for the "to" field.</summary>
    public const int ToFieldNumber = 3;
    private global::Google.Protobuf.WellKnownTypes.Timestamp to_;
    /// <summary>
    ///Окончание запрашиваемого периода в часовом поясе UTC.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.WellKnownTypes.Timestamp To {
      get { return to_; }
      set {
        to_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as GetAccruedInterestsRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(GetAccruedInterestsRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Figi != other.Figi) return false;
      if (!object.Equals(From, other.From)) return false;
      if (!object.Equals(To, other.To)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (Figi.Length != 0) hash ^= Figi.GetHashCode();
      if (from_ != null) hash ^= From.GetHashCode();
      if (to_ != null) hash ^= To.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Figi.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Figi);
      }
      if (from_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(From);
      }
      if (to_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(To);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Figi.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Figi);
      }
      if (from_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(From);
      }
      if (to_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(To);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (Figi.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Figi);
      }
      if (from_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(From);
      }
      if (to_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(To);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(GetAccruedInterestsRequest other) {
      if (other == null) {
        return;
      }
      if (other.Figi.Length != 0) {
        Figi = other.Figi;
      }
      if (other.from_ != null) {
        if (from_ == null) {
          From = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        From.MergeFrom(other.From);
      }
      if (other.to_ != null) {
        if (to_ == null) {
          To = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        To.MergeFrom(other.To);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Figi = input.ReadString();
            break;
          }
          case 18: {
            if (from_ == null) {
              From = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(From);
            break;
          }
          case 26: {
            if (to_ == null) {
              To = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(To);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Figi = input.ReadString();
            break;
          }
          case 18: {
            if (from_ == null) {
              From = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(From);
            break;
          }
          case 26: {
            if (to_ == null) {
              To = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(To);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///НКД облигации
  /// </summary>
  public sealed partial class GetAccruedInterestsResponse : pb::IMessage<GetAccruedInterestsResponse>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<GetAccruedInterestsResponse> _parser = new pb::MessageParser<GetAccruedInterestsResponse>(() => new GetAccruedInterestsResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<GetAccruedInterestsResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tinkoff.InvestApi.V1.InstrumentsReflection.Descriptor.MessageTypes[22]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public GetAccruedInterestsResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public GetAccruedInterestsResponse(GetAccruedInterestsResponse other) : this() {
      accruedInterests_ = other.accruedInterests_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public GetAccruedInterestsResponse Clone() {
      return new GetAccruedInterestsResponse(this);
    }

    /// <summary>Field number for the "accrued_interests" field.</summary>
    public const int AccruedInterestsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Tinkoff.InvestApi.V1.AccruedInterest> _repeated_accruedInterests_codec
        = pb::FieldCodec.ForMessage(10, global::Tinkoff.InvestApi.V1.AccruedInterest.Parser);
    private readonly pbc::RepeatedField<global::Tinkoff.InvestApi.V1.AccruedInterest> accruedInterests_ = new pbc::RepeatedField<global::Tinkoff.InvestApi.V1.AccruedInterest>();
    /// <summary>
    ///Массив операций начисления купонов.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Tinkoff.InvestApi.V1.AccruedInterest> AccruedInterests {
      get { return accruedInterests_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as GetAccruedInterestsResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(GetAccruedInterestsResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!accruedInterests_.Equals(other.accruedInterests_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= accruedInterests_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      accruedInterests_.WriteTo(output, _repeated_accruedInterests_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      accruedInterests_.WriteTo(ref output, _repeated_accruedInterests_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      size += accruedInterests_.CalculateSize(_repeated_accruedInterests_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(GetAccruedInterestsResponse other) {
      if (other == null) {
        return;
      }
      accruedInterests_.Add(other.accruedInterests_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            accruedInterests_.AddEntriesFrom(input, _repeated_accruedInterests_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            accruedInterests_.AddEntriesFrom(ref input, _repeated_accruedInterests_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///Операция начисления купонов.
  /// </summary>
  public sealed partial class AccruedInterest : pb::IMessage<AccruedInterest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<AccruedInterest> _parser = new pb::MessageParser<AccruedInterest>(() => new AccruedInterest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<AccruedInterest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tinkoff.InvestApi.V1.InstrumentsReflection.Descriptor.MessageTypes[23]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public AccruedInterest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public AccruedInterest(AccruedInterest other) : this() {
      date_ = other.date_ != null ? other.date_.Clone() : null;
      value_ = other.value_ != null ? other.value_.Clone() : null;
      valuePercent_ = other.valuePercent_ != null ? other.valuePercent_.Clone() : null;
      nominal_ = other.nominal_ != null ? other.nominal_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public AccruedInterest Clone() {
      return new AccruedInterest(this);
    }

    /// <summary>Field number for the "date" field.</summary>
    public const int DateFieldNumber = 1;
    private global::Google.Protobuf.WellKnownTypes.Timestamp date_;
    /// <summary>
    ///Дата и время выплаты в часовом поясе UTC.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.WellKnownTypes.Timestamp Date {
      get { return date_; }
      set {
        date_ = value;
      }
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 2;
    private global::Tinkoff.InvestApi.V1.Quotation value_;
    /// <summary>
    ///Величина выплаты.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Tinkoff.InvestApi.V1.Quotation Value {
      get { return value_; }
      set {
        value_ = value;
      }
    }

    /// <summary>Field number for the "value_percent" field.</summary>
    public const int ValuePercentFieldNumber = 3;
    private global::Tinkoff.InvestApi.V1.Quotation valuePercent_;
    /// <summary>
    ///Величина выплаты в процентах от номинала.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Tinkoff.InvestApi.V1.Quotation ValuePercent {
      get { return valuePercent_; }
      set {
        valuePercent_ = value;
      }
    }

    /// <summary>Field number for the "nominal" field.</summary>
    public const int NominalFieldNumber = 4;
    private global::Tinkoff.InvestApi.V1.Quotation nominal_;
    /// <summary>
    ///Номинал облигации.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Tinkoff.InvestApi.V1.Quotation Nominal {
      get { return nominal_; }
      set {
        nominal_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as AccruedInterest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(AccruedInterest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Date, other.Date)) return false;
      if (!object.Equals(Value, other.Value)) return false;
      if (!object.Equals(ValuePercent, other.ValuePercent)) return false;
      if (!object.Equals(Nominal, other.Nominal)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (date_ != null) hash ^= Date.GetHashCode();
      if (value_ != null) hash ^= Value.GetHashCode();
      if (valuePercent_ != null) hash ^= ValuePercent.GetHashCode();
      if (nominal_ != null) hash ^= Nominal.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (date_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Date);
      }
      if (value_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Value);
      }
      if (valuePercent_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(ValuePercent);
      }
      if (nominal_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Nominal);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (date_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Date);
      }
      if (value_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Value);
      }
      if (valuePercent_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(ValuePercent);
      }
      if (nominal_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Nominal);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (date_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Date);
      }
      if (value_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Value);
      }
      if (valuePercent_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ValuePercent);
      }
      if (nominal_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Nominal);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(AccruedInterest other) {
      if (other == null) {
        return;
      }
      if (other.date_ != null) {
        if (date_ == null) {
          Date = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        Date.MergeFrom(other.Date);
      }
      if (other.value_ != null) {
        if (value_ == null) {
          Value = new global::Tinkoff.InvestApi.V1.Quotation();
        }
        Value.MergeFrom(other.Value);
      }
      if (other.valuePercent_ != null) {
        if (valuePercent_ == null) {
          ValuePercent = new global::Tinkoff.InvestApi.V1.Quotation();
        }
        ValuePercent.MergeFrom(other.ValuePercent);
      }
      if (other.nominal_ != null) {
        if (nominal_ == null) {
          Nominal = new global::Tinkoff.InvestApi.V1.Quotation();
        }
        Nominal.MergeFrom(other.Nominal);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (date_ == null) {
              Date = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(Date);
            break;
          }
          case 18: {
            if (value_ == null) {
              Value = new global::Tinkoff.InvestApi.V1.Quotation();
            }
            input.ReadMessage(Value);
            break;
          }
          case 26: {
            if (valuePercent_ == null) {
              ValuePercent = new global::Tinkoff.InvestApi.V1.Quotation();
            }
            input.ReadMessage(ValuePercent);
            break;
          }
          case 34: {
            if (nominal_ == null) {
              Nominal = new global::Tinkoff.InvestApi.V1.Quotation();
            }
            input.ReadMessage(Nominal);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (date_ == null) {
              Date = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(Date);
            break;
          }
          case 18: {
            if (value_ == null) {
              Value = new global::Tinkoff.InvestApi.V1.Quotation();
            }
            input.ReadMessage(Value);
            break;
          }
          case 26: {
            if (valuePercent_ == null) {
              ValuePercent = new global::Tinkoff.InvestApi.V1.Quotation();
            }
            input.ReadMessage(ValuePercent);
            break;
          }
          case 34: {
            if (nominal_ == null) {
              Nominal = new global::Tinkoff.InvestApi.V1.Quotation();
            }
            input.ReadMessage(Nominal);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///Запрос информации о фьючерсе
  /// </summary>
  public sealed partial class GetFuturesMarginRequest : pb::IMessage<GetFuturesMarginRequest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<GetFuturesMarginRequest> _parser = new pb::MessageParser<GetFuturesMarginRequest>(() => new GetFuturesMarginRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<GetFuturesMarginRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tinkoff.InvestApi.V1.InstrumentsReflection.Descriptor.MessageTypes[24]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public GetFuturesMarginRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public GetFuturesMarginRequest(GetFuturesMarginRequest other) : this() {
      figi_ = other.figi_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public GetFuturesMarginRequest Clone() {
      return new GetFuturesMarginRequest(this);
    }

    /// <summary>Field number for the "figi" field.</summary>
    public const int FigiFieldNumber = 1;
    private string figi_ = "";
    /// <summary>
    /// Идентификатор инструмента.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Figi {
      get { return figi_; }
      set {
        figi_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as GetFuturesMarginRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(GetFuturesMarginRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Figi != other.Figi) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (Figi.Length != 0) hash ^= Figi.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Figi.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Figi);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Figi.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Figi);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (Figi.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Figi);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(GetFuturesMarginRequest other) {
      if (other == null) {
        return;
      }
      if (other.Figi.Length != 0) {
        Figi = other.Figi;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Figi = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Figi = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///Данные по фьючерсу
  /// </summary>
  public sealed partial class GetFuturesMarginResponse : pb::IMessage<GetFuturesMarginResponse>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<GetFuturesMarginResponse> _parser = new pb::MessageParser<GetFuturesMarginResponse>(() => new GetFuturesMarginResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<GetFuturesMarginResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tinkoff.InvestApi.V1.InstrumentsReflection.Descriptor.MessageTypes[25]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public GetFuturesMarginResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public GetFuturesMarginResponse(GetFuturesMarginResponse other) : this() {
      initialMarginOnBuy_ = other.initialMarginOnBuy_ != null ? other.initialMarginOnBuy_.Clone() : null;
      initialMarginOnSell_ = other.initialMarginOnSell_ != null ? other.initialMarginOnSell_.Clone() : null;
      minPriceIncrement_ = other.minPriceIncrement_ != null ? other.minPriceIncrement_.Clone() : null;
      minPriceIncrementAmount_ = other.minPriceIncrementAmount_ != null ? other.minPriceIncrementAmount_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public GetFuturesMarginResponse Clone() {
      return new GetFuturesMarginResponse(this);
    }

    /// <summary>Field number for the "initial_margin_on_buy" field.</summary>
    public const int InitialMarginOnBuyFieldNumber = 1;
    private global::Tinkoff.InvestApi.V1.MoneyValue initialMarginOnBuy_;
    /// <summary>
    ///Гарантийное обеспечение при покупке.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Tinkoff.InvestApi.V1.MoneyValue InitialMarginOnBuy {
      get { return initialMarginOnBuy_; }
      set {
        initialMarginOnBuy_ = value;
      }
    }

    /// <summary>Field number for the "initial_margin_on_sell" field.</summary>
    public const int InitialMarginOnSellFieldNumber = 2;
    private global::Tinkoff.InvestApi.V1.MoneyValue initialMarginOnSell_;
    /// <summary>
    ///Гарантийное обеспечение при продаже.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Tinkoff.InvestApi.V1.MoneyValue InitialMarginOnSell {
      get { return initialMarginOnSell_; }
      set {
        initialMarginOnSell_ = value;
      }
    }

    /// <summary>Field number for the "min_price_increment" field.</summary>
    public const int MinPriceIncrementFieldNumber = 3;
    private global::Tinkoff.InvestApi.V1.Quotation minPriceIncrement_;
    /// <summary>
    ///Шаг цены.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Tinkoff.InvestApi.V1.Quotation MinPriceIncrement {
      get { return minPriceIncrement_; }
      set {
        minPriceIncrement_ = value;
      }
    }

    /// <summary>Field number for the "min_price_increment_amount" field.</summary>
    public const int MinPriceIncrementAmountFieldNumber = 4;
    private global::Tinkoff.InvestApi.V1.Quotation minPriceIncrementAmount_;
    /// <summary>
    ///Стоимость шага цены.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Tinkoff.InvestApi.V1.Quotation MinPriceIncrementAmount {
      get { return minPriceIncrementAmount_; }
      set {
        minPriceIncrementAmount_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as GetFuturesMarginResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(GetFuturesMarginResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(InitialMarginOnBuy, other.InitialMarginOnBuy)) return false;
      if (!object.Equals(InitialMarginOnSell, other.InitialMarginOnSell)) return false;
      if (!object.Equals(MinPriceIncrement, other.MinPriceIncrement)) return false;
      if (!object.Equals(MinPriceIncrementAmount, other.MinPriceIncrementAmount)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (initialMarginOnBuy_ != null) hash ^= InitialMarginOnBuy.GetHashCode();
      if (initialMarginOnSell_ != null) hash ^= InitialMarginOnSell.GetHashCode();
      if (minPriceIncrement_ != null) hash ^= MinPriceIncrement.GetHashCode();
      if (minPriceIncrementAmount_ != null) hash ^= MinPriceIncrementAmount.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (initialMarginOnBuy_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(InitialMarginOnBuy);
      }
      if (initialMarginOnSell_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(InitialMarginOnSell);
      }
      if (minPriceIncrement_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(MinPriceIncrement);
      }
      if (minPriceIncrementAmount_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(MinPriceIncrementAmount);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (initialMarginOnBuy_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(InitialMarginOnBuy);
      }
      if (initialMarginOnSell_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(InitialMarginOnSell);
      }
      if (minPriceIncrement_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(MinPriceIncrement);
      }
      if (minPriceIncrementAmount_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(MinPriceIncrementAmount);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (initialMarginOnBuy_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(InitialMarginOnBuy);
      }
      if (initialMarginOnSell_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(InitialMarginOnSell);
      }
      if (minPriceIncrement_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(MinPriceIncrement);
      }
      if (minPriceIncrementAmount_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(MinPriceIncrementAmount);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(GetFuturesMarginResponse other) {
      if (other == null) {
        return;
      }
      if (other.initialMarginOnBuy_ != null) {
        if (initialMarginOnBuy_ == null) {
          InitialMarginOnBuy = new global::Tinkoff.InvestApi.V1.MoneyValue();
        }
        InitialMarginOnBuy.MergeFrom(other.InitialMarginOnBuy);
      }
      if (other.initialMarginOnSell_ != null) {
        if (initialMarginOnSell_ == null) {
          InitialMarginOnSell = new global::Tinkoff.InvestApi.V1.MoneyValue();
        }
        InitialMarginOnSell.MergeFrom(other.InitialMarginOnSell);
      }
      if (other.minPriceIncrement_ != null) {
        if (minPriceIncrement_ == null) {
          MinPriceIncrement = new global::Tinkoff.InvestApi.V1.Quotation();
        }
        MinPriceIncrement.MergeFrom(other.MinPriceIncrement);
      }
      if (other.minPriceIncrementAmount_ != null) {
        if (minPriceIncrementAmount_ == null) {
          MinPriceIncrementAmount = new global::Tinkoff.InvestApi.V1.Quotation();
        }
        MinPriceIncrementAmount.MergeFrom(other.MinPriceIncrementAmount);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (initialMarginOnBuy_ == null) {
              InitialMarginOnBuy = new global::Tinkoff.InvestApi.V1.MoneyValue();
            }
            input.ReadMessage(InitialMarginOnBuy);
            break;
          }
          case 18: {
            if (initialMarginOnSell_ == null) {
              InitialMarginOnSell = new global::Tinkoff.InvestApi.V1.MoneyValue();
            }
            input.ReadMessage(InitialMarginOnSell);
            break;
          }
          case 26: {
            if (minPriceIncrement_ == null) {
              MinPriceIncrement = new global::Tinkoff.InvestApi.V1.Quotation();
            }
            input.ReadMessage(MinPriceIncrement);
            break;
          }
          case 34: {
            if (minPriceIncrementAmount_ == null) {
              MinPriceIncrementAmount = new global::Tinkoff.InvestApi.V1.Quotation();
            }
            input.ReadMessage(MinPriceIncrementAmount);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (initialMarginOnBuy_ == null) {
              InitialMarginOnBuy = new global::Tinkoff.InvestApi.V1.MoneyValue();
            }
            input.ReadMessage(InitialMarginOnBuy);
            break;
          }
          case 18: {
            if (initialMarginOnSell_ == null) {
              InitialMarginOnSell = new global::Tinkoff.InvestApi.V1.MoneyValue();
            }
            input.ReadMessage(InitialMarginOnSell);
            break;
          }
          case 26: {
            if (minPriceIncrement_ == null) {
              MinPriceIncrement = new global::Tinkoff.InvestApi.V1.Quotation();
            }
            input.ReadMessage(MinPriceIncrement);
            break;
          }
          case 34: {
            if (minPriceIncrementAmount_ == null) {
              MinPriceIncrementAmount = new global::Tinkoff.InvestApi.V1.Quotation();
            }
            input.ReadMessage(MinPriceIncrementAmount);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///Данные по инструменту.
  /// </summary>
  public sealed partial class InstrumentResponse : pb::IMessage<InstrumentResponse>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<InstrumentResponse> _parser = new pb::MessageParser<InstrumentResponse>(() => new InstrumentResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<InstrumentResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tinkoff.InvestApi.V1.InstrumentsReflection.Descriptor.MessageTypes[26]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public InstrumentResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public InstrumentResponse(InstrumentResponse other) : this() {
      instrument_ = other.instrument_ != null ? other.instrument_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public InstrumentResponse Clone() {
      return new InstrumentResponse(this);
    }

    /// <summary>Field number for the "instrument" field.</summary>
    public const int InstrumentFieldNumber = 1;
    private global::Tinkoff.InvestApi.V1.Instrument instrument_;
    /// <summary>
    /// Основная информация об инструменте.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Tinkoff.InvestApi.V1.Instrument Instrument {
      get { return instrument_; }
      set {
        instrument_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as InstrumentResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(InstrumentResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Instrument, other.Instrument)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (instrument_ != null) hash ^= Instrument.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (instrument_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Instrument);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (instrument_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Instrument);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (instrument_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Instrument);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(InstrumentResponse other) {
      if (other == null) {
        return;
      }
      if (other.instrument_ != null) {
        if (instrument_ == null) {
          Instrument = new global::Tinkoff.InvestApi.V1.Instrument();
        }
        Instrument.MergeFrom(other.Instrument);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (instrument_ == null) {
              Instrument = new global::Tinkoff.InvestApi.V1.Instrument();
            }
            input.ReadMessage(Instrument);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (instrument_ == null) {
              Instrument = new global::Tinkoff.InvestApi.V1.Instrument();
            }
            input.ReadMessage(Instrument);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///Объект передачи основной информации об инструменте.
  /// </summary>
  public sealed partial class Instrument : pb::IMessage<Instrument>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Instrument> _parser = new pb::MessageParser<Instrument>(() => new Instrument());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<Instrument> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tinkoff.InvestApi.V1.InstrumentsReflection.Descriptor.MessageTypes[27]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Instrument() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Instrument(Instrument other) : this() {
      figi_ = other.figi_;
      ticker_ = other.ticker_;
      classCode_ = other.classCode_;
      isin_ = other.isin_;
      lot_ = other.lot_;
      currency_ = other.currency_;
      klong_ = other.klong_ != null ? other.klong_.Clone() : null;
      kshort_ = other.kshort_ != null ? other.kshort_.Clone() : null;
      dlong_ = other.dlong_ != null ? other.dlong_.Clone() : null;
      dshort_ = other.dshort_ != null ? other.dshort_.Clone() : null;
      dlongMin_ = other.dlongMin_ != null ? other.dlongMin_.Clone() : null;
      dshortMin_ = other.dshortMin_ != null ? other.dshortMin_.Clone() : null;
      shortEnabledFlag_ = other.shortEnabledFlag_;
      name_ = other.name_;
      exchange_ = other.exchange_;
      countryOfRisk_ = other.countryOfRisk_;
      countryOfRiskName_ = other.countryOfRiskName_;
      instrumentType_ = other.instrumentType_;
      tradingStatus_ = other.tradingStatus_;
      otcFlag_ = other.otcFlag_;
      buyAvailableFlag_ = other.buyAvailableFlag_;
      sellAvailableFlag_ = other.sellAvailableFlag_;
      minPriceIncrement_ = other.minPriceIncrement_ != null ? other.minPriceIncrement_.Clone() : null;
      apiTradeAvailableFlag_ = other.apiTradeAvailableFlag_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Instrument Clone() {
      return new Instrument(this);
    }

    /// <summary>Field number for the "figi" field.</summary>
    public const int FigiFieldNumber = 1;
    private string figi_ = "";
    /// <summary>
    ///Figi-идентификатор инструмента.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Figi {
      get { return figi_; }
      set {
        figi_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ticker" field.</summary>
    public const int TickerFieldNumber = 2;
    private string ticker_ = "";
    /// <summary>
    ///Тикер инструмента.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Ticker {
      get { return ticker_; }
      set {
        ticker_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "class_code" field.</summary>
    public const int ClassCodeFieldNumber = 3;
    private string classCode_ = "";
    /// <summary>
    ///Класс-код инструмента.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string ClassCode {
      get { return classCode_; }
      set {
        classCode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "isin" field.</summary>
    public const int IsinFieldNumber = 4;
    private string isin_ = "";
    /// <summary>
    ///Isin-идентификатор инструмента.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Isin {
      get { return isin_; }
      set {
        isin_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "lot" field.</summary>
    public const int LotFieldNumber = 5;
    private int lot_;
    /// <summary>
    ///Лотность инструмента. Возможно совершение операций только на количества ценной бумаги, кратные параметру *lot*. Подробнее: [лот](https://tinkoff.github.io/investAPI/glossary#lot)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Lot {
      get { return lot_; }
      set {
        lot_ = value;
      }
    }

    /// <summary>Field number for the "currency" field.</summary>
    public const int CurrencyFieldNumber = 6;
    private string currency_ = "";
    /// <summary>
    ///Валюта расчётов.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Currency {
      get { return currency_; }
      set {
        currency_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "klong" field.</summary>
    public const int KlongFieldNumber = 7;
    private global::Tinkoff.InvestApi.V1.Quotation klong_;
    /// <summary>
    ///Коэффициент ставки риска длинной позиции по инструменту.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Tinkoff.InvestApi.V1.Quotation Klong {
      get { return klong_; }
      set {
        klong_ = value;
      }
    }

    /// <summary>Field number for the "kshort" field.</summary>
    public const int KshortFieldNumber = 8;
    private global::Tinkoff.InvestApi.V1.Quotation kshort_;
    /// <summary>
    ///Коэффициент ставки риска короткой позиции по инструменту.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Tinkoff.InvestApi.V1.Quotation Kshort {
      get { return kshort_; }
      set {
        kshort_ = value;
      }
    }

    /// <summary>Field number for the "dlong" field.</summary>
    public const int DlongFieldNumber = 9;
    private global::Tinkoff.InvestApi.V1.Quotation dlong_;
    /// <summary>
    ///Ставка риска минимальной маржи в лонг. Подробнее: [ставка риска в лонг](https://help.tinkoff.ru/margin-trade/long/risk-rate/)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Tinkoff.InvestApi.V1.Quotation Dlong {
      get { return dlong_; }
      set {
        dlong_ = value;
      }
    }

    /// <summary>Field number for the "dshort" field.</summary>
    public const int DshortFieldNumber = 10;
    private global::Tinkoff.InvestApi.V1.Quotation dshort_;
    /// <summary>
    ///Ставка риска минимальной маржи в шорт. Подробнее: [ставка риска в шорт](https://help.tinkoff.ru/margin-trade/short/risk-rate/)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Tinkoff.InvestApi.V1.Quotation Dshort {
      get { return dshort_; }
      set {
        dshort_ = value;
      }
    }

    /// <summary>Field number for the "dlong_min" field.</summary>
    public const int DlongMinFieldNumber = 11;
    private global::Tinkoff.InvestApi.V1.Quotation dlongMin_;
    /// <summary>
    ///Ставка риска начальной маржи в лонг. Подробнее: [ставка риска в лонг](https://help.tinkoff.ru/margin-trade/long/risk-rate/)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Tinkoff.InvestApi.V1.Quotation DlongMin {
      get { return dlongMin_; }
      set {
        dlongMin_ = value;
      }
    }

    /// <summary>Field number for the "dshort_min" field.</summary>
    public const int DshortMinFieldNumber = 12;
    private global::Tinkoff.InvestApi.V1.Quotation dshortMin_;
    /// <summary>
    ///Ставка риска начальной маржи в шорт. Подробнее: [ставка риска в шорт](https://help.tinkoff.ru/margin-trade/short/risk-rate/)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Tinkoff.InvestApi.V1.Quotation DshortMin {
      get { return dshortMin_; }
      set {
        dshortMin_ = value;
      }
    }

    /// <summary>Field number for the "short_enabled_flag" field.</summary>
    public const int ShortEnabledFlagFieldNumber = 13;
    private bool shortEnabledFlag_;
    /// <summary>
    ///Признак доступности для операций в шорт.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool ShortEnabledFlag {
      get { return shortEnabledFlag_; }
      set {
        shortEnabledFlag_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 14;
    private string name_ = "";
    /// <summary>
    ///Название инструмента.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "exchange" field.</summary>
    public const int ExchangeFieldNumber = 15;
    private string exchange_ = "";
    /// <summary>
    ///Торговая площадка.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Exchange {
      get { return exchange_; }
      set {
        exchange_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "country_of_risk" field.</summary>
    public const int CountryOfRiskFieldNumber = 16;
    private string countryOfRisk_ = "";
    /// <summary>
    ///Код страны эмитента.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string CountryOfRisk {
      get { return countryOfRisk_; }
      set {
        countryOfRisk_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "country_of_risk_name" field.</summary>
    public const int CountryOfRiskNameFieldNumber = 17;
    private string countryOfRiskName_ = "";
    /// <summary>
    ///Наименование страны эмитента.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string CountryOfRiskName {
      get { return countryOfRiskName_; }
      set {
        countryOfRiskName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "instrument_type" field.</summary>
    public const int InstrumentTypeFieldNumber = 18;
    private string instrumentType_ = "";
    /// <summary>
    ///Тип инструмента.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string InstrumentType {
      get { return instrumentType_; }
      set {
        instrumentType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "trading_status" field.</summary>
    public const int TradingStatusFieldNumber = 19;
    private global::Tinkoff.InvestApi.V1.SecurityTradingStatus tradingStatus_ = global::Tinkoff.InvestApi.V1.SecurityTradingStatus.Unspecified;
    /// <summary>
    ///Текущий режим торгов инструмента.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Tinkoff.InvestApi.V1.SecurityTradingStatus TradingStatus {
      get { return tradingStatus_; }
      set {
        tradingStatus_ = value;
      }
    }

    /// <summary>Field number for the "otc_flag" field.</summary>
    public const int OtcFlagFieldNumber = 20;
    private bool otcFlag_;
    /// <summary>
    ///Признак внебиржевой ценной бумаги.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool OtcFlag {
      get { return otcFlag_; }
      set {
        otcFlag_ = value;
      }
    }

    /// <summary>Field number for the "buy_available_flag" field.</summary>
    public const int BuyAvailableFlagFieldNumber = 21;
    private bool buyAvailableFlag_;
    /// <summary>
    ///Признак доступности для покупки.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool BuyAvailableFlag {
      get { return buyAvailableFlag_; }
      set {
        buyAvailableFlag_ = value;
      }
    }

    /// <summary>Field number for the "sell_available_flag" field.</summary>
    public const int SellAvailableFlagFieldNumber = 22;
    private bool sellAvailableFlag_;
    /// <summary>
    ///Признак доступности для продажи.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool SellAvailableFlag {
      get { return sellAvailableFlag_; }
      set {
        sellAvailableFlag_ = value;
      }
    }

    /// <summary>Field number for the "min_price_increment" field.</summary>
    public const int MinPriceIncrementFieldNumber = 23;
    private global::Tinkoff.InvestApi.V1.Quotation minPriceIncrement_;
    /// <summary>
    ///Шаг цены.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Tinkoff.InvestApi.V1.Quotation MinPriceIncrement {
      get { return minPriceIncrement_; }
      set {
        minPriceIncrement_ = value;
      }
    }

    /// <summary>Field number for the "api_trade_available_flag" field.</summary>
    public const int ApiTradeAvailableFlagFieldNumber = 24;
    private bool apiTradeAvailableFlag_;
    /// <summary>
    ///Признак доступности торгов через API.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool ApiTradeAvailableFlag {
      get { return apiTradeAvailableFlag_; }
      set {
        apiTradeAvailableFlag_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as Instrument);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(Instrument other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Figi != other.Figi) return false;
      if (Ticker != other.Ticker) return false;
      if (ClassCode != other.ClassCode) return false;
      if (Isin != other.Isin) return false;
      if (Lot != other.Lot) return false;
      if (Currency != other.Currency) return false;
      if (!object.Equals(Klong, other.Klong)) return false;
      if (!object.Equals(Kshort, other.Kshort)) return false;
      if (!object.Equals(Dlong, other.Dlong)) return false;
      if (!object.Equals(Dshort, other.Dshort)) return false;
      if (!object.Equals(DlongMin, other.DlongMin)) return false;
      if (!object.Equals(DshortMin, other.DshortMin)) return false;
      if (ShortEnabledFlag != other.ShortEnabledFlag) return false;
      if (Name != other.Name) return false;
      if (Exchange != other.Exchange) return false;
      if (CountryOfRisk != other.CountryOfRisk) return false;
      if (CountryOfRiskName != other.CountryOfRiskName) return false;
      if (InstrumentType != other.InstrumentType) return false;
      if (TradingStatus != other.TradingStatus) return false;
      if (OtcFlag != other.OtcFlag) return false;
      if (BuyAvailableFlag != other.BuyAvailableFlag) return false;
      if (SellAvailableFlag != other.SellAvailableFlag) return false;
      if (!object.Equals(MinPriceIncrement, other.MinPriceIncrement)) return false;
      if (ApiTradeAvailableFlag != other.ApiTradeAvailableFlag) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (Figi.Length != 0) hash ^= Figi.GetHashCode();
      if (Ticker.Length != 0) hash ^= Ticker.GetHashCode();
      if (ClassCode.Length != 0) hash ^= ClassCode.GetHashCode();
      if (Isin.Length != 0) hash ^= Isin.GetHashCode();
      if (Lot != 0) hash ^= Lot.GetHashCode();
      if (Currency.Length != 0) hash ^= Currency.GetHashCode();
      if (klong_ != null) hash ^= Klong.GetHashCode();
      if (kshort_ != null) hash ^= Kshort.GetHashCode();
      if (dlong_ != null) hash ^= Dlong.GetHashCode();
      if (dshort_ != null) hash ^= Dshort.GetHashCode();
      if (dlongMin_ != null) hash ^= DlongMin.GetHashCode();
      if (dshortMin_ != null) hash ^= DshortMin.GetHashCode();
      if (ShortEnabledFlag != false) hash ^= ShortEnabledFlag.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Exchange.Length != 0) hash ^= Exchange.GetHashCode();
      if (CountryOfRisk.Length != 0) hash ^= CountryOfRisk.GetHashCode();
      if (CountryOfRiskName.Length != 0) hash ^= CountryOfRiskName.GetHashCode();
      if (InstrumentType.Length != 0) hash ^= InstrumentType.GetHashCode();
      if (TradingStatus != global::Tinkoff.InvestApi.V1.SecurityTradingStatus.Unspecified) hash ^= TradingStatus.GetHashCode();
      if (OtcFlag != false) hash ^= OtcFlag.GetHashCode();
      if (BuyAvailableFlag != false) hash ^= BuyAvailableFlag.GetHashCode();
      if (SellAvailableFlag != false) hash ^= SellAvailableFlag.GetHashCode();
      if (minPriceIncrement_ != null) hash ^= MinPriceIncrement.GetHashCode();
      if (ApiTradeAvailableFlag != false) hash ^= ApiTradeAvailableFlag.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Figi.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Figi);
      }
      if (Ticker.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Ticker);
      }
      if (ClassCode.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(ClassCode);
      }
      if (Isin.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Isin);
      }
      if (Lot != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Lot);
      }
      if (Currency.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Currency);
      }
      if (klong_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(Klong);
      }
      if (kshort_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(Kshort);
      }
      if (dlong_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(Dlong);
      }
      if (dshort_ != null) {
        output.WriteRawTag(82);
        output.WriteMessage(Dshort);
      }
      if (dlongMin_ != null) {
        output.WriteRawTag(90);
        output.WriteMessage(DlongMin);
      }
      if (dshortMin_ != null) {
        output.WriteRawTag(98);
        output.WriteMessage(DshortMin);
      }
      if (ShortEnabledFlag != false) {
        output.WriteRawTag(104);
        output.WriteBool(ShortEnabledFlag);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(114);
        output.WriteString(Name);
      }
      if (Exchange.Length != 0) {
        output.WriteRawTag(122);
        output.WriteString(Exchange);
      }
      if (CountryOfRisk.Length != 0) {
        output.WriteRawTag(130, 1);
        output.WriteString(CountryOfRisk);
      }
      if (CountryOfRiskName.Length != 0) {
        output.WriteRawTag(138, 1);
        output.WriteString(CountryOfRiskName);
      }
      if (InstrumentType.Length != 0) {
        output.WriteRawTag(146, 1);
        output.WriteString(InstrumentType);
      }
      if (TradingStatus != global::Tinkoff.InvestApi.V1.SecurityTradingStatus.Unspecified) {
        output.WriteRawTag(152, 1);
        output.WriteEnum((int) TradingStatus);
      }
      if (OtcFlag != false) {
        output.WriteRawTag(160, 1);
        output.WriteBool(OtcFlag);
      }
      if (BuyAvailableFlag != false) {
        output.WriteRawTag(168, 1);
        output.WriteBool(BuyAvailableFlag);
      }
      if (SellAvailableFlag != false) {
        output.WriteRawTag(176, 1);
        output.WriteBool(SellAvailableFlag);
      }
      if (minPriceIncrement_ != null) {
        output.WriteRawTag(186, 1);
        output.WriteMessage(MinPriceIncrement);
      }
      if (ApiTradeAvailableFlag != false) {
        output.WriteRawTag(192, 1);
        output.WriteBool(ApiTradeAvailableFlag);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Figi.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Figi);
      }
      if (Ticker.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Ticker);
      }
      if (ClassCode.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(ClassCode);
      }
      if (Isin.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Isin);
      }
      if (Lot != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Lot);
      }
      if (Currency.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Currency);
      }
      if (klong_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(Klong);
      }
      if (kshort_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(Kshort);
      }
      if (dlong_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(Dlong);
      }
      if (dshort_ != null) {
        output.WriteRawTag(82);
        output.WriteMessage(Dshort);
      }
      if (dlongMin_ != null) {
        output.WriteRawTag(90);
        output.WriteMessage(DlongMin);
      }
      if (dshortMin_ != null) {
        output.WriteRawTag(98);
        output.WriteMessage(DshortMin);
      }
      if (ShortEnabledFlag != false) {
        output.WriteRawTag(104);
        output.WriteBool(ShortEnabledFlag);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(114);
        output.WriteString(Name);
      }
      if (Exchange.Length != 0) {
        output.WriteRawTag(122);
        output.WriteString(Exchange);
      }
      if (CountryOfRisk.Length != 0) {
        output.WriteRawTag(130, 1);
        output.WriteString(CountryOfRisk);
      }
      if (CountryOfRiskName.Length != 0) {
        output.WriteRawTag(138, 1);
        output.WriteString(CountryOfRiskName);
      }
      if (InstrumentType.Length != 0) {
        output.WriteRawTag(146, 1);
        output.WriteString(InstrumentType);
      }
      if (TradingStatus != global::Tinkoff.InvestApi.V1.SecurityTradingStatus.Unspecified) {
        output.WriteRawTag(152, 1);
        output.WriteEnum((int) TradingStatus);
      }
      if (OtcFlag != false) {
        output.WriteRawTag(160, 1);
        output.WriteBool(OtcFlag);
      }
      if (BuyAvailableFlag != false) {
        output.WriteRawTag(168, 1);
        output.WriteBool(BuyAvailableFlag);
      }
      if (SellAvailableFlag != false) {
        output.WriteRawTag(176, 1);
        output.WriteBool(SellAvailableFlag);
      }
      if (minPriceIncrement_ != null) {
        output.WriteRawTag(186, 1);
        output.WriteMessage(MinPriceIncrement);
      }
      if (ApiTradeAvailableFlag != false) {
        output.WriteRawTag(192, 1);
        output.WriteBool(ApiTradeAvailableFlag);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (Figi.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Figi);
      }
      if (Ticker.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Ticker);
      }
      if (ClassCode.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ClassCode);
      }
      if (Isin.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Isin);
      }
      if (Lot != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Lot);
      }
      if (Currency.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Currency);
      }
      if (klong_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Klong);
      }
      if (kshort_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Kshort);
      }
      if (dlong_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Dlong);
      }
      if (dshort_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Dshort);
      }
      if (dlongMin_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DlongMin);
      }
      if (dshortMin_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DshortMin);
      }
      if (ShortEnabledFlag != false) {
        size += 1 + 1;
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Exchange.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Exchange);
      }
      if (CountryOfRisk.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(CountryOfRisk);
      }
      if (CountryOfRiskName.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(CountryOfRiskName);
      }
      if (InstrumentType.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(InstrumentType);
      }
      if (TradingStatus != global::Tinkoff.InvestApi.V1.SecurityTradingStatus.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) TradingStatus);
      }
      if (OtcFlag != false) {
        size += 2 + 1;
      }
      if (BuyAvailableFlag != false) {
        size += 2 + 1;
      }
      if (SellAvailableFlag != false) {
        size += 2 + 1;
      }
      if (minPriceIncrement_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(MinPriceIncrement);
      }
      if (ApiTradeAvailableFlag != false) {
        size += 2 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(Instrument other) {
      if (other == null) {
        return;
      }
      if (other.Figi.Length != 0) {
        Figi = other.Figi;
      }
      if (other.Ticker.Length != 0) {
        Ticker = other.Ticker;
      }
      if (other.ClassCode.Length != 0) {
        ClassCode = other.ClassCode;
      }
      if (other.Isin.Length != 0) {
        Isin = other.Isin;
      }
      if (other.Lot != 0) {
        Lot = other.Lot;
      }
      if (other.Currency.Length != 0) {
        Currency = other.Currency;
      }
      if (other.klong_ != null) {
        if (klong_ == null) {
          Klong = new global::Tinkoff.InvestApi.V1.Quotation();
        }
        Klong.MergeFrom(other.Klong);
      }
      if (other.kshort_ != null) {
        if (kshort_ == null) {
          Kshort = new global::Tinkoff.InvestApi.V1.Quotation();
        }
        Kshort.MergeFrom(other.Kshort);
      }
      if (other.dlong_ != null) {
        if (dlong_ == null) {
          Dlong = new global::Tinkoff.InvestApi.V1.Quotation();
        }
        Dlong.MergeFrom(other.Dlong);
      }
      if (other.dshort_ != null) {
        if (dshort_ == null) {
          Dshort = new global::Tinkoff.InvestApi.V1.Quotation();
        }
        Dshort.MergeFrom(other.Dshort);
      }
      if (other.dlongMin_ != null) {
        if (dlongMin_ == null) {
          DlongMin = new global::Tinkoff.InvestApi.V1.Quotation();
        }
        DlongMin.MergeFrom(other.DlongMin);
      }
      if (other.dshortMin_ != null) {
        if (dshortMin_ == null) {
          DshortMin = new global::Tinkoff.InvestApi.V1.Quotation();
        }
        DshortMin.MergeFrom(other.DshortMin);
      }
      if (other.ShortEnabledFlag != false) {
        ShortEnabledFlag = other.ShortEnabledFlag;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Exchange.Length != 0) {
        Exchange = other.Exchange;
      }
      if (other.CountryOfRisk.Length != 0) {
        CountryOfRisk = other.CountryOfRisk;
      }
      if (other.CountryOfRiskName.Length != 0) {
        CountryOfRiskName = other.CountryOfRiskName;
      }
      if (other.InstrumentType.Length != 0) {
        InstrumentType = other.InstrumentType;
      }
      if (other.TradingStatus != global::Tinkoff.InvestApi.V1.SecurityTradingStatus.Unspecified) {
        TradingStatus = other.TradingStatus;
      }
      if (other.OtcFlag != false) {
        OtcFlag = other.OtcFlag;
      }
      if (other.BuyAvailableFlag != false) {
        BuyAvailableFlag = other.BuyAvailableFlag;
      }
      if (other.SellAvailableFlag != false) {
        SellAvailableFlag = other.SellAvailableFlag;
      }
      if (other.minPriceIncrement_ != null) {
        if (minPriceIncrement_ == null) {
          MinPriceIncrement = new global::Tinkoff.InvestApi.V1.Quotation();
        }
        MinPriceIncrement.MergeFrom(other.MinPriceIncrement);
      }
      if (other.ApiTradeAvailableFlag != false) {
        ApiTradeAvailableFlag = other.ApiTradeAvailableFlag;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Figi = input.ReadString();
            break;
          }
          case 18: {
            Ticker = input.ReadString();
            break;
          }
          case 26: {
            ClassCode = input.ReadString();
            break;
          }
          case 34: {
            Isin = input.ReadString();
            break;
          }
          case 40: {
            Lot = input.ReadInt32();
            break;
          }
          case 50: {
            Currency = input.ReadString();
            break;
          }
          case 58: {
            if (klong_ == null) {
              Klong = new global::Tinkoff.InvestApi.V1.Quotation();
            }
            input.ReadMessage(Klong);
            break;
          }
          case 66: {
            if (kshort_ == null) {
              Kshort = new global::Tinkoff.InvestApi.V1.Quotation();
            }
            input.ReadMessage(Kshort);
            break;
          }
          case 74: {
            if (dlong_ == null) {
              Dlong = new global::Tinkoff.InvestApi.V1.Quotation();
            }
            input.ReadMessage(Dlong);
            break;
          }
          case 82: {
            if (dshort_ == null) {
              Dshort = new global::Tinkoff.InvestApi.V1.Quotation();
            }
            input.ReadMessage(Dshort);
            break;
          }
          case 90: {
            if (dlongMin_ == null) {
              DlongMin = new global::Tinkoff.InvestApi.V1.Quotation();
            }
            input.ReadMessage(DlongMin);
            break;
          }
          case 98: {
            if (dshortMin_ == null) {
              DshortMin = new global::Tinkoff.InvestApi.V1.Quotation();
            }
            input.ReadMessage(DshortMin);
            break;
          }
          case 104: {
            ShortEnabledFlag = input.ReadBool();
            break;
          }
          case 114: {
            Name = input.ReadString();
            break;
          }
          case 122: {
            Exchange = input.ReadString();
            break;
          }
          case 130: {
            CountryOfRisk = input.ReadString();
            break;
          }
          case 138: {
            CountryOfRiskName = input.ReadString();
            break;
          }
          case 146: {
            InstrumentType = input.ReadString();
            break;
          }
          case 152: {
            TradingStatus = (global::Tinkoff.InvestApi.V1.SecurityTradingStatus) input.ReadEnum();
            break;
          }
          case 160: {
            OtcFlag = input.ReadBool();
            break;
          }
          case 168: {
            BuyAvailableFlag = input.ReadBool();
            break;
          }
          case 176: {
            SellAvailableFlag = input.ReadBool();
            break;
          }
          case 186: {
            if (minPriceIncrement_ == null) {
              MinPriceIncrement = new global::Tinkoff.InvestApi.V1.Quotation();
            }
            input.ReadMessage(MinPriceIncrement);
            break;
          }
          case 192: {
            ApiTradeAvailableFlag = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Figi = input.ReadString();
            break;
          }
          case 18: {
            Ticker = input.ReadString();
            break;
          }
          case 26: {
            ClassCode = input.ReadString();
            break;
          }
          case 34: {
            Isin = input.ReadString();
            break;
          }
          case 40: {
            Lot = input.ReadInt32();
            break;
          }
          case 50: {
            Currency = input.ReadString();
            break;
          }
          case 58: {
            if (klong_ == null) {
              Klong = new global::Tinkoff.InvestApi.V1.Quotation();
            }
            input.ReadMessage(Klong);
            break;
          }
          case 66: {
            if (kshort_ == null) {
              Kshort = new global::Tinkoff.InvestApi.V1.Quotation();
            }
            input.ReadMessage(Kshort);
            break;
          }
          case 74: {
            if (dlong_ == null) {
              Dlong = new global::Tinkoff.InvestApi.V1.Quotation();
            }
            input.ReadMessage(Dlong);
            break;
          }
          case 82: {
            if (dshort_ == null) {
              Dshort = new global::Tinkoff.InvestApi.V1.Quotation();
            }
            input.ReadMessage(Dshort);
            break;
          }
          case 90: {
            if (dlongMin_ == null) {
              DlongMin = new global::Tinkoff.InvestApi.V1.Quotation();
            }
            input.ReadMessage(DlongMin);
            break;
          }
          case 98: {
            if (dshortMin_ == null) {
              DshortMin = new global::Tinkoff.InvestApi.V1.Quotation();
            }
            input.ReadMessage(DshortMin);
            break;
          }
          case 104: {
            ShortEnabledFlag = input.ReadBool();
            break;
          }
          case 114: {
            Name = input.ReadString();
            break;
          }
          case 122: {
            Exchange = input.ReadString();
            break;
          }
          case 130: {
            CountryOfRisk = input.ReadString();
            break;
          }
          case 138: {
            CountryOfRiskName = input.ReadString();
            break;
          }
          case 146: {
            InstrumentType = input.ReadString();
            break;
          }
          case 152: {
            TradingStatus = (global::Tinkoff.InvestApi.V1.SecurityTradingStatus) input.ReadEnum();
            break;
          }
          case 160: {
            OtcFlag = input.ReadBool();
            break;
          }
          case 168: {
            BuyAvailableFlag = input.ReadBool();
            break;
          }
          case 176: {
            SellAvailableFlag = input.ReadBool();
            break;
          }
          case 186: {
            if (minPriceIncrement_ == null) {
              MinPriceIncrement = new global::Tinkoff.InvestApi.V1.Quotation();
            }
            input.ReadMessage(MinPriceIncrement);
            break;
          }
          case 192: {
            ApiTradeAvailableFlag = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///Запрос дивидендов.
  /// </summary>
  public sealed partial class GetDividendsRequest : pb::IMessage<GetDividendsRequest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<GetDividendsRequest> _parser = new pb::MessageParser<GetDividendsRequest>(() => new GetDividendsRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<GetDividendsRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tinkoff.InvestApi.V1.InstrumentsReflection.Descriptor.MessageTypes[28]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public GetDividendsRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public GetDividendsRequest(GetDividendsRequest other) : this() {
      figi_ = other.figi_;
      from_ = other.from_ != null ? other.from_.Clone() : null;
      to_ = other.to_ != null ? other.to_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public GetDividendsRequest Clone() {
      return new GetDividendsRequest(this);
    }

    /// <summary>Field number for the "figi" field.</summary>
    public const int FigiFieldNumber = 1;
    private string figi_ = "";
    /// <summary>
    ///Figi-идентификатор инструмента.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Figi {
      get { return figi_; }
      set {
        figi_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "from" field.</summary>
    public const int FromFieldNumber = 2;
    private global::Google.Protobuf.WellKnownTypes.Timestamp from_;
    /// <summary>
    ///Начало запрашиваемого периода в часовом поясе UTC.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.WellKnownTypes.Timestamp From {
      get { return from_; }
      set {
        from_ = value;
      }
    }

    /// <summary>Field number for the "to" field.</summary>
    public const int ToFieldNumber = 3;
    private global::Google.Protobuf.WellKnownTypes.Timestamp to_;
    /// <summary>
    ///Окончание запрашиваемого периода в часовом поясе UTC.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.WellKnownTypes.Timestamp To {
      get { return to_; }
      set {
        to_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as GetDividendsRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(GetDividendsRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Figi != other.Figi) return false;
      if (!object.Equals(From, other.From)) return false;
      if (!object.Equals(To, other.To)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (Figi.Length != 0) hash ^= Figi.GetHashCode();
      if (from_ != null) hash ^= From.GetHashCode();
      if (to_ != null) hash ^= To.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Figi.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Figi);
      }
      if (from_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(From);
      }
      if (to_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(To);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Figi.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Figi);
      }
      if (from_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(From);
      }
      if (to_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(To);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (Figi.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Figi);
      }
      if (from_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(From);
      }
      if (to_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(To);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(GetDividendsRequest other) {
      if (other == null) {
        return;
      }
      if (other.Figi.Length != 0) {
        Figi = other.Figi;
      }
      if (other.from_ != null) {
        if (from_ == null) {
          From = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        From.MergeFrom(other.From);
      }
      if (other.to_ != null) {
        if (to_ == null) {
          To = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        To.MergeFrom(other.To);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Figi = input.ReadString();
            break;
          }
          case 18: {
            if (from_ == null) {
              From = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(From);
            break;
          }
          case 26: {
            if (to_ == null) {
              To = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(To);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Figi = input.ReadString();
            break;
          }
          case 18: {
            if (from_ == null) {
              From = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(From);
            break;
          }
          case 26: {
            if (to_ == null) {
              To = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(To);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///Дивиденды.
  /// </summary>
  public sealed partial class GetDividendsResponse : pb::IMessage<GetDividendsResponse>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<GetDividendsResponse> _parser = new pb::MessageParser<GetDividendsResponse>(() => new GetDividendsResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<GetDividendsResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tinkoff.InvestApi.V1.InstrumentsReflection.Descriptor.MessageTypes[29]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public GetDividendsResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public GetDividendsResponse(GetDividendsResponse other) : this() {
      dividends_ = other.dividends_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public GetDividendsResponse Clone() {
      return new GetDividendsResponse(this);
    }

    /// <summary>Field number for the "dividends" field.</summary>
    public const int DividendsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Tinkoff.InvestApi.V1.Dividend> _repeated_dividends_codec
        = pb::FieldCodec.ForMessage(10, global::Tinkoff.InvestApi.V1.Dividend.Parser);
    private readonly pbc::RepeatedField<global::Tinkoff.InvestApi.V1.Dividend> dividends_ = new pbc::RepeatedField<global::Tinkoff.InvestApi.V1.Dividend>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Tinkoff.InvestApi.V1.Dividend> Dividends {
      get { return dividends_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as GetDividendsResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(GetDividendsResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!dividends_.Equals(other.dividends_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= dividends_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      dividends_.WriteTo(output, _repeated_dividends_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      dividends_.WriteTo(ref output, _repeated_dividends_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      size += dividends_.CalculateSize(_repeated_dividends_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(GetDividendsResponse other) {
      if (other == null) {
        return;
      }
      dividends_.Add(other.dividends_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            dividends_.AddEntriesFrom(input, _repeated_dividends_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            dividends_.AddEntriesFrom(ref input, _repeated_dividends_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///Информация о выплате.
  /// </summary>
  public sealed partial class Dividend : pb::IMessage<Dividend>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Dividend> _parser = new pb::MessageParser<Dividend>(() => new Dividend());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<Dividend> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tinkoff.InvestApi.V1.InstrumentsReflection.Descriptor.MessageTypes[30]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Dividend() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Dividend(Dividend other) : this() {
      dividendNet_ = other.dividendNet_ != null ? other.dividendNet_.Clone() : null;
      paymentDate_ = other.paymentDate_ != null ? other.paymentDate_.Clone() : null;
      declaredDate_ = other.declaredDate_ != null ? other.declaredDate_.Clone() : null;
      lastBuyDate_ = other.lastBuyDate_ != null ? other.lastBuyDate_.Clone() : null;
      dividendType_ = other.dividendType_;
      recordDate_ = other.recordDate_ != null ? other.recordDate_.Clone() : null;
      regularity_ = other.regularity_;
      closePrice_ = other.closePrice_ != null ? other.closePrice_.Clone() : null;
      yieldValue_ = other.yieldValue_ != null ? other.yieldValue_.Clone() : null;
      createdAt_ = other.createdAt_ != null ? other.createdAt_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Dividend Clone() {
      return new Dividend(this);
    }

    /// <summary>Field number for the "dividend_net" field.</summary>
    public const int DividendNetFieldNumber = 1;
    private global::Tinkoff.InvestApi.V1.MoneyValue dividendNet_;
    /// <summary>
    ///Величина дивиденда на 1 ценную бумагу (включая валюту).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Tinkoff.InvestApi.V1.MoneyValue DividendNet {
      get { return dividendNet_; }
      set {
        dividendNet_ = value;
      }
    }

    /// <summary>Field number for the "payment_date" field.</summary>
    public const int PaymentDateFieldNumber = 2;
    private global::Google.Protobuf.WellKnownTypes.Timestamp paymentDate_;
    /// <summary>
    ///Дата фактических выплат.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.WellKnownTypes.Timestamp PaymentDate {
      get { return paymentDate_; }
      set {
        paymentDate_ = value;
      }
    }

    /// <summary>Field number for the "declared_date" field.</summary>
    public const int DeclaredDateFieldNumber = 3;
    private global::Google.Protobuf.WellKnownTypes.Timestamp declaredDate_;
    /// <summary>
    ///Дата объявления дивидендов.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.WellKnownTypes.Timestamp DeclaredDate {
      get { return declaredDate_; }
      set {
        declaredDate_ = value;
      }
    }

    /// <summary>Field number for the "last_buy_date" field.</summary>
    public const int LastBuyDateFieldNumber = 4;
    private global::Google.Protobuf.WellKnownTypes.Timestamp lastBuyDate_;
    /// <summary>
    ///Последний день (включительно) покупки для получения выплаты.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.WellKnownTypes.Timestamp LastBuyDate {
      get { return lastBuyDate_; }
      set {
        lastBuyDate_ = value;
      }
    }

    /// <summary>Field number for the "dividend_type" field.</summary>
    public const int DividendTypeFieldNumber = 5;
    private string dividendType_ = "";
    /// <summary>
    ///Тип выплаты. Возможные значения: Regular Cash – регулярные выплаты, Cancelled – выплата отменена, Daily Accrual – ежедневное начисление, Return of Capital – возврат капитала, прочие типы выплат.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string DividendType {
      get { return dividendType_; }
      set {
        dividendType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "record_date" field.</summary>
    public const int RecordDateFieldNumber = 6;
    private global::Google.Protobuf.WellKnownTypes.Timestamp recordDate_;
    /// <summary>
    ///Дата фиксации реестра
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.WellKnownTypes.Timestamp RecordDate {
      get { return recordDate_; }
      set {
        recordDate_ = value;
      }
    }

    /// <summary>Field number for the "regularity" field.</summary>
    public const int RegularityFieldNumber = 7;
    private string regularity_ = "";
    /// <summary>
    ///Регулярность выплаты. Возможные значения: Annual – ежегодная, Semi-Anl – каждые полгода, прочие типы выплат.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Regularity {
      get { return regularity_; }
      set {
        regularity_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "close_price" field.</summary>
    public const int ClosePriceFieldNumber = 8;
    private global::Tinkoff.InvestApi.V1.MoneyValue closePrice_;
    /// <summary>
    ///Цена закрытия инструмента на момент ex_dividend_date.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Tinkoff.InvestApi.V1.MoneyValue ClosePrice {
      get { return closePrice_; }
      set {
        closePrice_ = value;
      }
    }

    /// <summary>Field number for the "yield_value" field.</summary>
    public const int YieldValueFieldNumber = 9;
    private global::Tinkoff.InvestApi.V1.Quotation yieldValue_;
    /// <summary>
    ///Величина доходности.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Tinkoff.InvestApi.V1.Quotation YieldValue {
      get { return yieldValue_; }
      set {
        yieldValue_ = value;
      }
    }

    /// <summary>Field number for the "created_at" field.</summary>
    public const int CreatedAtFieldNumber = 10;
    private global::Google.Protobuf.WellKnownTypes.Timestamp createdAt_;
    /// <summary>
    ///Дата и время создания записи.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.WellKnownTypes.Timestamp CreatedAt {
      get { return createdAt_; }
      set {
        createdAt_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as Dividend);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(Dividend other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(DividendNet, other.DividendNet)) return false;
      if (!object.Equals(PaymentDate, other.PaymentDate)) return false;
      if (!object.Equals(DeclaredDate, other.DeclaredDate)) return false;
      if (!object.Equals(LastBuyDate, other.LastBuyDate)) return false;
      if (DividendType != other.DividendType) return false;
      if (!object.Equals(RecordDate, other.RecordDate)) return false;
      if (Regularity != other.Regularity) return false;
      if (!object.Equals(ClosePrice, other.ClosePrice)) return false;
      if (!object.Equals(YieldValue, other.YieldValue)) return false;
      if (!object.Equals(CreatedAt, other.CreatedAt)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (dividendNet_ != null) hash ^= DividendNet.GetHashCode();
      if (paymentDate_ != null) hash ^= PaymentDate.GetHashCode();
      if (declaredDate_ != null) hash ^= DeclaredDate.GetHashCode();
      if (lastBuyDate_ != null) hash ^= LastBuyDate.GetHashCode();
      if (DividendType.Length != 0) hash ^= DividendType.GetHashCode();
      if (recordDate_ != null) hash ^= RecordDate.GetHashCode();
      if (Regularity.Length != 0) hash ^= Regularity.GetHashCode();
      if (closePrice_ != null) hash ^= ClosePrice.GetHashCode();
      if (yieldValue_ != null) hash ^= YieldValue.GetHashCode();
      if (createdAt_ != null) hash ^= CreatedAt.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (dividendNet_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(DividendNet);
      }
      if (paymentDate_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(PaymentDate);
      }
      if (declaredDate_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(DeclaredDate);
      }
      if (lastBuyDate_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(LastBuyDate);
      }
      if (DividendType.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(DividendType);
      }
      if (recordDate_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(RecordDate);
      }
      if (Regularity.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(Regularity);
      }
      if (closePrice_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(ClosePrice);
      }
      if (yieldValue_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(YieldValue);
      }
      if (createdAt_ != null) {
        output.WriteRawTag(82);
        output.WriteMessage(CreatedAt);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (dividendNet_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(DividendNet);
      }
      if (paymentDate_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(PaymentDate);
      }
      if (declaredDate_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(DeclaredDate);
      }
      if (lastBuyDate_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(LastBuyDate);
      }
      if (DividendType.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(DividendType);
      }
      if (recordDate_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(RecordDate);
      }
      if (Regularity.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(Regularity);
      }
      if (closePrice_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(ClosePrice);
      }
      if (yieldValue_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(YieldValue);
      }
      if (createdAt_ != null) {
        output.WriteRawTag(82);
        output.WriteMessage(CreatedAt);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (dividendNet_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DividendNet);
      }
      if (paymentDate_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PaymentDate);
      }
      if (declaredDate_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DeclaredDate);
      }
      if (lastBuyDate_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(LastBuyDate);
      }
      if (DividendType.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DividendType);
      }
      if (recordDate_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RecordDate);
      }
      if (Regularity.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Regularity);
      }
      if (closePrice_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ClosePrice);
      }
      if (yieldValue_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(YieldValue);
      }
      if (createdAt_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CreatedAt);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(Dividend other) {
      if (other == null) {
        return;
      }
      if (other.dividendNet_ != null) {
        if (dividendNet_ == null) {
          DividendNet = new global::Tinkoff.InvestApi.V1.MoneyValue();
        }
        DividendNet.MergeFrom(other.DividendNet);
      }
      if (other.paymentDate_ != null) {
        if (paymentDate_ == null) {
          PaymentDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        PaymentDate.MergeFrom(other.PaymentDate);
      }
      if (other.declaredDate_ != null) {
        if (declaredDate_ == null) {
          DeclaredDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        DeclaredDate.MergeFrom(other.DeclaredDate);
      }
      if (other.lastBuyDate_ != null) {
        if (lastBuyDate_ == null) {
          LastBuyDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        LastBuyDate.MergeFrom(other.LastBuyDate);
      }
      if (other.DividendType.Length != 0) {
        DividendType = other.DividendType;
      }
      if (other.recordDate_ != null) {
        if (recordDate_ == null) {
          RecordDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        RecordDate.MergeFrom(other.RecordDate);
      }
      if (other.Regularity.Length != 0) {
        Regularity = other.Regularity;
      }
      if (other.closePrice_ != null) {
        if (closePrice_ == null) {
          ClosePrice = new global::Tinkoff.InvestApi.V1.MoneyValue();
        }
        ClosePrice.MergeFrom(other.ClosePrice);
      }
      if (other.yieldValue_ != null) {
        if (yieldValue_ == null) {
          YieldValue = new global::Tinkoff.InvestApi.V1.Quotation();
        }
        YieldValue.MergeFrom(other.YieldValue);
      }
      if (other.createdAt_ != null) {
        if (createdAt_ == null) {
          CreatedAt = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        CreatedAt.MergeFrom(other.CreatedAt);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (dividendNet_ == null) {
              DividendNet = new global::Tinkoff.InvestApi.V1.MoneyValue();
            }
            input.ReadMessage(DividendNet);
            break;
          }
          case 18: {
            if (paymentDate_ == null) {
              PaymentDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(PaymentDate);
            break;
          }
          case 26: {
            if (declaredDate_ == null) {
              DeclaredDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(DeclaredDate);
            break;
          }
          case 34: {
            if (lastBuyDate_ == null) {
              LastBuyDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(LastBuyDate);
            break;
          }
          case 42: {
            DividendType = input.ReadString();
            break;
          }
          case 50: {
            if (recordDate_ == null) {
              RecordDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(RecordDate);
            break;
          }
          case 58: {
            Regularity = input.ReadString();
            break;
          }
          case 66: {
            if (closePrice_ == null) {
              ClosePrice = new global::Tinkoff.InvestApi.V1.MoneyValue();
            }
            input.ReadMessage(ClosePrice);
            break;
          }
          case 74: {
            if (yieldValue_ == null) {
              YieldValue = new global::Tinkoff.InvestApi.V1.Quotation();
            }
            input.ReadMessage(YieldValue);
            break;
          }
          case 82: {
            if (createdAt_ == null) {
              CreatedAt = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(CreatedAt);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (dividendNet_ == null) {
              DividendNet = new global::Tinkoff.InvestApi.V1.MoneyValue();
            }
            input.ReadMessage(DividendNet);
            break;
          }
          case 18: {
            if (paymentDate_ == null) {
              PaymentDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(PaymentDate);
            break;
          }
          case 26: {
            if (declaredDate_ == null) {
              DeclaredDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(DeclaredDate);
            break;
          }
          case 34: {
            if (lastBuyDate_ == null) {
              LastBuyDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(LastBuyDate);
            break;
          }
          case 42: {
            DividendType = input.ReadString();
            break;
          }
          case 50: {
            if (recordDate_ == null) {
              RecordDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(RecordDate);
            break;
          }
          case 58: {
            Regularity = input.ReadString();
            break;
          }
          case 66: {
            if (closePrice_ == null) {
              ClosePrice = new global::Tinkoff.InvestApi.V1.MoneyValue();
            }
            input.ReadMessage(ClosePrice);
            break;
          }
          case 74: {
            if (yieldValue_ == null) {
              YieldValue = new global::Tinkoff.InvestApi.V1.Quotation();
            }
            input.ReadMessage(YieldValue);
            break;
          }
          case 82: {
            if (createdAt_ == null) {
              CreatedAt = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(CreatedAt);
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
